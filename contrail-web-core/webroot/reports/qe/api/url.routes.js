/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/* This file is automatically generated from the parseURL.xml at
   Sun Nov 20 2016 01:02:58 GMT+0000 (UTC)
   Please do not edit this file.
 */

var parseURLReq = require(process.mainModule.exports["corePath"] + '/src/serverroot/common/parseURLRequire')
  , qeapi = require(process.mainModule.exports["corePath"] + '/webroot/reports/qe/api/query.api')
  ;


if (!module.parent) {
  console.log("Call main app through 'node app'");
  process.exit(1);
}
urlRoutes = module.exports;

/* Default handler for request timeout */
function defHandleReqTimeout (req, res)
{
  var str = "Request timed out: URL::" + req.url;
  if (req.pubChannel) {
    /* Delete the Req Pending Q Entry */
    parseURLReq.cacheApi.deleteCachePendingQueueEntry(req.pubChannel);
  };
  res.req.invalidated = true;
  res.send(parseURLReq.global.HTTP_STATUS_GATEWAY_TIMEOUT, str);
}

urlRoutes.registerURLsToApp = function(app) {
/* Register the URL with callback */
  app.get('/api/qe/query', qeapi_runGETQuery);
  app.post('/api/qe/query', qeapi_runPOSTQuery);
  app.post('/api/qe/get-query', qeapi_getQueryData);
  app.get('/api/qe/query/export', qeapi_exportQueryResult);
  app.get('/api/qe/query/queue', qeapi_getQueryQueue);
  app.get('/api/qe/query/chart-groups', qeapi_getChartGroups);
  app.get('/api/qe/query/chart-data', qeapi_getChartData);
  app.delete('/api/qe/query', qeapi_deleteQueryCache4Ids);
  app.delete('/api/qe/query/queue', qeapi_deleteQueryCache4Queue);
  app.get('/api/qe/tables', qeapi_getTables);
  app.get('/api/qe/table/values/:tableName/:column', qeapi_getColumnValues);
  app.post('/api/qe/table/column/values', qeapi_getTableColumnValues);
  app.get('/api/qe/table/schema/:tableName', qeapi_getTableSchema);


  parseURLReq.rbac.setFeatureByURL('/api/qe/query', 'get', app.routes, 'query-engine');
  parseURLReq.rbac.setFeatureByURL('/api/qe/query', 'post', app.routes, 'query-engine');
  parseURLReq.rbac.setFeatureByURL('/api/qe/get-query', 'post', app.routes, 'query-engine');
  parseURLReq.rbac.setFeatureByURL('/api/qe/query/export', 'get', app.routes, 'query-engine');
  parseURLReq.rbac.setFeatureByURL('/api/qe/query/queue', 'get', app.routes, 'query-engine');
  parseURLReq.rbac.setFeatureByURL('/api/qe/query/chart-groups', 'get', app.routes, 'query-engine');
  parseURLReq.rbac.setFeatureByURL('/api/qe/query/chart-data', 'get', app.routes, 'query-engine');
  parseURLReq.rbac.setFeatureByURL('/api/qe/query', 'delete', app.routes, 'query-engine');
  parseURLReq.rbac.setFeatureByURL('/api/qe/query/queue', 'delete', app.routes, 'query-engine');
  parseURLReq.rbac.setFeatureByURL('/api/qe/tables', 'get', app.routes, 'query-engine');
  parseURLReq.rbac.setFeatureByURL('/api/qe/table/values/:tableName/:column', 'get', app.routes, 'query-engine');
  parseURLReq.rbac.setFeatureByURL('/api/qe/table/column/values', 'post', app.routes, 'query-engine');
  parseURLReq.rbac.setFeatureByURL('/api/qe/table/schema/:tableName', 'get', app.routes, 'query-engine');
}
qeapi_runGETQuery = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 600);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, qeapi.runGETQuery);
  }
}
qeapi_runPOSTQuery = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 600);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, qeapi.runPOSTQuery);
  }
}
qeapi_getQueryData = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 600);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, qeapi.getQueryData);
  }
}
qeapi_exportQueryResult = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 300);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, qeapi.exportQueryResult);
  }
}
qeapi_getQueryQueue = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 300);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, qeapi.getQueryQueue);
  }
}
qeapi_getChartGroups = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 300);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, qeapi.getChartGroups);
  }
}
qeapi_getChartData = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 300);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, qeapi.getChartData);
  }
}
qeapi_deleteQueryCache4Ids = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, qeapi.deleteQueryCache4Ids);
  }
}
qeapi_deleteQueryCache4Queue = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, qeapi.deleteQueryCache4Queue);
  }
}
qeapi_getTables = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, qeapi.getTables);
  }
}
qeapi_getColumnValues = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, qeapi.getColumnValues);
  }
}
qeapi_getTableColumnValues = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, qeapi.getTableColumnValues);
  }
}
qeapi_getTableSchema = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, qeapi.getTableSchema);
  }
}
