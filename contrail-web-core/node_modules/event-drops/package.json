{
  "name": "event-drops",
  "version": "0.3.0-alpha1",
  "description": "A time based / event series interactive visualization using d3.js. Use drag and zoom to navigate in time.",
  "main": "dist/eventDrops.js",
  "files": [
    "dist/",
    "style.css",
    "*.md"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/marmelab/EventDrops"
  },
  "dependencies": {
    "d3": "3.5.3"
  },
  "devDependencies": {
    "babel-core": "6.4.5",
    "babel-eslint": "^4.1.8",
    "babel-loader": "6.2.1",
    "babel-preset-es2015": "6.3.13",
    "babel-preset-stage-0": "^6.3.13",
    "configurable.js": "0.1.0",
    "css-loader": "0.19.0",
    "eslint": "1.6.0",
    "eslint-config-airbnb": "0.1.0",
    "extract-text-webpack-plugin": "1.0.1",
    "html-loader": "0.3.0",
    "html-webpack-plugin": "1.6.1",
    "jasmine-core": "2.4.1",
    "jsdom": "1.0.0-pre.6",
    "karma": "^0.13.19",
    "karma-jasmine": "^0.3.6",
    "karma-firefox-launcher": "0.1.7",
    "karma-webpack": "^1.7.0",
    "mocha": "1.21.4",
    "mocha-traceur": "2.1.0",
    "scss-loader": "0.0.1",
    "style-loader": "0.12.4",
    "webpack": "1.12.2",
    "webpack-dev-server": "1.11.0"
  },
  "bugs": {
    "url": "https://github.com/marmelab/EventDrops/issues"
  },
  "homepage": "https://github.com/marmelab/EventDrops",
  "directories": {
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "prepublish": "make build",
    "postpublish": "make deploy-demo",
    "start": "webpack-dev-server --colors --devtool cheap-module-inline-source-map --host=0.0.0.0",
    "karma": "karma start test/karma/karma.conf.js",
    "test": "npm run karma -- --single-run",
    "test-watch": "npm run karma",
    "run": "npm start",
    "build": "webpack -p --optimize-minimize --optimize-occurence-order --optimize-dedupe --progress --devtool source-map"
  },
  "author": {
    "name": "Thiery Michel",
    "email": "thiery@marmelab.com"
  },
  "contributors": [
    {
      "name": "Chad Ramos"
    },
    {
      "name": "Chulki Lee"
    },
    {
      "name": "Emmanuel Quentin"
    },
    {
      "name": "Francois Zaninotto"
    },
    {
      "name": "Joan Yin"
    },
    {
      "name": "Joel Schlosser"
    },
    {
      "name": "Jonathan Petitcolas",
      "email": "petitcolas.jonathan@gmail.com"
    },
    {
      "name": "MÃ©lodie Benmouffek"
    },
    {
      "name": "messense"
    },
    {
      "name": "Robin Bressan"
    }
  ],
  "license": "MIT",
  "readme": "EventDrops\n==========\n\nA time based / event series interactive visualization using d3.js. Use drag and zoom to navigate in time. [See the demo](http://marmelab.com/EventDrops/)\n\n![EventDrops example](http://static.marmelab.com/EventDrops.gif)\n\n## Installation\n\nYou can use `npm` to install event-drops\n\n```\nnpm install event-drops --save\n```\n\nFor Bower users, even if Bower is not officially supported, you can still use GitHub URL such as:\n\n```\n{\n    \"dependencies\": {\n        \"eventDrops\": \"marmelab/EventDrops#0.1.2\"\n    }\n}\n```\n\n## Usage\n\nInclude the `src/eventDrops.js` script in your page after d3:\n\n```html\n<script src=\"path/to/d3.js\"></script>\n<script src=\"src/eventDrops.js\"></script>\n```\n\n**Tip**: You can also use RequireJs, see [example/amd](https://github.com/marmelab/EventDrops/tree/master/example/amd) for an implementation.\n\nIn the HTML source, create a new EventDrops chart, bind data to a DOM element, then call the chart on the element.\n\n```js\nvar eventDropsChart = d3.chart.eventDrops();\nd3.select('#chart_placeholder')\n  .datum(data)\n  .call(eventDropsChart);\n```\n\nThe data can be an array of named time series. For instance:\n\n```js\nvar data = [\n  { name: \"http requests\", data: [new Date('2014/09/15 13:24:54'), new Date('2014/09/15 13:25:03'), new Date('2014/09/15 13:25:05'), ...] },\n  { name: \"SQL queries\", data: [new Date('2014/09/15 13:24:57'), new Date('2014/09/15 13:25:04'), new Date('2014/09/15 13:25:04'), ...] },\n  { name: \"cache invalidations\", data: [new Date('2014/09/15 13:25:12'), ...] }\n];\n```\n\nYou can also generate a chart from any type of data array but this requires us\nto supply a function that will return a date from each data point. The complete\ndata object will be available during the eventColor and eventClick callbacks\nfor example. An example data set:\n\n```js\nvar data = [\n  { name: \"http requests\", data: [{date: new Date('2014/09/15 13:24:54'), foo: 'bar1'}, {date: new Date('2014/09/15 13:25:03'), foo: 'bar2'}, {date: new Date('2014/09/15 13:25:05'), foo: 'bar1'}, ...] },\n  { name: \"SQL queries\", data: [{date: new Date('2014/09/15 13:24:57'), foo: 'bar4'}, {date: new Date('2014/09/15 13:25:04'), foo: 'bar6'}, {date: new Date('2014/09/15 13:25:04'), foo: 'bar2'}, ...] }\n];\n```\n\nAnd the corresponding \"date\" function that returns a date for\neach data point.\n\n```js\nvar eventDropsChart = d3.chart.eventDrops();\nd3.select('#chart_placeholder')\n  .datum(data)\n  .date(function(d){\n      return d.date;\n  }),\n  .call(eventDropsChart);\n```\n\n## Configuration\n\nEventDrops follows the [d3.js reusable charts pattern](http://bost.ocks.org/mike/chart/) to let you customize the chart at will:\n\n```js\nvar eventDropsChart = d3.chart.eventDrops()\n  .width(1200)\n  .hasTopAxis(false);\n```\n\nConfigurable values:\n\n  - `start`: start date of the scale. Defaults to `new Date(0)`.\n  - `end`: end date of the scale. Defaults to `new Date()`\n  - `margin`: margins of the graph in pixels. Defaults to `{ top: 60, left: 200, bottom: 40, right: 50 }`\n  - `locale`: locale used for the X axis labels. See [d3.locale](https://github.com/mbostock/d3/wiki/Localization#locale) for the expected format. Defaults to null (i.e. d3 default locale).\n  - `labelsWidth`: width of the labels. Defaults to `210`.\n  - `labelsRightMargin`: margin between labels and drops lines. Defaults to `10`.\n  - `axisFormat`: function receiving the d3 axis object, to customize tick number and size.\n  - `tickFormat`: tickFormat for the X axis. See [d3.timeFormat.multi()](https://github.com/mbostock/d3/wiki/Time-Formatting#format_multi) for expected format.\n  - `mouseover`: function to be called when hovering an event in the chart. Receives the DOM element hovered (uses event delegation). Default: `() => {}`.\n  - `zoomend`: function to be called when done zooming on the chart. Receives the d3 scale at the end of the zoom. Default: `() => {}`.\n  - `click`: function to be called on click event of data-point (circle). Receives the DOM element hovered (uses event delegation). Default: `() => {}`.\n  - `hasDelimiter`: whether to draw time boundaries on top of the chart. Defaults to `true`.\n  - `hasTopAxis`: whether the chart has a top X axis. Accepts both a boolean or a function receiving the data of the graph that returns a boolean.\n  - `hasBottomAxis`: same as topAxis but for the bottom X axis\n  - `eventLineColor`: The color of the event line. Accepts a color (color name or `#ffffff` notation), or a function receiving the eventData and returning a color. Defaults to `'black'`.\n  - `eventColor`: The color of the event. Accepts a color (color name or `#ffffff` notation), or a function receiving the eventData and returning a color. Defaults to `null`. EventLineColor will be ignored if this is used.\n  - `minScale`: The minimum scaling (zoom out), default to `0`.\n  - `maxScale`: The maximum scaling (zoom in), default to `Infinity`.\n  - `mouseout`: event handler to execute when mouse leave a drop. Default: `() => {}`.\n  - `zoomable`: *true* by default. Enable zoom-in/zoom-out and dragging handlers.\n  - `date`: function that returns the date from each data point when passing objects. Defaults to `d=>d`.\n\n## Styling\n\nYou can style all elements of the chart in CSS. Check the source to see the available selectors.\n\n## Extending / Hacking\n\nFirst, install the dependencies:\n\n```sh\nmake install\n```\n\nFor development purpose, you can use the following command:\n\n``` sh\nmake run\n```\n\nIt serves the demo at http://localhost:8080. It also watches source files and live\nreloads your browser as soon as a change is detected.\n\nWhen your changes are done, ensure that all tests pass with:\n\n``` sh\nmake test\n```\n\nFinally, if everything is fine, you can rebuild the library using:\n\n``` sh\nmake build\n```\n\nHowever, for better Pull Request reviewing, please do not commit the build files\nin the same PR. You can then rebuild it once merged.\n\n## License\n\nEventDrops is released under the MIT License, courtesy of [marmelab](http://marmelab.com) and [Canal Plus](https://github.com/canalplus).\n",
  "readmeFilename": "README.md",
  "_id": "event-drops@0.3.0-alpha1",
  "dist": {
    "shasum": "7c3bc3d2caab472239b9e4df8911d598d3907243"
  },
  "_resolved": "/tmp/cache/ubuntu/webui_third_party/event-drops-0.3.0-alpha1.tgz",
  "_from": "/tmp/cache/ubuntu/webui_third_party/event-drops-0.3.0-alpha1.tgz"
}
