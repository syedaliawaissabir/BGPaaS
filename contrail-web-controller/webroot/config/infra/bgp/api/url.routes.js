/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/* This file is automatically generated from the parseURL.xml at
   Sun Nov 20 2016 01:02:58 GMT+0000 (UTC)
   Please do not edit this file.
 */

var parseURLReq = require(process.mainModule.exports["corePath"] + '/src/serverroot/common/parseURLRequire')
  , adminapi = require('./admin.api')
  ;


if (!module.parent) {
  console.log("Call main app through 'node app'");
  process.exit(1);
}
urlRoutes = module.exports;

/* Default handler for request timeout */
function defHandleReqTimeout (req, res)
{
  var str = "Request timed out: URL::" + req.url;
  if (req.pubChannel) {
    /* Delete the Req Pending Q Entry */
    parseURLReq.cacheApi.deleteCachePendingQueueEntry(req.pubChannel);
  };
  res.req.invalidated = true;
  res.send(parseURLReq.global.HTTP_STATUS_GATEWAY_TIMEOUT, str);
}

urlRoutes.registerURLsToApp = function(app) {
/* Register the URL with callback */
  app.get('/api/admin/nodes/:type', adminapi_getControlNodeDetailsFromConfig);
  app.get('/api/tenants/config/bgp/get-bgp-routers', adminapi_getAllBGPRouters);
  app.get('/api/admin/bgp-routers/:type', adminapi_getBGPRouters);
  app.get('/api/admin/bgp-router/:id', adminapi_getBGPRouter);
  app.post('/api/admin/bgp-router', adminapi_createBGPRouter);
  app.delete('/api/admin/bgp-router/:id', adminapi_deleteBGPRouter);
  app.put('/api/admin/bgp-router/:id', adminapi_updateBGPRouter);
  app.get('/api/admin/analyzers', adminapi_getAnalyzers);
  app.get('/api/admin/analyzers/:name', adminapi_getAnalyzer);
  app.get('/api/admin/mirrors', adminapi_getMirrors);
  app.get('/api/admin/mirrors/:name', adminapi_getMirror);
  app.post('/api/admin/add-analyzer', adminapi_addAnalyzer);
  app.post('/api/admin/delete-analyzer/:name', adminapi_deleteAnalyzer);
  app.get('/api/admin/add-mirror', adminapi_addMirror);
  app.post('/api/admin/delete-mirror/:name', adminapi_deleteMirror);
  app.get('/api/admin/networks', adminapi_getAllVNs);
  app.get('/api/tenants/admin/config/global-asn', adminapi_getGlobalASN);
  app.put('/api/tenants/admin/config/global-asn', adminapi_updateGlobalASN);
  app.put('/api/tenants/admin/config/ibgp-auto-mesh', adminapi_updateiBGPAutoMesh);
  app.get('/api/admin/control-node/:name', adminapi_getControlNode);
  app.get('/api/admin/config/get-data', adminapi_getApiServerDataByPage);
  app.put('/api/tenants/admin/config/ip-fabric-subnets', adminapi_updateIPFabricSubnets);


  parseURLReq.rbac.setFeatureByURL('/api/admin/nodes/:type', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/bgp/get-bgp-routers', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/admin/bgp-routers/:type', 'get', app.routes, 'bgp');
  parseURLReq.rbac.setFeatureByURL('/api/admin/bgp-router/:id', 'get', app.routes, 'bgp');
  parseURLReq.rbac.setFeatureByURL('/api/admin/bgp-router', 'post', app.routes, 'bgp');
  parseURLReq.rbac.setFeatureByURL('/api/admin/bgp-router/:id', 'delete', app.routes, 'bgp');
  parseURLReq.rbac.setFeatureByURL('/api/admin/bgp-router/:id', 'put', app.routes, 'bgp');
  parseURLReq.rbac.setFeatureByURL('/api/admin/analyzers', 'get', app.routes, 'pcapture');
  parseURLReq.rbac.setFeatureByURL('/api/admin/analyzers/:name', 'get', app.routes, 'pcapture');
  parseURLReq.rbac.setFeatureByURL('/api/admin/mirrors', 'get', app.routes, 'pcapture');
  parseURLReq.rbac.setFeatureByURL('/api/admin/mirrors/:name', 'get', app.routes, 'pcapture');
  parseURLReq.rbac.setFeatureByURL('/api/admin/add-analyzer', 'post', app.routes, 'pcapture');
  parseURLReq.rbac.setFeatureByURL('/api/admin/delete-analyzer/:name', 'post', app.routes, 'pcapture');
  parseURLReq.rbac.setFeatureByURL('/api/admin/add-mirror', 'get', app.routes, 'pcapture');
  parseURLReq.rbac.setFeatureByURL('/api/admin/delete-mirror/:name', 'post', app.routes, 'pcapture');
  parseURLReq.rbac.setFeatureByURL('/api/admin/networks', 'get', app.routes, 'pcapture');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/admin/config/global-asn', 'get', app.routes, 'bgp');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/admin/config/global-asn', 'put', app.routes, 'bgp');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/admin/config/ibgp-auto-mesh', 'put', app.routes, 'bgp');
  parseURLReq.rbac.setFeatureByURL('/api/admin/control-node/:name', 'get', app.routes, 'control-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/config/get-data', 'get', app.routes, 'orchestration');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/admin/config/ip-fabric-subnets', 'put', app.routes, 'bgp');
}
adminapi_getControlNodeDetailsFromConfig = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.getControlNodeDetailsFromConfig);
  }
}
adminapi_getAllBGPRouters = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.getAllBGPRouters);
  }
}
adminapi_getBGPRouters = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.getBGPRouters);
  }
}
adminapi_getBGPRouter = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.getBGPRouter);
  }
}
adminapi_createBGPRouter = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.createBGPRouter);
  }
}
adminapi_deleteBGPRouter = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.deleteBGPRouter);
  }
}
adminapi_updateBGPRouter = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.updateBGPRouter);
  }
}
adminapi_getAnalyzers = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.getAnalyzers);
  }
}
adminapi_getAnalyzer = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.getAnalyzer);
  }
}
adminapi_getMirrors = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.getMirrors);
  }
}
adminapi_getMirror = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.getMirror);
  }
}
adminapi_addAnalyzer = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.addAnalyzer);
  }
}
adminapi_deleteAnalyzer = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.deleteAnalyzer);
  }
}
adminapi_addMirror = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.addMirror);
  }
}
adminapi_deleteMirror = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.deleteMirror);
  }
}
adminapi_getAllVNs = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.getAllVNs);
  }
}
adminapi_getGlobalASN = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.getGlobalASN);
  }
}
adminapi_updateGlobalASN = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.updateGlobalASN);
  }
}
adminapi_updateiBGPAutoMesh = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.updateiBGPAutoMesh);
  }
}
adminapi_getControlNode = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.getControlNode);
  }
}
adminapi_getApiServerDataByPage = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.getApiServerDataByPage);
  }
}
adminapi_updateIPFabricSubnets = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, adminapi.updateIPFabricSubnets);
  }
}
