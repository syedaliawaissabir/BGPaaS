/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/* This file is automatically generated from the parseURL.xml at
   Sun Nov 20 2016 01:02:58 GMT+0000 (UTC)
   Please do not edit this file.
 */

var parseURLReq = require(process.mainModule.exports["corePath"] + '/src/serverroot/common/parseURLRequire')
  , globalvrouterconfigapi = require('./globalvrouterconfig.api')
  ;


if (!module.parent) {
  console.log("Call main app through 'node app'");
  process.exit(1);
}
urlRoutes = module.exports;

/* Default handler for request timeout */
function defHandleReqTimeout (req, res)
{
  var str = "Request timed out: URL::" + req.url;
  if (req.pubChannel) {
    /* Delete the Req Pending Q Entry */
    parseURLReq.cacheApi.deleteCachePendingQueueEntry(req.pubChannel);
  };
  res.req.invalidated = true;
  res.send(parseURLReq.global.HTTP_STATUS_GATEWAY_TIMEOUT, str);
}

urlRoutes.registerURLsToApp = function(app) {
/* Register the URL with callback */
  app.get('/api/tenants/config/global-vrouter-config', globalvrouterconfigapi_getGlobalvRouterConfig);
  app.post('/api/tenants/config/global-vrouter-configs', globalvrouterconfigapi_createGlobalvRouterConfig);
  app.put('/api/tenants/config/global-vrouter-config/:id/forwarding-options', globalvrouterconfigapi_updateForwardingOptions);
  app.put('/api/tenants/config/global-vrouter-config/:id/link-local-services', globalvrouterconfigapi_updateLinkLocalService);
  app.put('/api/tenants/config/update-global-config', globalvrouterconfigapi_updateGlobalConfig);


  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/global-vrouter-config', 'get', app.routes, 'globalvrouterconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/global-vrouter-configs', 'post', app.routes, 'globalvrouterconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/global-vrouter-config/:id/forwarding-options', 'put', app.routes, 'globalvrouterconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/global-vrouter-config/:id/link-local-services', 'put', app.routes, 'globalvrouterconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/update-global-config', 'put', app.routes, 'globalvrouterconfig');
}
globalvrouterconfigapi_getGlobalvRouterConfig = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, globalvrouterconfigapi.getGlobalvRouterConfig);
  }
}
globalvrouterconfigapi_createGlobalvRouterConfig = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, globalvrouterconfigapi.createGlobalvRouterConfig);
  }
}
globalvrouterconfigapi_updateForwardingOptions = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, globalvrouterconfigapi.updateForwardingOptions);
  }
}
globalvrouterconfigapi_updateLinkLocalService = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, globalvrouterconfigapi.updateLinkLocalService);
  }
}
globalvrouterconfigapi_updateGlobalConfig = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, globalvrouterconfigapi.updateGlobalConfig);
  }
}
