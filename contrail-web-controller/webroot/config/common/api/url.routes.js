/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/* This file is automatically generated from the parseURL.xml at
   Sun Nov 20 2016 01:02:58 GMT+0000 (UTC)
   Please do not edit this file.
 */

var parseURLReq = require(process.mainModule.exports["corePath"] + '/src/serverroot/common/parseURLRequire')
  , projectconfigapi = require('./projectconfig.api')
  , configUtilapi = require('./configUtil.api')
  ;


if (!module.parent) {
  console.log("Call main app through 'node app'");
  process.exit(1);
}
urlRoutes = module.exports;

/* Default handler for request timeout */
function defHandleReqTimeout (req, res)
{
  var str = "Request timed out: URL::" + req.url;
  if (req.pubChannel) {
    /* Delete the Req Pending Q Entry */
    parseURLReq.cacheApi.deleteCachePendingQueueEntry(req.pubChannel);
  };
  res.req.invalidated = true;
  res.send(parseURLReq.global.HTTP_STATUS_GATEWAY_TIMEOUT, str);
}

urlRoutes.registerURLsToApp = function(app) {
/* Register the URL with callback */
  app.get('/api/tenants/config/projects', projectconfigapi_listProjects);
  app.get('/api/tenants/config/all-projects', projectconfigapi_listAllProjects);
  app.get('/api/tenants/config/projects/:domain', projectconfigapi_listProjects);
  app.get('/api/tenants/config/project/:id', projectconfigapi_getProjectByParameter);
  app.get('/api/tenants/config/domains', projectconfigapi_listDomains);
  app.get('/api/tenants/config/all-domains', projectconfigapi_listAllDomains);
  app.post('/api/tenants/config/delete', configUtilapi_deleteMultiObject);
  app.post('/api/tenants/config/get-config-details', configUtilapi_getConfigDetails);
  app.post('/api/tenants/config/get-config-list', configUtilapi_getConfigList);
  app.post('/api/tenants/config/get-config-objects', configUtilapi_getConfigObjects);
  app.post('/api/tenants/config/create-config-object', configUtilapi_createConfigObject);
  app.post('/api/tenants/config/update-config-object', configUtilapi_updateConfigObject);
  app.delete('/api/tenants/config/delete-config-data', configUtilapi_deleteConfigObj);
  app.get('/api/tenants/config/get-config-uuid-list', configUtilapi_getConfigUUIDList);
  app.post('/api/tenants/config/get-config-data-paged', configUtilapi_getConfigPaginatedResponse);


  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/projects', 'get', app.routes, 'projectconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/all-projects', 'get', app.routes, 'projectconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/projects/:domain', 'get', app.routes, 'projectconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/project/:id', 'get', app.routes, 'projectconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/domains', 'get', app.routes, 'projectconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/all-domains', 'get', app.routes, 'projectconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/delete', 'post', app.routes, 'configUtil');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/get-config-details', 'post', app.routes, 'configUtil');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/get-config-list', 'post', app.routes, 'configUtil');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/get-config-objects', 'post', app.routes, 'configUtil');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/create-config-object', 'post', app.routes, 'configUtil');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/update-config-object', 'post', app.routes, 'configUtil');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/delete-config-data', 'delete', app.routes, 'configUtil');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/get-config-uuid-list', 'get', app.routes, 'configUtil');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/get-config-data-paged', 'post', app.routes, 'configUtil');
}
projectconfigapi_listProjects = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, projectconfigapi.listProjects);
  }
}
projectconfigapi_listAllProjects = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, projectconfigapi.listAllProjects);
  }
}
projectconfigapi_listProjects = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, projectconfigapi.listProjects);
  }
}
projectconfigapi_getProjectByParameter = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, projectconfigapi.getProjectByParameter);
  }
}
projectconfigapi_listDomains = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, projectconfigapi.listDomains);
  }
}
projectconfigapi_listAllDomains = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, projectconfigapi.listAllDomains);
  }
}
configUtilapi_deleteMultiObject = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, configUtilapi.deleteMultiObject);
  }
}
configUtilapi_getConfigDetails = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, configUtilapi.getConfigDetails);
  }
}
configUtilapi_getConfigList = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, configUtilapi.getConfigList);
  }
}
configUtilapi_getConfigObjects = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, configUtilapi.getConfigObjects);
  }
}
configUtilapi_createConfigObject = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, configUtilapi.createConfigObject);
  }
}
configUtilapi_updateConfigObject = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, configUtilapi.updateConfigObject);
  }
}
configUtilapi_deleteConfigObj = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, configUtilapi.deleteConfigObj);
  }
}
configUtilapi_getConfigUUIDList = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, configUtilapi.getConfigUUIDList);
  }
}
configUtilapi_getConfigPaginatedResponse = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, configUtilapi.getConfigPaginatedResponse);
  }
}
