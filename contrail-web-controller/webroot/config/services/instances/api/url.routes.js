/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/* This file is automatically generated from the parseURL.xml at
   Sun Nov 20 2016 01:02:58 GMT+0000 (UTC)
   Please do not edit this file.
 */

var parseURLReq = require(process.mainModule.exports["corePath"] + '/src/serverroot/common/parseURLRequire')
  , siconfigapi = require('./serviceinstanceconfig.api')
  ;


if (!module.parent) {
  console.log("Call main app through 'node app'");
  process.exit(1);
}
urlRoutes = module.exports;

/* Default handler for request timeout */
function defHandleReqTimeout (req, res)
{
  var str = "Request timed out: URL::" + req.url;
  if (req.pubChannel) {
    /* Delete the Req Pending Q Entry */
    parseURLReq.cacheApi.deleteCachePendingQueueEntry(req.pubChannel);
  };
  res.req.invalidated = true;
  res.send(parseURLReq.global.HTTP_STATUS_GATEWAY_TIMEOUT, str);
}

urlRoutes.registerURLsToApp = function(app) {
/* Register the URL with callback */
  app.get('/api/tenants/config/service-instances/:id', siconfigapi_listServiceInstances);
  app.get('/api/tenants/config/list-service-instances/:id', siconfigapi_getServiceInstances);
  app.post('/api/tenants/config/service-instances-status/:id', siconfigapi_getServiceInstanceStatusByProject);
  app.get('/api/tenants/config/service-instance/:id', siconfigapi_getServiceInstance);
  app.post('/api/tenants/config/service-instances', siconfigapi_createServiceInstance);
  app.put('/api/tenants/config/service-instances/:uuid', siconfigapi_updateServiceInstance);
  app.delete('/api/tenants/config/service-instance/:id', siconfigapi_deleteServiceInstance);
  app.get('/api/tenants/config/service-instance-templates/:id', siconfigapi_listServiceInstanceTemplates);
  app.get('/api/tenants/config/service-instance-vm', siconfigapi_getVNCUrl);
  app.post('/api/tenants/config/interface/packet-capture', siconfigapi_configurePacketCapture4Interface);
  app.post('/api/tenants/config/flow/packet-capture', siconfigapi_configurePacketCapture4Flow);
  app.get('/api/tenants/config/service-instances-details', siconfigapi_listAllServiceInstancesDetails);
  app.get('/api/tenants/config/getHostList', siconfigapi_getHostList);
  app.get('/api/tenants/config/getAvailabilityZone', siconfigapi_getAvailabilityZone);


  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/service-instances/:id', 'get', app.routes, 'siconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/list-service-instances/:id', 'get', app.routes, 'siconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/service-instances-status/:id', 'post', app.routes, 'siconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/service-instance/:id', 'get', app.routes, 'siconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/service-instances', 'post', app.routes, 'siconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/service-instances/:uuid', 'put', app.routes, 'siconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/service-instance/:id', 'delete', app.routes, 'siconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/service-instance-templates/:id', 'get', app.routes, 'siconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/service-instance-vm', 'get', app.routes, 'siconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/interface/packet-capture', 'post', app.routes, 'siconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/flow/packet-capture', 'post', app.routes, 'siconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/service-instances-details', 'get', app.routes, 'siconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/getHostList', 'get', app.routes, 'siconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/getAvailabilityZone', 'get', app.routes, 'siconfig');
}
siconfigapi_listServiceInstances = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, siconfigapi.listServiceInstances);
  }
}
siconfigapi_getServiceInstances = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, siconfigapi.getServiceInstances);
  }
}
siconfigapi_getServiceInstanceStatusByProject = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 900);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, siconfigapi.getServiceInstanceStatusByProject);
  }
}
siconfigapi_getServiceInstance = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, siconfigapi.getServiceInstance);
  }
}
siconfigapi_createServiceInstance = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, siconfigapi.createServiceInstance);
  }
}
siconfigapi_updateServiceInstance = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, siconfigapi.updateServiceInstance);
  }
}
siconfigapi_deleteServiceInstance = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, siconfigapi.deleteServiceInstance);
  }
}
siconfigapi_listServiceInstanceTemplates = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, siconfigapi.listServiceInstanceTemplates);
  }
}
siconfigapi_getVNCUrl = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, siconfigapi.getVNCUrl);
  }
}
siconfigapi_configurePacketCapture4Interface = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, siconfigapi.configurePacketCapture4Interface);
  }
}
siconfigapi_configurePacketCapture4Flow = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, siconfigapi.configurePacketCapture4Flow);
  }
}
siconfigapi_listAllServiceInstancesDetails = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, siconfigapi.listAllServiceInstancesDetails);
  }
}
siconfigapi_getHostList = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, siconfigapi.getHostList);
  }
}
siconfigapi_getAvailabilityZone = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, siconfigapi.getAvailabilityZone);
  }
}
