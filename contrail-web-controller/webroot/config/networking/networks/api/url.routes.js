/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/* This file is automatically generated from the parseURL.xml at
   Sun Nov 20 2016 01:02:58 GMT+0000 (UTC)
   Please do not edit this file.
 */

var parseURLReq = require(process.mainModule.exports["corePath"] + '/src/serverroot/common/parseURLRequire')
  , vnconfigapi = require('./vnconfig.api')
  , vCenterVNconfigapi = require('./vnconfig.vcenter.api')
  ;


if (!module.parent) {
  console.log("Call main app through 'node app'");
  process.exit(1);
}
urlRoutes = module.exports;

/* Default handler for request timeout */
function defHandleReqTimeout (req, res)
{
  var str = "Request timed out: URL::" + req.url;
  if (req.pubChannel) {
    /* Delete the Req Pending Q Entry */
    parseURLReq.cacheApi.deleteCachePendingQueueEntry(req.pubChannel);
  };
  res.req.invalidated = true;
  res.send(parseURLReq.global.HTTP_STATUS_GATEWAY_TIMEOUT, str);
}

urlRoutes.registerURLsToApp = function(app) {
/* Register the URL with callback */
  app.get('/api/tenants/config/virtual-networks', vnconfigapi_listVirtualNetworks);
  app.get('/api/tenants/config/virtual-network/:id', vnconfigapi_getVirtualNetwork);
  app.post('/api/tenants/config/virtual-networks', vnconfigapi_createVirtualNetwork);
  app.post('/vcenter/api/tenants/config/virtual-networks', vCenterVNconfigapi_createVirtualNetwork);
  app.put('/api/tenants/config/virtual-network/:id', vnconfigapi_updateVirtualNetwork);
  app.delete('/api/tenants/config/virtual-network/:id', vnconfigapi_deleteVirtualNetwork);
  app.delete('/vcenter/api/tenants/config/virtual-network/:id', vCenterVNconfigapi_deleteVirtualNetwork);
  app.post('/api/tenants/config/virtual-network/:id/ipams', vnconfigapi_updateVNSubnetAdd);
  app.put('/api/tenants/config/virtual-network/:id/ipams', vnconfigapi_updateVNSubnetDelete);
  app.post('/api/tenants/config/virtual-network/:id/floatingip-pools', vnconfigapi_updateVNFipPoolAdd);
  app.delete('/api/tenants/config/virtual-network/:id/floatingip-pool/:fipid', vnconfigapi_updateVNFipPoolDelete);
  app.put('/api/tenants/config/virtual-network/:id/floatingip-pool/:fipid', vnconfigapi_updateVNFipPoolUpdate);
  app.put('/api/tenants/config/virtual-network/:id/network-policys', vnconfigapi_updateVNNetPolicies);
  app.put('/api/tenants/config/virtual-network/:id/route-targets', vnconfigapi_updateVNRouteTargets);
  app.get('/api/tenants/config/virtual-machine-interfaces', vnconfigapi_listVirtualMachineInterfaces);
  app.get('/api/tenants/config/shared-virtual-networks', vnconfigapi_getSharedVirtualNetworks);
  app.get('/api/tenants/config/external-virtual-networks', vnconfigapi_getExternalVirtualNetworks);
  app.get('/api/tenants/config/all-virtual-networks-fields', vnconfigapi_getAllVirtualNetworksWFields);
  app.get('/api/tenants/config/all-virtual-networks', vnconfigapi_getAllVirtualNetworks);
  app.post('/api/tenants/config/vn-list-details', vnconfigapi_getVNListOrDetails);
  app.get('/api/tenants/config/virtual-network-details', vnconfigapi_getVNDetails);


  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/virtual-networks', 'get', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/virtual-network/:id', 'get', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/virtual-networks', 'post', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/vcenter/api/tenants/config/virtual-networks', 'post', app.routes, 'vCenterVNconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/virtual-network/:id', 'put', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/virtual-network/:id', 'delete', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/vcenter/api/tenants/config/virtual-network/:id', 'delete', app.routes, 'vCenterVNconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/virtual-network/:id/ipams', 'post', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/virtual-network/:id/ipams', 'put', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/virtual-network/:id/floatingip-pools', 'post', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/virtual-network/:id/floatingip-pool/:fipid', 'delete', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/virtual-network/:id/floatingip-pool/:fipid', 'put', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/virtual-network/:id/network-policys', 'put', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/virtual-network/:id/route-targets', 'put', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/virtual-machine-interfaces', 'get', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/shared-virtual-networks', 'get', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/external-virtual-networks', 'get', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/all-virtual-networks-fields', 'get', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/all-virtual-networks', 'get', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/vn-list-details', 'post', app.routes, 'vnconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/virtual-network-details', 'get', app.routes, 'vnconfig');
}
vnconfigapi_listVirtualNetworks = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.listVirtualNetworks);
  }
}
vnconfigapi_getVirtualNetwork = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.getVirtualNetwork);
  }
}
vnconfigapi_createVirtualNetwork = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.createVirtualNetwork);
  }
}
vCenterVNconfigapi_createVirtualNetwork = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vCenterVNconfigapi.createVirtualNetwork);
  }
}
vnconfigapi_updateVirtualNetwork = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.updateVirtualNetwork);
  }
}
vnconfigapi_deleteVirtualNetwork = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.deleteVirtualNetwork);
  }
}
vCenterVNconfigapi_deleteVirtualNetwork = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vCenterVNconfigapi.deleteVirtualNetwork);
  }
}
vnconfigapi_updateVNSubnetAdd = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.updateVNSubnetAdd);
  }
}
vnconfigapi_updateVNSubnetDelete = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.updateVNSubnetDelete);
  }
}
vnconfigapi_updateVNFipPoolAdd = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.updateVNFipPoolAdd);
  }
}
vnconfigapi_updateVNFipPoolDelete = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.updateVNFipPoolDelete);
  }
}
vnconfigapi_updateVNFipPoolUpdate = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.updateVNFipPoolUpdate);
  }
}
vnconfigapi_updateVNNetPolicies = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.updateVNNetPolicies);
  }
}
vnconfigapi_updateVNRouteTargets = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.updateVNRouteTargets);
  }
}
vnconfigapi_listVirtualMachineInterfaces = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.listVirtualMachineInterfaces);
  }
}
vnconfigapi_getSharedVirtualNetworks = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 300);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.getSharedVirtualNetworks);
  }
}
vnconfigapi_getExternalVirtualNetworks = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.getExternalVirtualNetworks);
  }
}
vnconfigapi_getAllVirtualNetworksWFields = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.getAllVirtualNetworksWFields);
  }
}
vnconfigapi_getAllVirtualNetworks = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.getAllVirtualNetworks);
  }
}
vnconfigapi_getVNListOrDetails = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.getVNListOrDetails);
  }
}
vnconfigapi_getVNDetails = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, vnconfigapi.getVNDetails);
  }
}
