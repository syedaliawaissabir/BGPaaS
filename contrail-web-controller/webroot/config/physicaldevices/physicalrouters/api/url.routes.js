/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/* This file is automatically generated from the parseURL.xml at
   Sun Nov 20 2016 01:02:58 GMT+0000 (UTC)
   Please do not edit this file.
 */

var parseURLReq = require(process.mainModule.exports["corePath"] + '/src/serverroot/common/parseURLRequire')
  , physicalroutersapi = require('./physicalroutersconfig.api')
  ;


if (!module.parent) {
  console.log("Call main app through 'node app'");
  process.exit(1);
}
urlRoutes = module.exports;

/* Default handler for request timeout */
function defHandleReqTimeout (req, res)
{
  var str = "Request timed out: URL::" + req.url;
  if (req.pubChannel) {
    /* Delete the Req Pending Q Entry */
    parseURLReq.cacheApi.deleteCachePendingQueueEntry(req.pubChannel);
  };
  res.req.invalidated = true;
  res.send(parseURLReq.global.HTTP_STATUS_GATEWAY_TIMEOUT, str);
}

urlRoutes.registerURLsToApp = function(app) {
/* Register the URL with callback */
  app.get('/api/tenants/config/physical-routers-list', physicalroutersapi_getPhysicalRoutersList);
  app.get('/api/tenants/config/physical-routers-with-intf-count', physicalroutersapi_getPhysicalRoutersWithIntfCount);
  app.get('/api/tenants/config/physical-routers', physicalroutersapi_getPhysicalRouters);
  app.post('/api/tenants/config/physical-routers', physicalroutersapi_createPhysicalRouters);
  app.get('/api/tenants/config/physical-router/:id', physicalroutersapi_getPhysicalRouter);
  app.put('/api/tenants/config/physical-router/:id', physicalroutersapi_updatePhysicalRouters);
  app.delete('/api/tenants/config/physical-router/:id', physicalroutersapi_deletePhysicalRouters);


  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/physical-routers-list', 'get', app.routes, 'physicalroutersconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/physical-routers-with-intf-count', 'get', app.routes, 'physicalroutersconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/physical-routers', 'get', app.routes, 'physicalroutersconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/physical-routers', 'post', app.routes, 'physicalroutersconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/physical-router/:id', 'get', app.routes, 'physicalroutersconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/physical-router/:id', 'put', app.routes, 'physicalroutersconfig');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/config/physical-router/:id', 'delete', app.routes, 'physicalroutersconfig');
}
physicalroutersapi_getPhysicalRoutersList = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, physicalroutersapi.getPhysicalRoutersList);
  }
}
physicalroutersapi_getPhysicalRoutersWithIntfCount = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, physicalroutersapi.getPhysicalRoutersWithIntfCount);
  }
}
physicalroutersapi_getPhysicalRouters = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, physicalroutersapi.getPhysicalRouters);
  }
}
physicalroutersapi_createPhysicalRouters = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, physicalroutersapi.createPhysicalRouters);
  }
}
physicalroutersapi_getPhysicalRouter = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, physicalroutersapi.getPhysicalRouter);
  }
}
physicalroutersapi_updatePhysicalRouters = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, physicalroutersapi.updatePhysicalRouters);
  }
}
physicalroutersapi_deletePhysicalRouters = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, physicalroutersapi.deletePhysicalRouters);
  }
}
