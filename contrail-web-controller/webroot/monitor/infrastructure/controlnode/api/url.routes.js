/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/* This file is automatically generated from the parseURL.xml at
   Sun Nov 20 2016 01:02:58 GMT+0000 (UTC)
   Please do not edit this file.
 */

var parseURLReq = require(process.mainModule.exports["corePath"] + '/src/serverroot/common/parseURLRequire')
  , infraControl = require('./controlnode.api')
  ;


if (!module.parent) {
  console.log("Call main app through 'node app'");
  process.exit(1);
}
urlRoutes = module.exports;

/* Default handler for request timeout */
function defHandleReqTimeout (req, res)
{
  var str = "Request timed out: URL::" + req.url;
  if (req.pubChannel) {
    /* Delete the Req Pending Q Entry */
    parseURLReq.cacheApi.deleteCachePendingQueueEntry(req.pubChannel);
  };
  res.req.invalidated = true;
  res.send(parseURLReq.global.HTTP_STATUS_GATEWAY_TIMEOUT, str);
}

urlRoutes.registerURLsToApp = function(app) {
/* Register the URL with callback */
  app.get('/api/admin/monitor/infrastructure/controlnodes', infraControl_getControlNodesTree);
  app.get('/api/admin/monitor/infrastructure/controlnodes/summary', infraControl_getControlNodesSummary);
  app.get('/api/admin/monitor/infrastructure/controlnodes/summaryInfo', infraControl_getControlNodesSummary);
  app.get('/api/admin/monitor/infrastructure/controlnode/details', infraControl_getControlNodeDetails);
  app.get('/api/admin/monitor/infrastructure/controlnode/bgppeer', infraControl_getControlNodePeerInfo);
  app.get('/api/admin/monitor/infrastructure/controlnode/paged-bgppeer', infraControl_getControlNodePeerPagedInfo);
  app.get('/api/admin/monitor/infrastructure/controlnode/peer-list', infraControl_getBgpPeerList);
  app.get('/api/admin/monitor/infrastructure/controlnode/bgppeer-details', infraControl_getControlNodePeerDetails);
  app.get('/api/admin/monitor/infrastructure/controlnode/routes/rout-inst-list', infraControl_getControlNodeRoutingInstanceList);
  app.get('/api/admin/monitor/infrastructure/controlnode/bgppeer/detail', infraControl_getControlNodesDetail);
  app.get('/api/admin/monitor/infrastructure/controlnode/routes', infraControl_getControlNodeRoutes);
  app.get('/api/admin/monitor/infrastructure/controlnode/sandesh', infraControl_getControlNodeSandeshRequest);


  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/controlnodes', 'get', app.routes, 'control-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/controlnodes/summary', 'get', app.routes, 'control-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/controlnodes/summaryInfo', 'get', app.routes, 'control-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/controlnode/details', 'get', app.routes, 'control-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/controlnode/bgppeer', 'get', app.routes, 'control-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/controlnode/paged-bgppeer', 'get', app.routes, 'control-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/controlnode/peer-list', 'get', app.routes, 'control-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/controlnode/bgppeer-details', 'get', app.routes, 'control-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/controlnode/routes/rout-inst-list', 'get', app.routes, 'control-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/controlnode/bgppeer/detail', 'get', app.routes, 'control-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/controlnode/routes', 'get', app.routes, 'control-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/controlnode/sandesh', 'get', app.routes, 'control-node');
}
infraControl_getControlNodesTree = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infraControl.getControlNodesTree);
  }
}
infraControl_getControlNodesSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infraControl.getControlNodesSummary);
  }
}
infraControl_getControlNodesSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infraControl.getControlNodesSummary);
  }
}
infraControl_getControlNodeDetails = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infraControl.getControlNodeDetails);
  }
}
infraControl_getControlNodePeerInfo = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infraControl.getControlNodePeerInfo);
  }
}
infraControl_getControlNodePeerPagedInfo = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infraControl.getControlNodePeerPagedInfo);
  }
}
infraControl_getBgpPeerList = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infraControl.getBgpPeerList);
  }
}
infraControl_getControlNodePeerDetails = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infraControl.getControlNodePeerDetails);
  }
}
infraControl_getControlNodeRoutingInstanceList = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infraControl.getControlNodeRoutingInstanceList);
  }
}
infraControl_getControlNodesDetail = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infraControl.getControlNodesDetail);
  }
}
infraControl_getControlNodeRoutes = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infraControl.getControlNodeRoutes);
  }
}
infraControl_getControlNodeSandeshRequest = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infraControl.getControlNodeSandeshRequest);
  }
}
