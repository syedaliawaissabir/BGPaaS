/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/* This file is automatically generated from the jobProcess.xml at
   Sun Nov 20 2016 01:02:58 GMT+0000 (UTC)
   Please do not edit this file.
 */

var jobsProcess = require('../../../../common/api/jobsProcess.api')
  , parseJobsReq = require(process.mainModule.exports["corePath"] + '/src/serverroot/common/parseJobsRequire')
  ;


if (!module.parent) {
  console.log("Call main app through 'node app'");
  process.exit(1);
}
var jobsCb = module.exports;


var defMaxActiveJobs = 10;
var maxActiveJobs = parseJobsReq.config.maxActiveJobs || defMaxActiveJobs;

jobsCb.jobsProcess = function() {
  parseJobsReq.jobsApi.jobs.process('getControlNodes', maxActiveJobs, function(job, done) {
  /* Publish the data on pubChannel And Save the data key as 
     saveChannelKey
   */
    var jobStartTime = parseJobsReq.commonUtils.getCurrentTimestamp();
    job.data['jobStartTime'] = jobStartTime;
    jobsProcess.processControlNodeRequestByJob(
        job.data.taskData.pubChannel,
        job.data.taskData.saveChannelKey,
        job.data, done);
  });

  parseJobsReq.jobsApi.jobs.process('getNodes', maxActiveJobs, function(job, done) {
  /* Publish the data on pubChannel And Save the data key as 
     saveChannelKey
   */
    var jobStartTime = parseJobsReq.commonUtils.getCurrentTimestamp();
    job.data['jobStartTime'] = jobStartTime;
    jobsProcess.processNodesRequestByJob(
        job.data.taskData.pubChannel,
        job.data.taskData.saveChannelKey,
        job.data, done);
  });

  parseJobsReq.jobsApi.jobs.process('getControlNodesSummary', maxActiveJobs, function(job, done) {
  /* Publish the data on pubChannel And Save the data key as 
     saveChannelKey
   */
    var jobStartTime = parseJobsReq.commonUtils.getCurrentTimestamp();
    job.data['jobStartTime'] = jobStartTime;
    jobsProcess.processControlNodesSummaryRequestByJob(
        job.data.taskData.pubChannel,
        job.data.taskData.saveChannelKey,
        job.data, done);
  });

  parseJobsReq.jobsApi.jobs.process('getNodesTree', maxActiveJobs, function(job, done) {
  /* Publish the data on pubChannel And Save the data key as 
     saveChannelKey
   */
    var jobStartTime = parseJobsReq.commonUtils.getCurrentTimestamp();
    job.data['jobStartTime'] = jobStartTime;
    jobsProcess.processControlNodesTreeRequestByJob(
        job.data.taskData.pubChannel,
        job.data.taskData.saveChannelKey,
        job.data, done);
  });

  parseJobsReq.jobsApi.jobs.process('getControlNodeBgpPeer', maxActiveJobs, function(job, done) {
  /* Publish the data on pubChannel And Save the data key as 
     saveChannelKey
   */
    var jobStartTime = parseJobsReq.commonUtils.getCurrentTimestamp();
    job.data['jobStartTime'] = jobStartTime;
    jobsProcess.processControlNodeBgpPeerRequestByJob(
        job.data.taskData.pubChannel,
        job.data.taskData.saveChannelKey,
        job.data, done);
  });

  parseJobsReq.jobsApi.jobs.process('getControlNodeAutoCompleteList', maxActiveJobs, function(job, done) {
  /* Publish the data on pubChannel And Save the data key as 
     saveChannelKey
   */
    var jobStartTime = parseJobsReq.commonUtils.getCurrentTimestamp();
    job.data['jobStartTime'] = jobStartTime;
    jobsProcess.processControlNodeAutoCompleteListRequestByJob(
        job.data.taskData.pubChannel,
        job.data.taskData.saveChannelKey,
        job.data, done);
  });
}

jobsCb.addjobListenerEvent = function() {
    parseJobsReq.jobsApi.jobListenerReadyQEvent.on('getControlNodesSummary@getNodesTree',
       function(dependData, pubChannel, saveChannelKey, done) {
       var storedData =parseJobsReq.jobsApi.getDataFromStoreQ(pubChannel);
       /* Now call the API to do the main work */
       jobsProcess.mainJobprocessControlNodesSummaryRequestByJob(
           pubChannel, saveChannelKey, dependData, storedData.data, storedData.jobData, done);
    });
    parseJobsReq.jobsApi.jobListenerReadyQEvent.on('getControlNodeBgpPeer@getNodesTree',
       function(dependData, pubChannel, saveChannelKey, done) {
       var storedData =parseJobsReq.jobsApi.getDataFromStoreQ(pubChannel);
       /* Now call the API to do the main work */
       jobsProcess.mainJobprocessControlNodeBgpPeerRequestByJob(
           pubChannel, saveChannelKey, dependData, storedData.data, storedData.jobData, done);
    });
}