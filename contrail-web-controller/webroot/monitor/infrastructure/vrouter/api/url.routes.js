/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/* This file is automatically generated from the parseURL.xml at
   Sun Nov 20 2016 01:02:58 GMT+0000 (UTC)
   Please do not edit this file.
 */

var parseURLReq = require(process.mainModule.exports["corePath"] + '/src/serverroot/common/parseURLRequire')
  , infravRouter = require('./vrouternode.api')
  ;


if (!module.parent) {
  console.log("Call main app through 'node app'");
  process.exit(1);
}
urlRoutes = module.exports;

/* Default handler for request timeout */
function defHandleReqTimeout (req, res)
{
  var str = "Request timed out: URL::" + req.url;
  if (req.pubChannel) {
    /* Delete the Req Pending Q Entry */
    parseURLReq.cacheApi.deleteCachePendingQueueEntry(req.pubChannel);
  };
  res.req.invalidated = true;
  res.send(parseURLReq.global.HTTP_STATUS_GATEWAY_TIMEOUT, str);
}

urlRoutes.registerURLsToApp = function(app) {
/* Register the URL with callback */
  app.get('/api/admin/monitor/infrastructure/vrouters', infravRouter_getComputeNodesTree);
  app.get('/api/admin/monitor/infrastructure/vrouters/summary', infravRouter_getvRoutersSummary);
  app.get('/api/admin/monitor/infrastructure/vrouters/cached-summary', infravRouter_getvRoutersSummaryByJob);
  app.get('/api/admin/monitor/infrastructure/vrouters/cached-generators', infravRouter_getvRouterGenerators);
  app.get('/api/admin/monitor/infrastructure/vrouters/summaryInfo', infravRouter_getComputeNodesSummary);
  app.get('/api/admin/monitor/infrastructure/vrouter/details', infravRouter_getvRouterDetails);
  app.get('/api/admin/monitor/infrastructure/vrouter/interface', infravRouter_getComputeNodeInterface);
  app.get('/api/admin/monitor/infrastructure/vrouter/vn', infravRouter_getComputeNodeVN);
  app.get('/api/admin/monitor/infrastructure/vrouter/acl', infravRouter_getComputeNodeAcl);
  app.get('/api/admin/monitor/infrastructure/vrouter/flows', infravRouter_getvRouterFlowsDetail);
  app.get('/api/admin/monitor/infrastructure/vrouter/vrf-list', infravRouter_getvRouterVrfList);
  app.get('/api/admin/monitor/infrastructure/vrouter/ucast-routes', infravRouter_getvRouterUCastRoutes);
  app.get('/api/admin/monitor/infrastructure/vrouter/mcast-routes', infravRouter_getvRouterMCastRoutes);
  app.get('/api/admin/monitor/infrastructure/vrouter/l2-routes', infravRouter_getvRouterL2Routes);
  app.get('/api/admin/monitor/infrastructure/vrouter/ucast6-routes', infravRouter_getvRouterUCast6Routes);
  app.get('/api/admin/monitor/infrastructure/vrouter/virtual-machine-ips', infravRouter_getVirtualMachineInterfacesPervRouter);
  app.get('/api/admin/virtual-routers/:type', infravRouter_getVirtualRouters);


  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouters', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouters/summary', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouters/cached-summary', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouters/cached-generators', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouters/summaryInfo', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouter/details', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouter/interface', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouter/vn', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouter/acl', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouter/flows', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouter/vrf-list', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouter/ucast-routes', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouter/mcast-routes', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouter/l2-routes', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouter/ucast6-routes', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/monitor/infrastructure/vrouter/virtual-machine-ips', 'get', app.routes, 'compute-node');
  parseURLReq.rbac.setFeatureByURL('/api/admin/virtual-routers/:type', 'get', app.routes, 'monitoring');
}
infravRouter_getComputeNodesTree = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getComputeNodesTree);
  }
}
infravRouter_getvRoutersSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getvRoutersSummary);
  }
}
infravRouter_getvRoutersSummaryByJob = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 300);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getvRoutersSummaryByJob);
  }
}
infravRouter_getvRouterGenerators = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 300);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getvRouterGenerators);
  }
}
infravRouter_getComputeNodesSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getComputeNodesSummary);
  }
}
infravRouter_getvRouterDetails = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getvRouterDetails);
  }
}
infravRouter_getComputeNodeInterface = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getComputeNodeInterface);
  }
}
infravRouter_getComputeNodeVN = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getComputeNodeVN);
  }
}
infravRouter_getComputeNodeAcl = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getComputeNodeAcl);
  }
}
infravRouter_getvRouterFlowsDetail = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getvRouterFlowsDetail);
  }
}
infravRouter_getvRouterVrfList = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getvRouterVrfList);
  }
}
infravRouter_getvRouterUCastRoutes = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getvRouterUCastRoutes);
  }
}
infravRouter_getvRouterMCastRoutes = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getvRouterMCastRoutes);
  }
}
infravRouter_getvRouterL2Routes = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getvRouterL2Routes);
  }
}
infravRouter_getvRouterUCast6Routes = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getvRouterUCast6Routes);
  }
}
infravRouter_getVirtualMachineInterfacesPervRouter = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getVirtualMachineInterfacesPervRouter);
  }
}
infravRouter_getVirtualRouters = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, infravRouter.getVirtualRouters);
  }
}
