/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/* This file is automatically generated from the jobProcess.xml at
   Sun Nov 20 2016 01:02:58 GMT+0000 (UTC)
   Please do not edit this file.
 */

var parseJobsReq = require(process.mainModule.exports["corePath"] + '/src/serverroot/common/parseJobsRequire')
  , jobsProcess = require('../../../../common/api/jobsProcess.api')
  ;


if (!module.parent) {
  console.log("Call main app through 'node app'");
  process.exit(1);
}
var jobsCb = module.exports;


var defMaxActiveJobs = 10;
var maxActiveJobs = parseJobsReq.config.maxActiveJobs || defMaxActiveJobs;

jobsCb.jobsProcess = function() {
  parseJobsReq.jobsApi.jobs.process('getComputeNodeInterface', maxActiveJobs, function(job, done) {
  /* Publish the data on pubChannel And Save the data key as 
     saveChannelKey
   */
    var jobStartTime = parseJobsReq.commonUtils.getCurrentTimestamp();
    job.data['jobStartTime'] = jobStartTime;
    jobsProcess.processComputeNodeInterfaceRequestByJob(
        job.data.taskData.pubChannel,
        job.data.taskData.saveChannelKey,
        job.data, done);
  });

  parseJobsReq.jobsApi.jobs.process('getComputeNodeAcl', maxActiveJobs, function(job, done) {
  /* Publish the data on pubChannel And Save the data key as 
     saveChannelKey
   */
    var jobStartTime = parseJobsReq.commonUtils.getCurrentTimestamp();
    job.data['jobStartTime'] = jobStartTime;
    jobsProcess.processComputeNodeAclRequestByJob(
        job.data.taskData.pubChannel,
        job.data.taskData.saveChannelKey,
        job.data, done);
  });

  parseJobsReq.jobsApi.jobs.process('getVRoutersList', maxActiveJobs, function(job, done) {
  /* Publish the data on pubChannel And Save the data key as 
     saveChannelKey
   */
    var jobStartTime = parseJobsReq.commonUtils.getCurrentTimestamp();
    job.data['jobStartTime'] = jobStartTime;
    jobsProcess.processvRouterListRequestByJob(
        job.data.taskData.pubChannel,
        job.data.taskData.saveChannelKey,
        job.data, done);
  });

  parseJobsReq.jobsApi.jobs.process('getVRoutersSummary', maxActiveJobs, function(job, done) {
  /* Publish the data on pubChannel And Save the data key as 
     saveChannelKey
   */
    var jobStartTime = parseJobsReq.commonUtils.getCurrentTimestamp();
    job.data['jobStartTime'] = jobStartTime;
    jobsProcess.processvRoutersSummaryRequestByJob(
        job.data.taskData.pubChannel,
        job.data.taskData.saveChannelKey,
        job.data, done);
  });

  parseJobsReq.jobsApi.jobs.process('getVRoutersGenerators', maxActiveJobs, function(job, done) {
  /* Publish the data on pubChannel And Save the data key as 
     saveChannelKey
   */
    var jobStartTime = parseJobsReq.commonUtils.getCurrentTimestamp();
    job.data['jobStartTime'] = jobStartTime;
    jobsProcess.processvRoutersGenRequestByJob(
        job.data.taskData.pubChannel,
        job.data.taskData.saveChannelKey,
        job.data, done);
  });

  parseJobsReq.jobsApi.jobs.process('getComputeNodeAclFlows', maxActiveJobs, function(job, done) {
  /* Publish the data on pubChannel And Save the data key as 
     saveChannelKey
   */
    var jobStartTime = parseJobsReq.commonUtils.getCurrentTimestamp();
    job.data['jobStartTime'] = jobStartTime;
    jobsProcess.processcRouterAclFlowsRequestByJob(
        job.data.taskData.pubChannel,
        job.data.taskData.saveChannelKey,
        job.data, done);
  });
}

jobsCb.addjobListenerEvent = function() {
    parseJobsReq.jobsApi.jobListenerReadyQEvent.on('getComputeNodeInterface@getNodesTree',
       function(dependData, pubChannel, saveChannelKey, done) {
       var storedData =parseJobsReq.jobsApi.getDataFromStoreQ(pubChannel);
       /* Now call the API to do the main work */
       jobsProcess.mainJobprocessComputeNodeInterfaceRequestByJob(
           pubChannel, saveChannelKey, dependData, storedData.data, storedData.jobData, done);
    });
    parseJobsReq.jobsApi.jobListenerReadyQEvent.on('getComputeNodeAcl@getNodesTree',
       function(dependData, pubChannel, saveChannelKey, done) {
       var storedData =parseJobsReq.jobsApi.getDataFromStoreQ(pubChannel);
       /* Now call the API to do the main work */
       jobsProcess.mainJobprocessComputeNodeAclRequestByJob(
           pubChannel, saveChannelKey, dependData, storedData.data, storedData.jobData, done);
    });
}