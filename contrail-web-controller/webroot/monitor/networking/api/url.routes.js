/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/* This file is automatically generated from the parseURL.xml at
   Sun Nov 20 2016 01:02:58 GMT+0000 (UTC)
   Please do not edit this file.
 */

var parseURLReq = require(process.mainModule.exports["corePath"] + '/src/serverroot/common/parseURLRequire')
  , netGraphApi = require('./networking.graph.api.js')
  , nwMonApi = require('./network.mon.api')
  ;


if (!module.parent) {
  console.log("Call main app through 'node app'");
  process.exit(1);
}
urlRoutes = module.exports;

/* Default handler for request timeout */
function defHandleReqTimeout (req, res)
{
  var str = "Request timed out: URL::" + req.url;
  if (req.pubChannel) {
    /* Delete the Req Pending Q Entry */
    parseURLReq.cacheApi.deleteCachePendingQueueEntry(req.pubChannel);
  };
  res.req.invalidated = true;
  res.send(parseURLReq.global.HTTP_STATUS_GATEWAY_TIMEOUT, str);
}

urlRoutes.registerURLsToApp = function(app) {
/* Register the URL with callback */
  app.get('/api/tenant/monitoring/project-connected-graph', netGraphApi_getProjectConnectedGraph);
  app.get('/api/tenant/monitoring/project-config-graph', netGraphApi_getProjectConfigGraph);
  app.get('/api/tenant/monitoring/network-connected-graph', netGraphApi_getNetworkConnectedGraph);
  app.get('/api/tenant/monitoring/network-config-graph', netGraphApi_getNetworkConfigGraph);
  app.get('/api/tenant/monitoring/instance-connected-graph', netGraphApi_getInstanceConnectedGraph);
  app.get('/api/tenant/monitoring/instance-config-graph', netGraphApi_getInstanceConfigGraph);
  app.get('/api/tenants/projects/:domain', nwMonApi_getProjects);
  app.get('/api/tenants/networks/:fqname', nwMonApi_getVNetworks);
  app.get('/api/tenant/networking/domain/summary', nwMonApi_getNetworkDomainSummary);
  app.get('/api/tenant/networking/network/details', nwMonApi_getNetworkDetails);
  app.get('/api/tenant/networking/project/summary', nwMonApi_getProjectSummary);
  app.get('/api/tenant/networking/flow-series/vn', nwMonApi_getFlowSeriesByVN);
  app.get('/api/tenant/networking/network/stats/top', nwMonApi_getNetworkStats);
  app.get('/api/tenant/networking/vn/summary', nwMonApi_getVNStatsSummary);
  app.get('/api/tenant/networking/virtual-network/summary', nwMonApi_getVirtualNetworksSummary);
  app.get('/api/tenant/networking/virtual-machine', nwMonApi_getVirtualMachine);
  app.post('/api/tenant/networking/virtual-machines/summary', nwMonApi_getVirtualMachinesSummary);
  app.post('/api/tenant/networking/virtual-machine-interfaces/summary', nwMonApi_getVirtualInterfacesSummary);
  app.get('/api/tenant/networking/flow-series/vm', nwMonApi_getFlowSeriesByVM);
  app.get('/api/tenant/networking/vm/stats/summary', nwMonApi_getVMStatsSummary);
  app.get('/api/tenant/networking/network/connected/stats/summary', nwMonApi_getNetworkStatsSummary);
  app.post('/api/tenant/networking/virtual-networks/details', nwMonApi_getVirtualNetworksDetails);
  app.post('/api/tenant/networking/virtual-networks/list', nwMonApi_getVirtualNetworksList);
  app.post('/api/tenant/networking/virtual-machines/details', nwMonApi_getInstanceDetails);
  app.post('/api/tenant/networking/stats', nwMonApi_getStats);
  app.post('/api/tenant/networking/vrouter-virtual-machines/details', nwMonApi_getInstanceDetailsForVRouter);


  parseURLReq.rbac.setFeatureByURL('/api/tenant/monitoring/project-connected-graph', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/monitoring/project-config-graph', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/monitoring/network-connected-graph', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/monitoring/network-config-graph', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/monitoring/instance-connected-graph', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/monitoring/instance-config-graph', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/projects/:domain', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenants/networks/:fqname', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/domain/summary', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/network/details', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/project/summary', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/flow-series/vn', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/network/stats/top', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/vn/summary', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/virtual-network/summary', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/virtual-machine', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/virtual-machines/summary', 'post', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/virtual-machine-interfaces/summary', 'post', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/flow-series/vm', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/vm/stats/summary', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/network/connected/stats/summary', 'get', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/virtual-networks/details', 'post', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/virtual-networks/list', 'post', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/virtual-machines/details', 'post', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/stats', 'post', app.routes, 'monitoring');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/networking/vrouter-virtual-machines/details', 'post', app.routes, 'monitoring');
}
netGraphApi_getProjectConnectedGraph = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, netGraphApi.getProjectConnectedGraph);
  }
}
netGraphApi_getProjectConfigGraph = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, netGraphApi.getProjectConfigGraph);
  }
}
netGraphApi_getNetworkConnectedGraph = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, netGraphApi.getNetworkConnectedGraph);
  }
}
netGraphApi_getNetworkConfigGraph = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, netGraphApi.getNetworkConfigGraph);
  }
}
netGraphApi_getInstanceConnectedGraph = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, netGraphApi.getInstanceConnectedGraph);
  }
}
netGraphApi_getInstanceConfigGraph = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, netGraphApi.getInstanceConfigGraph);
  }
}
nwMonApi_getProjects = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getProjects);
  }
}
nwMonApi_getVNetworks = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getVNetworks);
  }
}
nwMonApi_getNetworkDomainSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getNetworkDomainSummary);
  }
}
nwMonApi_getNetworkDetails = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getNetworkDetails);
  }
}
nwMonApi_getProjectSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getProjectSummary);
  }
}
nwMonApi_getFlowSeriesByVN = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 300);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getFlowSeriesByVN);
  }
}
nwMonApi_getNetworkStats = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 300);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getNetworkStats);
  }
}
nwMonApi_getVNStatsSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getVNStatsSummary);
  }
}
nwMonApi_getVirtualNetworksSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getVirtualNetworksSummary);
  }
}
nwMonApi_getVirtualMachine = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getVirtualMachine);
  }
}
nwMonApi_getVirtualMachinesSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getVirtualMachinesSummary);
  }
}
nwMonApi_getVirtualInterfacesSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getVirtualInterfacesSummary);
  }
}
nwMonApi_getFlowSeriesByVM = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 300);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getFlowSeriesByVM);
  }
}
nwMonApi_getVMStatsSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 300);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getVMStatsSummary);
  }
}
nwMonApi_getNetworkStatsSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, 300);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getNetworkStatsSummary);
  }
}
nwMonApi_getVirtualNetworksDetails = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getVirtualNetworksDetails);
  }
}
nwMonApi_getVirtualNetworksList = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getVirtualNetworksList);
  }
}
nwMonApi_getInstanceDetails = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getInstanceDetails);
  }
}
nwMonApi_getStats = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getStats);
  }
}
nwMonApi_getInstanceDetailsForVRouter = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, nwMonApi.getInstanceDetailsForVRouter);
  }
}
