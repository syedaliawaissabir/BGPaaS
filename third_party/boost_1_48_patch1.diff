diff --git a/third_party/boost_1_48_0/boost/any.hpp b/third_party/boost_1_48_0/boost/any.hpp
index a8c654c..ddb1f6b 100644
--- a/third_party/boost_1_48_0/boost/any.hpp
+++ b/third_party/boost_1_48_0/boost/any.hpp
@@ -207,8 +207,12 @@ namespace boost
 #endif
 
         nonref * result = any_cast<nonref>(&operand);
+#ifndef BOOST_NO_EXCEPTIONS
         if(!result)
             boost::throw_exception(bad_any_cast());
+#else
+        assert(result);
+#endif
         return *result;
     }
 
diff --git a/third_party/boost_1_48_0/boost/array.hpp b/third_party/boost_1_48_0/boost/array.hpp
index ffb504b..aca99fd 100644
--- a/third_party/boost_1_48_0/boost/array.hpp
+++ b/third_party/boost_1_48_0/boost/array.hpp
@@ -188,10 +188,14 @@ namespace boost {
 
         // check range (may be private because it is static)
         static void rangecheck (size_type i) {
+#ifndef BOOST_NO_EXCEPTIONS
             if (i >= size()) {
                 std::out_of_range e("array<>: index out of range");
                 boost::throw_exception(e);
             }
+#else //BOOST_NO_EXCEPTIONS
+            assert(i < size());
+#endif //BOOST_NO_EXCEPTIONS
         }
 
     };
diff --git a/third_party/boost_1_48_0/boost/asio/basic_datagram_socket.hpp b/third_party/boost_1_48_0/boost/asio/basic_datagram_socket.hpp
index bdbcec1..a55fdf9 100644
--- a/third_party/boost_1_48_0/boost/asio/basic_datagram_socket.hpp
+++ b/third_party/boost_1_48_0/boost/asio/basic_datagram_socket.hpp
@@ -82,11 +82,13 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_datagram_socket(boost::asio::io_service& io_service,
       const protocol_type& protocol)
     : basic_socket<Protocol, DatagramSocketService>(io_service, protocol)
   {
   }
+#endif
 
   /// Construct a basic_datagram_socket, opening it and binding it to the given
   /// local endpoint.
@@ -104,11 +106,13 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_datagram_socket(boost::asio::io_service& io_service,
       const endpoint_type& endpoint)
     : basic_socket<Protocol, DatagramSocketService>(io_service, endpoint)
   {
   }
+#endif
 
   /// Construct a basic_datagram_socket on an existing native socket.
   /**
@@ -125,12 +129,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_datagram_socket(boost::asio::io_service& io_service,
       const protocol_type& protocol, const native_handle_type& native_socket)
     : basic_socket<Protocol, DatagramSocketService>(
         io_service, protocol, native_socket)
   {
   }
+#endif
 
 #if defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)
   /// Move-construct a basic_datagram_socket from another.
@@ -190,6 +196,7 @@ public:
    * buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t send(const ConstBufferSequence& buffers)
   {
@@ -199,6 +206,7 @@ public:
     boost::asio::detail::throw_error(ec, "send");
     return s;
   }
+#endif
 
   /// Send some data on a connected socket.
   /**
@@ -217,6 +225,7 @@ public:
    * @note The send operation can only be used with a connected socket. Use
    * the send_to function to send data on an unconnected datagram socket.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t send(const ConstBufferSequence& buffers,
       socket_base::message_flags flags)
@@ -227,6 +236,7 @@ public:
     boost::asio::detail::throw_error(ec, "send");
     return s;
   }
+#endif
 
   /// Send some data on a connected socket.
   /**
@@ -368,6 +378,7 @@ public:
    * buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t send_to(const ConstBufferSequence& buffers,
       const endpoint_type& destination)
@@ -378,6 +389,7 @@ public:
     boost::asio::detail::throw_error(ec, "send_to");
     return s;
   }
+#endif
 
   /// Send a datagram to the specified endpoint.
   /**
@@ -395,6 +407,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t send_to(const ConstBufferSequence& buffers,
       const endpoint_type& destination, socket_base::message_flags flags)
@@ -405,6 +418,7 @@ public:
     boost::asio::detail::throw_error(ec, "send_to");
     return s;
   }
+#endif
 
   /// Send a datagram to the specified endpoint.
   /**
@@ -545,6 +559,7 @@ public:
    * multiple buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t receive(const MutableBufferSequence& buffers)
   {
@@ -554,6 +569,7 @@ public:
     boost::asio::detail::throw_error(ec, "receive");
     return s;
   }
+#endif
 
   /// Receive some data on a connected socket.
   /**
@@ -573,6 +589,7 @@ public:
    * the receive_from function to receive data on an unconnected datagram
    * socket.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t receive(const MutableBufferSequence& buffers,
       socket_base::message_flags flags)
@@ -583,6 +600,7 @@ public:
     boost::asio::detail::throw_error(ec, "receive");
     return s;
   }
+#endif
 
   /// Receive some data on a connected socket.
   /**
@@ -725,6 +743,7 @@ public:
    * multiple buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t receive_from(const MutableBufferSequence& buffers,
       endpoint_type& sender_endpoint)
@@ -735,6 +754,7 @@ public:
     boost::asio::detail::throw_error(ec, "receive_from");
     return s;
   }
+#endif
   
   /// Receive a datagram with the endpoint of the sender.
   /**
@@ -752,6 +772,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t receive_from(const MutableBufferSequence& buffers,
       endpoint_type& sender_endpoint, socket_base::message_flags flags)
@@ -762,6 +783,7 @@ public:
     boost::asio::detail::throw_error(ec, "receive_from");
     return s;
   }
+#endif
   
   /// Receive a datagram with the endpoint of the sender.
   /**
diff --git a/third_party/boost_1_48_0/boost/asio/basic_deadline_timer.hpp b/third_party/boost_1_48_0/boost/asio/basic_deadline_timer.hpp
index c90cbee..dd7cb84 100644
--- a/third_party/boost_1_48_0/boost/asio/basic_deadline_timer.hpp
+++ b/third_party/boost_1_48_0/boost/asio/basic_deadline_timer.hpp
@@ -156,6 +156,7 @@ public:
    * @param expiry_time The expiry time to be used for the timer, expressed
    * as an absolute time.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_deadline_timer(boost::asio::io_service& io_service,
       const time_type& expiry_time)
     : basic_io_object<TimerService>(io_service)
@@ -164,6 +165,7 @@ public:
     this->service.expires_at(this->implementation, expiry_time, ec);
     boost::asio::detail::throw_error(ec, "expires_at");
   }
+#endif
 
   /// Constructor to set a particular expiry time relative to now.
   /**
@@ -175,6 +177,7 @@ public:
    * @param expiry_time The expiry time to be used for the timer, relative to
    * now.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_deadline_timer(boost::asio::io_service& io_service,
       const duration_type& expiry_time)
     : basic_io_object<TimerService>(io_service)
@@ -183,6 +186,7 @@ public:
     this->service.expires_from_now(this->implementation, expiry_time, ec);
     boost::asio::detail::throw_error(ec, "expires_from_now");
   }
+#endif
 
   /// Cancel any asynchronous operations that are waiting on the timer.
   /**
@@ -206,6 +210,7 @@ public:
    * These handlers can no longer be cancelled, and therefore are passed an
    * error code that indicates the successful completion of the wait operation.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   std::size_t cancel()
   {
     boost::system::error_code ec;
@@ -213,6 +218,7 @@ public:
     boost::asio::detail::throw_error(ec, "cancel");
     return s;
   }
+#endif
 
   /// Cancel any asynchronous operations that are waiting on the timer.
   /**
@@ -265,6 +271,7 @@ public:
    * These handlers can no longer be cancelled, and therefore are passed an
    * error code that indicates the successful completion of the wait operation.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   std::size_t cancel_one()
   {
     boost::system::error_code ec;
@@ -272,6 +279,7 @@ public:
     boost::asio::detail::throw_error(ec, "cancel_one");
     return s;
   }
+#endif
 
   /// Cancels one asynchronous operation that is waiting on the timer.
   /**
@@ -334,6 +342,7 @@ public:
    * These handlers can no longer be cancelled, and therefore are passed an
    * error code that indicates the successful completion of the wait operation.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   std::size_t expires_at(const time_type& expiry_time)
   {
     boost::system::error_code ec;
@@ -342,6 +351,7 @@ public:
     boost::asio::detail::throw_error(ec, "expires_at");
     return s;
   }
+#endif
 
   /// Set the timer's expiry time as an absolute time.
   /**
@@ -403,6 +413,7 @@ public:
    * These handlers can no longer be cancelled, and therefore are passed an
    * error code that indicates the successful completion of the wait operation.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   std::size_t expires_from_now(const duration_type& expiry_time)
   {
     boost::system::error_code ec;
@@ -411,6 +422,7 @@ public:
     boost::asio::detail::throw_error(ec, "expires_from_now");
     return s;
   }
+#endif
 
   /// Set the timer's expiry time relative to now.
   /**
@@ -448,12 +460,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void wait()
   {
     boost::system::error_code ec;
     this->service.wait(this->implementation, ec);
     boost::asio::detail::throw_error(ec, "wait");
   }
+#endif
 
   /// Perform a blocking wait on the timer.
   /**
diff --git a/third_party/boost_1_48_0/boost/asio/basic_raw_socket.hpp b/third_party/boost_1_48_0/boost/asio/basic_raw_socket.hpp
index b29dd62..8b46249 100644
--- a/third_party/boost_1_48_0/boost/asio/basic_raw_socket.hpp
+++ b/third_party/boost_1_48_0/boost/asio/basic_raw_socket.hpp
@@ -82,11 +82,13 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_raw_socket(boost::asio::io_service& io_service,
       const protocol_type& protocol)
     : basic_socket<Protocol, RawSocketService>(io_service, protocol)
   {
   }
+#endif
 
   /// Construct a basic_raw_socket, opening it and binding it to the given
   /// local endpoint.
@@ -104,11 +106,13 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_raw_socket(boost::asio::io_service& io_service,
       const endpoint_type& endpoint)
     : basic_socket<Protocol, RawSocketService>(io_service, endpoint)
   {
   }
+#endif
 
   /// Construct a basic_raw_socket on an existing native socket.
   /**
@@ -125,12 +129,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_raw_socket(boost::asio::io_service& io_service,
       const protocol_type& protocol, const native_handle_type& native_socket)
     : basic_socket<Protocol, RawSocketService>(
         io_service, protocol, native_socket)
   {
   }
+#endif
 
 #if defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)
   /// Move-construct a basic_raw_socket from another.
@@ -188,6 +194,7 @@ public:
    * buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t send(const ConstBufferSequence& buffers)
   {
@@ -197,6 +204,7 @@ public:
     boost::asio::detail::throw_error(ec, "send");
     return s;
   }
+#endif
 
   /// Send some data on a connected socket.
   /**
@@ -214,6 +222,7 @@ public:
    * @note The send operation can only be used with a connected socket. Use
    * the send_to function to send data on an unconnected raw socket.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t send(const ConstBufferSequence& buffers,
       socket_base::message_flags flags)
@@ -224,6 +233,7 @@ public:
     boost::asio::detail::throw_error(ec, "send");
     return s;
   }
+#endif
 
   /// Send some data on a connected socket.
   /**
@@ -362,6 +372,7 @@ public:
    * buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t send_to(const ConstBufferSequence& buffers,
       const endpoint_type& destination)
@@ -372,6 +383,7 @@ public:
     boost::asio::detail::throw_error(ec, "send_to");
     return s;
   }
+#endif
 
   /// Send raw data to the specified endpoint.
   /**
@@ -389,6 +401,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t send_to(const ConstBufferSequence& buffers,
       const endpoint_type& destination, socket_base::message_flags flags)
@@ -399,6 +412,7 @@ public:
     boost::asio::detail::throw_error(ec, "send_to");
     return s;
   }
+#endif
 
   /// Send raw data to the specified endpoint.
   /**
@@ -539,6 +553,7 @@ public:
    * multiple buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t receive(const MutableBufferSequence& buffers)
   {
@@ -548,6 +563,7 @@ public:
     boost::asio::detail::throw_error(ec, "receive");
     return s;
   }
+#endif
 
   /// Receive some data on a connected socket.
   /**
@@ -567,6 +583,7 @@ public:
    * the receive_from function to receive data on an unconnected raw
    * socket.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t receive(const MutableBufferSequence& buffers,
       socket_base::message_flags flags)
@@ -577,6 +594,7 @@ public:
     boost::asio::detail::throw_error(ec, "receive");
     return s;
   }
+#endif
 
   /// Receive some data on a connected socket.
   /**
@@ -719,6 +737,7 @@ public:
    * multiple buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t receive_from(const MutableBufferSequence& buffers,
       endpoint_type& sender_endpoint)
@@ -729,6 +748,7 @@ public:
     boost::asio::detail::throw_error(ec, "receive_from");
     return s;
   }
+#endif
   
   /// Receive raw data with the endpoint of the sender.
   /**
@@ -746,6 +766,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t receive_from(const MutableBufferSequence& buffers,
       endpoint_type& sender_endpoint, socket_base::message_flags flags)
@@ -756,6 +777,7 @@ public:
     boost::asio::detail::throw_error(ec, "receive_from");
     return s;
   }
+#endif
   
   /// Receive raw data with the endpoint of the sender.
   /**
diff --git a/third_party/boost_1_48_0/boost/asio/basic_seq_packet_socket.hpp b/third_party/boost_1_48_0/boost/asio/basic_seq_packet_socket.hpp
index 17e15e7..e6e305a 100644
--- a/third_party/boost_1_48_0/boost/asio/basic_seq_packet_socket.hpp
+++ b/third_party/boost_1_48_0/boost/asio/basic_seq_packet_socket.hpp
@@ -86,11 +86,13 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_seq_packet_socket(boost::asio::io_service& io_service,
       const protocol_type& protocol)
     : basic_socket<Protocol, SeqPacketSocketService>(io_service, protocol)
   {
   }
+#endif
 
   /// Construct a basic_seq_packet_socket, opening it and binding it to the
   /// given local endpoint.
@@ -108,11 +110,13 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_seq_packet_socket(boost::asio::io_service& io_service,
       const endpoint_type& endpoint)
     : basic_socket<Protocol, SeqPacketSocketService>(io_service, endpoint)
   {
   }
+#endif
 
   /// Construct a basic_seq_packet_socket on an existing native socket.
   /**
@@ -129,12 +133,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_seq_packet_socket(boost::asio::io_service& io_service,
       const protocol_type& protocol, const native_handle_type& native_socket)
     : basic_socket<Protocol, SeqPacketSocketService>(
         io_service, protocol, native_socket)
   {
   }
+#endif
 
 #if defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)
   /// Move-construct a basic_seq_packet_socket from another.
@@ -196,6 +202,7 @@ public:
    * buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t send(const ConstBufferSequence& buffers,
       socket_base::message_flags flags)
@@ -206,6 +213,7 @@ public:
     boost::asio::detail::throw_error(ec, "send");
     return s;
   }
+#endif
 
   /// Send some data on the socket.
   /**
@@ -308,6 +316,7 @@ public:
    * multiple buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t receive(const MutableBufferSequence& buffers,
       socket_base::message_flags& out_flags)
@@ -318,6 +327,7 @@ public:
     boost::asio::detail::throw_error(ec, "receive");
     return s;
   }
+#endif
 
   /// Receive some data on the socket.
   /**
@@ -354,6 +364,7 @@ public:
    * multiple buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t receive(const MutableBufferSequence& buffers,
       socket_base::message_flags in_flags,
@@ -365,6 +376,7 @@ public:
     boost::asio::detail::throw_error(ec, "receive");
     return s;
   }
+#endif
 
   /// Receive some data on a connected socket.
   /**
diff --git a/third_party/boost_1_48_0/boost/asio/basic_serial_port.hpp b/third_party/boost_1_48_0/boost/asio/basic_serial_port.hpp
index a94b0e5..62e24bb 100644
--- a/third_party/boost_1_48_0/boost/asio/basic_serial_port.hpp
+++ b/third_party/boost_1_48_0/boost/asio/basic_serial_port.hpp
@@ -82,6 +82,7 @@ public:
    * @param device The platform-specific device name for this serial
    * port.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   explicit basic_serial_port(boost::asio::io_service& io_service,
       const char* device)
     : basic_io_object<SerialPortService>(io_service)
@@ -90,6 +91,7 @@ public:
     this->get_service().open(this->get_implementation(), device, ec);
     boost::asio::detail::throw_error(ec, "open");
   }
+#endif
 
   /// Construct and open a basic_serial_port.
   /**
@@ -102,6 +104,7 @@ public:
    * @param device The platform-specific device name for this serial
    * port.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   explicit basic_serial_port(boost::asio::io_service& io_service,
       const std::string& device)
     : basic_io_object<SerialPortService>(io_service)
@@ -110,6 +113,7 @@ public:
     this->get_service().open(this->get_implementation(), device, ec);
     boost::asio::detail::throw_error(ec, "open");
   }
+#endif
 
   /// Construct a basic_serial_port on an existing native serial port.
   /**
@@ -123,6 +127,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_serial_port(boost::asio::io_service& io_service,
       const native_handle_type& native_serial_port)
     : basic_io_object<SerialPortService>(io_service)
@@ -132,6 +137,7 @@ public:
         native_serial_port, ec);
     boost::asio::detail::throw_error(ec, "assign");
   }
+#endif
 
 #if defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)
   /// Move-construct a basic_serial_port from another.
@@ -204,12 +210,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void open(const std::string& device)
   {
     boost::system::error_code ec;
     this->get_service().open(this->get_implementation(), device, ec);
     boost::asio::detail::throw_error(ec, "open");
   }
+#endif
 
   /// Open the serial port using the specified device name.
   /**
@@ -234,6 +242,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void assign(const native_handle_type& native_serial_port)
   {
     boost::system::error_code ec;
@@ -241,6 +250,7 @@ public:
         native_serial_port, ec);
     boost::asio::detail::throw_error(ec, "assign");
   }
+#endif
 
   /// Assign an existing native serial port to the serial port.
   /*
@@ -271,12 +281,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void close()
   {
     boost::system::error_code ec;
     this->get_service().close(this->get_implementation(), ec);
     boost::asio::detail::throw_error(ec, "close");
   }
+#endif
 
   /// Close the serial port.
   /**
@@ -322,12 +334,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void cancel()
   {
     boost::system::error_code ec;
     this->get_service().cancel(this->get_implementation(), ec);
     boost::asio::detail::throw_error(ec, "cancel");
   }
+#endif
 
   /// Cancel all asynchronous operations associated with the serial port.
   /**
@@ -349,12 +363,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void send_break()
   {
     boost::system::error_code ec;
     this->get_service().send_break(this->get_implementation(), ec);
     boost::asio::detail::throw_error(ec, "send_break");
   }
+#endif
 
   /// Send a break sequence to the serial port.
   /**
@@ -383,6 +399,7 @@ public:
    * boost::asio::serial_port_base::stop_bits @n
    * boost::asio::serial_port_base::character_size
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename SettableSerialPortOption>
   void set_option(const SettableSerialPortOption& option)
   {
@@ -390,6 +407,7 @@ public:
     this->get_service().set_option(this->get_implementation(), option, ec);
     boost::asio::detail::throw_error(ec, "set_option");
   }
+#endif
 
   /// Set an option on the serial port.
   /**
@@ -430,6 +448,7 @@ public:
    * boost::asio::serial_port_base::stop_bits @n
    * boost::asio::serial_port_base::character_size
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename GettableSerialPortOption>
   void get_option(GettableSerialPortOption& option)
   {
@@ -437,6 +456,7 @@ public:
     this->get_service().get_option(this->get_implementation(), option, ec);
     boost::asio::detail::throw_error(ec, "get_option");
   }
+#endif
 
   /// Get an option from the serial port.
   /**
@@ -489,6 +509,7 @@ public:
    * buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t write_some(const ConstBufferSequence& buffers)
   {
@@ -498,6 +519,7 @@ public:
     boost::asio::detail::throw_error(ec, "write_some");
     return s;
   }
+#endif
 
   /// Write some data to the serial port.
   /**
@@ -598,6 +620,7 @@ public:
    * buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t read_some(const MutableBufferSequence& buffers)
   {
@@ -607,6 +630,7 @@ public:
     boost::asio::detail::throw_error(ec, "read_some");
     return s;
   }
+#endif
 
   /// Read some data from the serial port.
   /**
diff --git a/third_party/boost_1_48_0/boost/asio/basic_signal_set.hpp b/third_party/boost_1_48_0/boost/asio/basic_signal_set.hpp
index 2f84a14..3e8a225 100644
--- a/third_party/boost_1_48_0/boost/asio/basic_signal_set.hpp
+++ b/third_party/boost_1_48_0/boost/asio/basic_signal_set.hpp
@@ -120,6 +120,7 @@ public:
    * @code boost::asio::signal_set signals(io_service);
    * signals.add(signal_number_1); @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_signal_set(boost::asio::io_service& io_service, int signal_number_1)
     : basic_io_object<SignalSetService>(io_service)
   {
@@ -127,6 +128,7 @@ public:
     this->service.add(this->implementation, signal_number_1, ec);
     boost::asio::detail::throw_error(ec, "add");
   }
+#endif
 
   /// Construct a signal set and add two signals.
   /**
@@ -144,6 +146,7 @@ public:
    * signals.add(signal_number_1);
    * signals.add(signal_number_2); @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_signal_set(boost::asio::io_service& io_service, int signal_number_1,
       int signal_number_2)
     : basic_io_object<SignalSetService>(io_service)
@@ -154,6 +157,7 @@ public:
     this->service.add(this->implementation, signal_number_2, ec);
     boost::asio::detail::throw_error(ec, "add");
   }
+#endif
 
   /// Construct a signal set and add three signals.
   /**
@@ -174,6 +178,7 @@ public:
    * signals.add(signal_number_2);
    * signals.add(signal_number_3); @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_signal_set(boost::asio::io_service& io_service, int signal_number_1,
       int signal_number_2, int signal_number_3)
     : basic_io_object<SignalSetService>(io_service)
@@ -186,6 +191,7 @@ public:
     this->service.add(this->implementation, signal_number_3, ec);
     boost::asio::detail::throw_error(ec, "add");
   }
+#endif
 
   /// Add a signal to a signal_set.
   /**
@@ -196,12 +202,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void add(int signal_number)
   {
     boost::system::error_code ec;
     this->service.add(this->implementation, signal_number, ec);
     boost::asio::detail::throw_error(ec, "add");
   }
+#endif
 
   /// Add a signal to a signal_set.
   /**
@@ -230,12 +238,14 @@ public:
    * @note Removes any notifications that have been queued for the specified
    * signal number.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void remove(int signal_number)
   {
     boost::system::error_code ec;
     this->service.remove(this->implementation, signal_number, ec);
     boost::asio::detail::throw_error(ec, "remove");
   }
+#endif
 
   /// Remove a signal from a signal_set.
   /**
@@ -264,12 +274,14 @@ public:
    *
    * @note Removes all queued notifications.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void clear()
   {
     boost::system::error_code ec;
     this->service.clear(this->implementation, ec);
     boost::asio::detail::throw_error(ec, "clear");
   }
+#endif
 
   /// Remove all signals from a signal_set.
   /**
@@ -306,12 +318,14 @@ public:
    * These handlers can no longer be cancelled, and therefore are passed an
    * error code that indicates the successful completion of the wait operation.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void cancel()
   {
     boost::system::error_code ec;
     this->service.cancel(this->implementation, ec);
     boost::asio::detail::throw_error(ec, "cancel");
   }
+#endif
 
   /// Cancel all operations associated with the signal set.
   /**
diff --git a/third_party/boost_1_48_0/boost/asio/basic_socket.hpp b/third_party/boost_1_48_0/boost/asio/basic_socket.hpp
index 28c5be1..904fe68 100644
--- a/third_party/boost_1_48_0/boost/asio/basic_socket.hpp
+++ b/third_party/boost_1_48_0/boost/asio/basic_socket.hpp
@@ -81,6 +81,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_socket(boost::asio::io_service& io_service,
       const protocol_type& protocol)
     : basic_io_object<SocketService>(io_service)
@@ -89,7 +90,7 @@ public:
     this->get_service().open(this->get_implementation(), protocol, ec);
     boost::asio::detail::throw_error(ec, "open");
   }
-
+#endif
   /// Construct a basic_socket, opening it and binding it to the given local
   /// endpoint.
   /**
@@ -105,6 +106,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_socket(boost::asio::io_service& io_service,
       const endpoint_type& endpoint)
     : basic_io_object<SocketService>(io_service)
@@ -116,7 +118,7 @@ public:
     this->get_service().bind(this->get_implementation(), endpoint, ec);
     boost::asio::detail::throw_error(ec, "bind");
   }
-
+#endif
   /// Construct a basic_socket on an existing native socket.
   /**
    * This constructor creates a socket object to hold an existing native socket.
@@ -130,6 +132,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_socket(boost::asio::io_service& io_service,
       const protocol_type& protocol, const native_handle_type& native_socket)
     : basic_io_object<SocketService>(io_service)
@@ -139,7 +142,7 @@ public:
         protocol, native_socket, ec);
     boost::asio::detail::throw_error(ec, "assign");
   }
-
+#endif
 #if defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)
   /// Move-construct a basic_socket from another.
   /**
@@ -217,13 +220,14 @@ public:
    * socket.open(boost::asio::ip::tcp::v4());
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void open(const protocol_type& protocol = protocol_type())
   {
     boost::system::error_code ec;
     this->get_service().open(this->get_implementation(), protocol, ec);
     boost::asio::detail::throw_error(ec, "open");
   }
-
+#endif
   /// Open the socket using the specified protocol.
   /**
    * This function opens the socket so that it will use the specified protocol.
@@ -259,6 +263,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void assign(const protocol_type& protocol,
       const native_handle_type& native_socket)
   {
@@ -267,7 +272,7 @@ public:
         protocol, native_socket, ec);
     boost::asio::detail::throw_error(ec, "assign");
   }
-
+#endif
   /// Assign an existing native socket to the socket.
   /*
    * This function opens the socket to hold an existing native socket.
@@ -303,13 +308,14 @@ public:
    * @note For portable behaviour with respect to graceful closure of a
    * connected socket, call shutdown() before closing the socket.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void close()
   {
     boost::system::error_code ec;
     this->get_service().close(this->get_implementation(), ec);
     boost::asio::detail::throw_error(ec, "close");
   }
-
+#endif
   /// Close the socket.
   /**
    * This function is used to close the socket. Any asynchronous send, receive
@@ -402,13 +408,14 @@ public:
         "operation_not_supported when used on Windows XP, Windows Server 2003, "
         "or earlier. Consult documentation for details."))
 #endif
+#ifndef BOOST_NO_EXCEPTIONS
   void cancel()
   {
     boost::system::error_code ec;
     this->get_service().cancel(this->get_implementation(), ec);
     boost::asio::detail::throw_error(ec, "cancel");
   }
-
+#endif
   /// Cancel all asynchronous operations associated with the socket.
   /**
    * This function causes all outstanding asynchronous connect, send and receive
@@ -465,6 +472,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   bool at_mark() const
   {
     boost::system::error_code ec;
@@ -472,7 +480,7 @@ public:
     boost::asio::detail::throw_error(ec, "at_mark");
     return b;
   }
-
+#endif
   /// Determine whether the socket is at the out-of-band data mark.
   /**
    * This function is used to check whether the socket input is currently
@@ -498,6 +506,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   std::size_t available() const
   {
     boost::system::error_code ec;
@@ -506,7 +515,7 @@ public:
     boost::asio::detail::throw_error(ec, "available");
     return s;
   }
-
+#endif
   /// Determine the number of bytes available for reading.
   /**
    * This function is used to determine the number of bytes that may be read
@@ -540,13 +549,14 @@ public:
    *       boost::asio::ip::tcp::v4(), 12345));
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void bind(const endpoint_type& endpoint)
   {
     boost::system::error_code ec;
     this->get_service().bind(this->get_implementation(), endpoint, ec);
     boost::asio::detail::throw_error(ec, "bind");
   }
-
+#endif
   /// Bind the socket to the given local endpoint.
   /**
    * This function binds the socket to the specified endpoint on the local
@@ -599,6 +609,7 @@ public:
    * socket.connect(endpoint);
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void connect(const endpoint_type& peer_endpoint)
   {
     boost::system::error_code ec;
@@ -611,7 +622,7 @@ public:
     this->get_service().connect(this->get_implementation(), peer_endpoint, ec);
     boost::asio::detail::throw_error(ec, "connect");
   }
-
+#endif
   /// Connect the socket to the specified endpoint.
   /**
    * This function is used to connect a socket to the specified remote endpoint.
@@ -756,6 +767,7 @@ public:
    * socket.set_option(option);
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename SettableSocketOption>
   void set_option(const SettableSocketOption& option)
   {
@@ -763,7 +775,7 @@ public:
     this->get_service().set_option(this->get_implementation(), option, ec);
     boost::asio::detail::throw_error(ec, "set_option");
   }
-
+#endif
   /// Set an option on the socket.
   /**
    * This function is used to set an option on the socket.
@@ -846,6 +858,7 @@ public:
    * bool is_set = option.get();
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename GettableSocketOption>
   void get_option(GettableSocketOption& option) const
   {
@@ -853,7 +866,7 @@ public:
     this->get_service().get_option(this->get_implementation(), option, ec);
     boost::asio::detail::throw_error(ec, "get_option");
   }
-
+#endif
   /// Get an option from the socket.
   /**
    * This function is used to get the current value of an option on the socket.
@@ -924,6 +937,7 @@ public:
    * std::size_t bytes_readable = command.get();
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename IoControlCommand>
   void io_control(IoControlCommand& command)
   {
@@ -931,7 +945,7 @@ public:
     this->get_service().io_control(this->get_implementation(), command, ec);
     boost::asio::detail::throw_error(ec, "io_control");
   }
-
+#endif
   /// Perform an IO control command on the socket.
   /**
    * This function is used to execute an IO control command on the socket.
@@ -996,13 +1010,14 @@ public:
    * operations. Asynchronous operations will never fail with the error
    * boost::asio::error::would_block.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void non_blocking(bool mode)
   {
     boost::system::error_code ec;
     this->get_service().non_blocking(this->get_implementation(), mode, ec);
     boost::asio::detail::throw_error(ec, "non_blocking");
   }
-
+#endif
   /// Sets the non-blocking mode of the socket.
   /**
    * @param mode If @c true, the socket's synchronous operations will fail with
@@ -1197,6 +1212,7 @@ public:
    *   sock.async_write_some(boost::asio::null_buffers(), op);
    * } @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void native_non_blocking(bool mode)
   {
     boost::system::error_code ec;
@@ -1204,6 +1220,7 @@ public:
         this->get_implementation(), mode, ec);
     boost::asio::detail::throw_error(ec, "native_non_blocking");
   }
+#endif
 
   /// Sets the non-blocking mode of the native socket implementation.
   /**
@@ -1312,6 +1329,7 @@ public:
    * boost::asio::ip::tcp::endpoint endpoint = socket.local_endpoint();
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   endpoint_type local_endpoint() const
   {
     boost::system::error_code ec;
@@ -1320,7 +1338,7 @@ public:
     boost::asio::detail::throw_error(ec, "local_endpoint");
     return ep;
   }
-
+#endif
   /// Get the local endpoint of the socket.
   /**
    * This function is used to obtain the locally bound endpoint of the socket.
@@ -1362,6 +1380,7 @@ public:
    * boost::asio::ip::tcp::endpoint endpoint = socket.remote_endpoint();
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   endpoint_type remote_endpoint() const
   {
     boost::system::error_code ec;
@@ -1370,7 +1389,7 @@ public:
     boost::asio::detail::throw_error(ec, "remote_endpoint");
     return ep;
   }
-
+#endif
   /// Get the remote endpoint of the socket.
   /**
    * This function is used to obtain the remote endpoint of the socket.
@@ -1414,13 +1433,14 @@ public:
    * socket.shutdown(boost::asio::ip::tcp::socket::shutdown_send);
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void shutdown(shutdown_type what)
   {
     boost::system::error_code ec;
     this->get_service().shutdown(this->get_implementation(), what, ec);
     boost::asio::detail::throw_error(ec, "shutdown");
   }
-
+#endif
   /// Disable sends or receives on the socket.
   /**
    * This function is used to disable send operations, receive operations, or
diff --git a/third_party/boost_1_48_0/boost/asio/basic_socket_acceptor.hpp b/third_party/boost_1_48_0/boost/asio/basic_socket_acceptor.hpp
index 3203f59..5e16ee0 100644
--- a/third_party/boost_1_48_0/boost/asio/basic_socket_acceptor.hpp
+++ b/third_party/boost_1_48_0/boost/asio/basic_socket_acceptor.hpp
@@ -96,6 +96,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_socket_acceptor(boost::asio::io_service& io_service,
       const protocol_type& protocol)
     : basic_io_object<SocketAcceptorService>(io_service)
@@ -104,6 +105,7 @@ public:
     this->get_service().open(this->get_implementation(), protocol, ec);
     boost::asio::detail::throw_error(ec, "open");
   }
+#endif
 
   /// Construct an acceptor opened on the given endpoint.
   /**
@@ -132,6 +134,7 @@ public:
    * acceptor.listen(listen_backlog);
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_socket_acceptor(boost::asio::io_service& io_service,
       const endpoint_type& endpoint, bool reuse_addr = true)
     : basic_io_object<SocketAcceptorService>(io_service)
@@ -152,6 +155,7 @@ public:
         socket_base::max_connections, ec);
     boost::asio::detail::throw_error(ec, "listen");
   }
+#endif
 
   /// Construct a basic_socket_acceptor on an existing native acceptor.
   /**
@@ -168,6 +172,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_socket_acceptor(boost::asio::io_service& io_service,
       const protocol_type& protocol, const native_handle_type& native_acceptor)
     : basic_io_object<SocketAcceptorService>(io_service)
@@ -177,6 +182,7 @@ public:
         protocol, native_acceptor, ec);
     boost::asio::detail::throw_error(ec, "assign");
   }
+#endif
 
 #if defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)
   /// Move-construct a basic_socket_acceptor from another.
@@ -228,12 +234,14 @@ public:
    * acceptor.open(boost::asio::ip::tcp::v4());
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void open(const protocol_type& protocol = protocol_type())
   {
     boost::system::error_code ec;
     this->get_service().open(this->get_implementation(), protocol, ec);
     boost::asio::detail::throw_error(ec, "open");
   }
+#endif
 
   /// Open the acceptor using the specified protocol.
   /**
@@ -271,6 +279,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void assign(const protocol_type& protocol,
       const native_handle_type& native_acceptor)
   {
@@ -279,6 +288,7 @@ public:
         protocol, native_acceptor, ec);
     boost::asio::detail::throw_error(ec, "assign");
   }
+#endif
 
   /// Assigns an existing native acceptor to the acceptor.
   /*
@@ -320,12 +330,14 @@ public:
    * acceptor.bind(boost::asio::ip::tcp::endpoint(12345));
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void bind(const endpoint_type& endpoint)
   {
     boost::system::error_code ec;
     this->get_service().bind(this->get_implementation(), endpoint, ec);
     boost::asio::detail::throw_error(ec, "bind");
   }
+#endif
 
   /// Bind the acceptor to the given local endpoint.
   /**
@@ -365,12 +377,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void listen(int backlog = socket_base::max_connections)
   {
     boost::system::error_code ec;
     this->get_service().listen(this->get_implementation(), backlog, ec);
     boost::asio::detail::throw_error(ec, "listen");
   }
+#endif
 
   /// Place the acceptor into the state where it will listen for new
   /// connections.
@@ -409,12 +423,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void close()
   {
     boost::system::error_code ec;
     this->get_service().close(this->get_implementation(), ec);
     boost::asio::detail::throw_error(ec, "close");
   }
+#endif
 
   /// Close the acceptor.
   /**
@@ -473,12 +489,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void cancel()
   {
     boost::system::error_code ec;
     this->get_service().cancel(this->get_implementation(), ec);
     boost::asio::detail::throw_error(ec, "cancel");
   }
+#endif
 
   /// Cancel all asynchronous operations associated with the acceptor.
   /**
@@ -514,6 +532,7 @@ public:
    * acceptor.set_option(option);
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename SettableSocketOption>
   void set_option(const SettableSocketOption& option)
   {
@@ -521,6 +540,7 @@ public:
     this->get_service().set_option(this->get_implementation(), option, ec);
     boost::asio::detail::throw_error(ec, "set_option");
   }
+#endif
 
   /// Set an option on the acceptor.
   /**
@@ -578,6 +598,7 @@ public:
    * bool is_set = option.get();
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename GettableSocketOption>
   void get_option(GettableSocketOption& option)
   {
@@ -585,6 +606,7 @@ public:
     this->get_service().get_option(this->get_implementation(), option, ec);
     boost::asio::detail::throw_error(ec, "get_option");
   }
+#endif
 
   /// Get an option from the acceptor.
   /**
@@ -641,6 +663,7 @@ public:
    * socket.io_control(command);
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename IoControlCommand>
   void io_control(IoControlCommand& command)
   {
@@ -648,6 +671,7 @@ public:
     this->get_service().io_control(this->get_implementation(), command, ec);
     boost::asio::detail::throw_error(ec, "io_control");
   }
+#endif
 
   /// Perform an IO control command on the acceptor.
   /**
@@ -711,12 +735,14 @@ public:
    * operations. Asynchronous operations will never fail with the error
    * boost::asio::error::would_block.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void non_blocking(bool mode)
   {
     boost::system::error_code ec;
     this->get_service().non_blocking(this->get_implementation(), mode, ec);
     boost::asio::detail::throw_error(ec, "non_blocking");
   }
+#endif
 
   /// Sets the non-blocking mode of the acceptor.
   /**
@@ -772,6 +798,7 @@ public:
    * function fails with boost::asio::error::invalid_argument, as the
    * combination does not make sense.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void native_non_blocking(bool mode)
   {
     boost::system::error_code ec;
@@ -779,6 +806,7 @@ public:
         this->get_implementation(), mode, ec);
     boost::asio::detail::throw_error(ec, "native_non_blocking");
   }
+#endif
 
   /// Sets the non-blocking mode of the native acceptor implementation.
   /**
@@ -817,6 +845,7 @@ public:
    * boost::asio::ip::tcp::endpoint endpoint = acceptor.local_endpoint();
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   endpoint_type local_endpoint() const
   {
     boost::system::error_code ec;
@@ -825,6 +854,7 @@ public:
     boost::asio::detail::throw_error(ec, "local_endpoint");
     return ep;
   }
+#endif
 
   /// Get the local endpoint of the acceptor.
   /**
@@ -871,6 +901,7 @@ public:
    * acceptor.accept(socket);
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename SocketService>
   void accept(basic_socket<protocol_type, SocketService>& peer)
   {
@@ -878,6 +909,7 @@ public:
     this->get_service().accept(this->get_implementation(), peer, 0, ec);
     boost::asio::detail::throw_error(ec, "accept");
   }
+#endif
 
   /// Accept a new connection.
   /**
@@ -983,6 +1015,7 @@ public:
    * acceptor.accept(socket, endpoint);
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename SocketService>
   void accept(basic_socket<protocol_type, SocketService>& peer,
       endpoint_type& peer_endpoint)
@@ -992,6 +1025,7 @@ public:
         peer, &peer_endpoint, ec);
     boost::asio::detail::throw_error(ec, "accept");
   }
+#endif
 
   /// Accept a new connection and obtain the endpoint of the peer
   /**
diff --git a/third_party/boost_1_48_0/boost/asio/basic_socket_streambuf.hpp b/third_party/boost_1_48_0/boost/asio/basic_socket_streambuf.hpp
index ff1e268..05810e1 100644
--- a/third_party/boost_1_48_0/boost/asio/basic_socket_streambuf.hpp
+++ b/third_party/boost_1_48_0/boost/asio/basic_socket_streambuf.hpp
@@ -235,6 +235,7 @@ public:
    *
    * @param expiry_time The expiry time to be used for the stream.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void expires_at(const time_type& expiry_time)
   {
     construct_timer();
@@ -245,6 +246,7 @@ public:
 
     start_timer();
   }
+#endif
 
   /// Get the stream buffer's expiry time relative to now.
   /**
@@ -264,6 +266,7 @@ public:
    *
    * @param expiry_time The expiry time to be used for the timer.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void expires_from_now(const duration_type& expiry_time)
   {
     construct_timer();
@@ -274,6 +277,7 @@ public:
 
     start_timer();
   }
+#endif
 
 protected:
   int_type underflow()
diff --git a/third_party/boost_1_48_0/boost/asio/basic_stream_socket.hpp b/third_party/boost_1_48_0/boost/asio/basic_stream_socket.hpp
index 728e8db..5baffff 100644
--- a/third_party/boost_1_48_0/boost/asio/basic_stream_socket.hpp
+++ b/third_party/boost_1_48_0/boost/asio/basic_stream_socket.hpp
@@ -85,11 +85,13 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_stream_socket(boost::asio::io_service& io_service,
       const protocol_type& protocol)
     : basic_socket<Protocol, StreamSocketService>(io_service, protocol)
   {
   }
+#endif
 
   /// Construct a basic_stream_socket, opening it and binding it to the given
   /// local endpoint.
@@ -106,11 +108,13 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_stream_socket(boost::asio::io_service& io_service,
       const endpoint_type& endpoint)
     : basic_socket<Protocol, StreamSocketService>(io_service, endpoint)
   {
   }
+#endif
 
   /// Construct a basic_stream_socket on an existing native socket.
   /**
@@ -126,12 +130,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_stream_socket(boost::asio::io_service& io_service,
       const protocol_type& protocol, const native_handle_type& native_socket)
     : basic_socket<Protocol, StreamSocketService>(
         io_service, protocol, native_socket)
   {
   }
+#endif
 
 #if defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)
   /// Move-construct a basic_stream_socket from another.
@@ -193,6 +199,7 @@ public:
    * buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t send(const ConstBufferSequence& buffers)
   {
@@ -202,6 +209,7 @@ public:
     boost::asio::detail::throw_error(ec, "send");
     return s;
   }
+#endif
 
   /// Send some data on the socket.
   /**
@@ -230,6 +238,7 @@ public:
    * buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t send(const ConstBufferSequence& buffers,
       socket_base::message_flags flags)
@@ -240,6 +249,7 @@ public:
     boost::asio::detail::throw_error(ec, "send");
     return s;
   }
+#endif
 
   /// Send some data on the socket.
   /**
@@ -392,6 +402,7 @@ public:
    * multiple buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t receive(const MutableBufferSequence& buffers)
   {
@@ -401,6 +412,7 @@ public:
     boost::asio::detail::throw_error(ec, "receive");
     return s;
   }
+#endif
 
   /// Receive some data on the socket.
   /**
@@ -432,6 +444,7 @@ public:
    * multiple buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t receive(const MutableBufferSequence& buffers,
       socket_base::message_flags flags)
@@ -442,6 +455,7 @@ public:
     boost::asio::detail::throw_error(ec, "receive");
     return s;
   }
+#endif
 
   /// Receive some data on a connected socket.
   /**
@@ -597,6 +611,7 @@ public:
    * buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t write_some(const ConstBufferSequence& buffers)
   {
@@ -606,6 +621,7 @@ public:
     boost::asio::detail::throw_error(ec, "write_some");
     return s;
   }
+#endif
 
   /// Write some data to the socket.
   /**
@@ -705,6 +721,7 @@ public:
    * buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t read_some(const MutableBufferSequence& buffers)
   {
@@ -714,6 +731,7 @@ public:
     boost::asio::detail::throw_error(ec, "read_some");
     return s;
   }
+#endif
 
   /// Read some data from the socket.
   /**
diff --git a/third_party/boost_1_48_0/boost/asio/basic_streambuf.hpp b/third_party/boost_1_48_0/boost/asio/basic_streambuf.hpp
index 6e64289..9011d44 100644
--- a/third_party/boost_1_48_0/boost/asio/basic_streambuf.hpp
+++ b/third_party/boost_1_48_0/boost/asio/basic_streambuf.hpp
@@ -326,8 +326,12 @@ protected:
       }
       else
       {
+#ifndef BOOST_NO_EXCEPTIONS
         std::length_error ex("boost::asio::streambuf too long");
         boost::throw_exception(ex);
+#else
+        assert(false);
+#endif
       }
     }
 
diff --git a/third_party/boost_1_48_0/boost/asio/detail/impl/epoll_reactor.ipp b/third_party/boost_1_48_0/boost/asio/detail/impl/epoll_reactor.ipp
index eb09d99..890d631 100644
--- a/third_party/boost_1_48_0/boost/asio/detail/impl/epoll_reactor.ipp
+++ b/third_party/boost_1_48_0/boost/asio/detail/impl/epoll_reactor.ipp
@@ -130,12 +130,16 @@ void epoll_reactor::fork_service(boost::asio::io_service::fork_event fork_ev)
       ev.events = EPOLLIN | EPOLLERR | EPOLLHUP | EPOLLOUT | EPOLLPRI | EPOLLET;
       ev.data.ptr = state;
       int result = epoll_ctl(epoll_fd_, EPOLL_CTL_ADD, state->descriptor_, &ev);
+#ifndef BOOST_NO_EXCEPTIONS
       if (result != 0)
       {
         boost::system::error_code ec(errno,
             boost::asio::error::get_system_category());
         boost::asio::detail::throw_error(ec, "epoll re-registration");
       }
+#else
+      BOOST_ASSERT(result == 0);
+#endif
     }
   }
 }
@@ -480,9 +484,11 @@ int epoll_reactor::do_epoll_create()
 
   if (fd == -1)
   {
+#ifndef BOOST_NO_EXCEPTIONS
     boost::system::error_code ec(errno,
         boost::asio::error::get_system_category());
     boost::asio::detail::throw_error(ec, "epoll");
+#endif
   }
 
   return fd;
diff --git a/third_party/boost_1_48_0/boost/asio/detail/impl/eventfd_select_interrupter.ipp b/third_party/boost_1_48_0/boost/asio/detail/impl/eventfd_select_interrupter.ipp
index e931eff..e72e7d3 100644
--- a/third_party/boost_1_48_0/boost/asio/detail/impl/eventfd_select_interrupter.ipp
+++ b/third_party/boost_1_48_0/boost/asio/detail/impl/eventfd_select_interrupter.ipp
@@ -85,9 +85,13 @@ void eventfd_select_interrupter::open_descriptors()
     }
     else
     {
+#ifndef BOOST_NO_EXCEPTIONS
       boost::system::error_code ec(errno,
           boost::asio::error::get_system_category());
       boost::asio::detail::throw_error(ec, "eventfd_select_interrupter");
+#else
+      BOOST_ASSERT(errno == 0);
+#endif
     }
   }
 }
diff --git a/third_party/boost_1_48_0/boost/asio/detail/impl/kqueue_reactor.ipp b/third_party/boost_1_48_0/boost/asio/detail/impl/kqueue_reactor.ipp
index c00b2a3..48524c1 100644
--- a/third_party/boost_1_48_0/boost/asio/detail/impl/kqueue_reactor.ipp
+++ b/third_party/boost_1_48_0/boost/asio/detail/impl/kqueue_reactor.ipp
@@ -110,9 +110,13 @@ void kqueue_reactor::fork_service(boost::asio::io_service::fork_event fork_ev)
 
       if (num_events && ::kevent(kqueue_fd_, events, num_events, 0, 0, 0) == -1)
       {
+#ifndef BOOST_NO_EXCEPTIONS
         boost::system::error_code error(errno,
             boost::asio::error::get_system_category());
         boost::asio::detail::throw_error(error);
+#else
+	assert(false);
+#endif
       }
     }
   }
@@ -498,12 +502,14 @@ void kqueue_reactor::interrupt()
 int kqueue_reactor::do_kqueue_create()
 {
   int fd = ::kqueue();
+#ifndef BOOST_NO_EXCEPTIONS
   if (fd == -1)
   {
     boost::system::error_code ec(errno,
         boost::asio::error::get_system_category());
     boost::asio::detail::throw_error(ec, "kqueue");
   }
+#endif
   return fd;
 }
 
diff --git a/third_party/boost_1_48_0/boost/asio/detail/impl/pipe_select_interrupter.ipp b/third_party/boost_1_48_0/boost/asio/detail/impl/pipe_select_interrupter.ipp
index 59aa053..9d65764 100644
--- a/third_party/boost_1_48_0/boost/asio/detail/impl/pipe_select_interrupter.ipp
+++ b/third_party/boost_1_48_0/boost/asio/detail/impl/pipe_select_interrupter.ipp
@@ -58,9 +58,14 @@ void pipe_select_interrupter::open_descriptors()
   }
   else
   {
+#ifndef BOOST_NO_EXCEPTIONS
+
     boost::system::error_code ec(errno,
         boost::asio::error::get_system_category());
     boost::asio::detail::throw_error(ec, "pipe_select_interrupter");
+#else
+    assert(false);
+#endif
   }
 }
 
diff --git a/third_party/boost_1_48_0/boost/asio/detail/impl/posix_event.ipp b/third_party/boost_1_48_0/boost/asio/detail/impl/posix_event.ipp
index 893e8cc..34242a4 100644
--- a/third_party/boost_1_48_0/boost/asio/detail/impl/posix_event.ipp
+++ b/third_party/boost_1_48_0/boost/asio/detail/impl/posix_event.ipp
@@ -31,10 +31,14 @@ namespace detail {
 posix_event::posix_event()
   : signalled_(false)
 {
+#ifndef BOOST_NO_EXCEPTIONS
   int error = ::pthread_cond_init(&cond_, 0);
   boost::system::error_code ec(error,
       boost::asio::error::get_system_category());
   boost::asio::detail::throw_error(ec, "event");
+#else
+  ::pthread_cond_init(&cond_, 0);
+#endif
 }
 
 } // namespace detail
diff --git a/third_party/boost_1_48_0/boost/asio/detail/impl/posix_mutex.ipp b/third_party/boost_1_48_0/boost/asio/detail/impl/posix_mutex.ipp
index 908bfab..d2be34b 100644
--- a/third_party/boost_1_48_0/boost/asio/detail/impl/posix_mutex.ipp
+++ b/third_party/boost_1_48_0/boost/asio/detail/impl/posix_mutex.ipp
@@ -31,10 +31,14 @@ namespace detail {
 
 posix_mutex::posix_mutex()
 {
+#ifndef BOOST_NO_EXCEPTIONS
   int error = ::pthread_mutex_init(&mutex_, 0);
   boost::system::error_code ec(error,
       boost::asio::error::get_system_category());
   boost::asio::detail::throw_error(ec, "mutex");
+#else
+  ::pthread_mutex_init(&mutex_, 0);
+#endif
 }
 
 } // namespace detail
diff --git a/third_party/boost_1_48_0/boost/asio/detail/impl/posix_thread.ipp b/third_party/boost_1_48_0/boost/asio/detail/impl/posix_thread.ipp
index feb6dd1..126e08f 100644
--- a/third_party/boost_1_48_0/boost/asio/detail/impl/posix_thread.ipp
+++ b/third_party/boost_1_48_0/boost/asio/detail/impl/posix_thread.ipp
@@ -48,6 +48,7 @@ void posix_thread::start_thread(func_base* arg)
 {
   int error = ::pthread_create(&thread_, 0,
         boost_asio_detail_posix_thread_function, arg);
+#ifndef BOOST_NO_EXCEPTIONS
   if (error != 0)
   {
     delete arg;
@@ -55,6 +56,9 @@ void posix_thread::start_thread(func_base* arg)
         boost::asio::error::get_system_category());
     boost::asio::detail::throw_error(ec, "thread");
   }
+#else
+  BOOST_ASSERT(error == 0);
+#endif
 }
 
 void* boost_asio_detail_posix_thread_function(void* arg)
diff --git a/third_party/boost_1_48_0/boost/asio/detail/impl/posix_tss_ptr.ipp b/third_party/boost_1_48_0/boost/asio/detail/impl/posix_tss_ptr.ipp
index 89c1bf5..6949b5d 100644
--- a/third_party/boost_1_48_0/boost/asio/detail/impl/posix_tss_ptr.ipp
+++ b/third_party/boost_1_48_0/boost/asio/detail/impl/posix_tss_ptr.ipp
@@ -31,10 +31,14 @@ namespace detail {
 
 void posix_tss_ptr_create(pthread_key_t& key)
 {
+#ifndef BOOST_NO_EXCEPTIONS
   int error = ::pthread_key_create(&key, 0);
   boost::system::error_code ec(error,
       boost::asio::error::get_system_category());
   boost::asio::detail::throw_error(ec, "tss");
+#else
+  ::pthread_key_create(&key, 0);
+#endif
 }
 
 } // namespace detail
diff --git a/third_party/boost_1_48_0/boost/asio/detail/impl/resolver_service_base.ipp b/third_party/boost_1_48_0/boost/asio/detail/impl/resolver_service_base.ipp
index 2418807..ac2d3c2 100644
--- a/third_party/boost_1_48_0/boost/asio/detail/impl/resolver_service_base.ipp
+++ b/third_party/boost_1_48_0/boost/asio/detail/impl/resolver_service_base.ipp
@@ -17,7 +17,7 @@
 
 #include <boost/asio/detail/config.hpp>
 #include <boost/asio/detail/resolver_service_base.hpp>
-
+#include <boost/asio/detail/throw_error.hpp>
 #include <boost/asio/detail/push_options.hpp>
 
 namespace boost {
@@ -29,7 +29,13 @@ class resolver_service_base::work_io_service_runner
 public:
   work_io_service_runner(boost::asio::io_service& io_service)
     : io_service_(io_service) {}
-  void operator()() { io_service_.run(); }
+  void operator()() {
+    boost::system::error_code ec;
+    io_service_.run(ec);
+#ifndef BOOST_NO_EXCEPTIONS
+    boost::asio::detail::throw_error(ec, "run");
+#endif
+  }
 private:
   boost::asio::io_service& io_service_;
 };
diff --git a/third_party/boost_1_48_0/boost/asio/detail/impl/service_registry.ipp b/third_party/boost_1_48_0/boost/asio/detail/impl/service_registry.ipp
index 822fedc..e780e4e 100644
--- a/third_party/boost_1_48_0/boost/asio/detail/impl/service_registry.ipp
+++ b/third_party/boost_1_48_0/boost/asio/detail/impl/service_registry.ipp
@@ -141,6 +141,7 @@ boost::asio::io_service::service* service_registry::do_use_service(
   return first_service_;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 void service_registry::do_add_service(
     const boost::asio::io_service::service::key& key,
     boost::asio::io_service::service* new_service)
@@ -164,6 +165,7 @@ void service_registry::do_add_service(
   new_service->next_ = first_service_;
   first_service_ = new_service;
 }
+#endif
 
 bool service_registry::do_has_service(
     const boost::asio::io_service::service::key& key) const
diff --git a/third_party/boost_1_48_0/boost/asio/detail/impl/signal_set_service.ipp b/third_party/boost_1_48_0/boost/asio/detail/impl/signal_set_service.ipp
index 8af5086..bcdc944 100644
--- a/third_party/boost_1_48_0/boost/asio/detail/impl/signal_set_service.ipp
+++ b/third_party/boost_1_48_0/boost/asio/detail/impl/signal_set_service.ipp
@@ -538,9 +538,13 @@ void signal_set_service::open_descriptors()
   }
   else
   {
+#ifndef BOOST_NO_EXCEPTIONS
     boost::system::error_code ec(errno,
         boost::asio::error::get_system_category());
     boost::asio::detail::throw_error(ec, "signal_set_service pipe");
+#else
+    BOOST_ASSERT(errno == 0);
+#endif
   }
 #endif // !defined(BOOST_WINDOWS) && !defined(__CYGWIN__)
 }
diff --git a/third_party/boost_1_48_0/boost/asio/detail/throw_error.hpp b/third_party/boost_1_48_0/boost/asio/detail/throw_error.hpp
index 43bc9c3..2429508 100644
--- a/third_party/boost_1_48_0/boost/asio/detail/throw_error.hpp
+++ b/third_party/boost_1_48_0/boost/asio/detail/throw_error.hpp
@@ -23,7 +23,6 @@
 namespace boost {
 namespace asio {
 namespace detail {
-
 BOOST_ASIO_DECL void do_throw_error(const boost::system::error_code& err);
 
 BOOST_ASIO_DECL void do_throw_error(const boost::system::error_code& err,
@@ -41,7 +40,6 @@ inline void throw_error(const boost::system::error_code& err,
   if (err)
     do_throw_error(err, location);
 }
-
 } // namespace detail
 } // namespace asio
 } // namespace boost
diff --git a/third_party/boost_1_48_0/boost/asio/impl/connect.hpp b/third_party/boost_1_48_0/boost/asio/impl/connect.hpp
index d0609f9..39b212a 100644
--- a/third_party/boost_1_48_0/boost/asio/impl/connect.hpp
+++ b/third_party/boost_1_48_0/boost/asio/impl/connect.hpp
@@ -40,6 +40,7 @@ namespace detail
   };
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename Protocol, typename SocketService, typename Iterator>
 Iterator connect(basic_socket<Protocol, SocketService>& s, Iterator begin)
 {
@@ -48,6 +49,7 @@ Iterator connect(basic_socket<Protocol, SocketService>& s, Iterator begin)
   boost::asio::detail::throw_error(ec, "connect");
   return result;
 }
+#endif
 
 template <typename Protocol, typename SocketService, typename Iterator>
 inline Iterator connect(basic_socket<Protocol, SocketService>& s,
@@ -56,6 +58,7 @@ inline Iterator connect(basic_socket<Protocol, SocketService>& s,
   return connect(s, begin, Iterator(), detail::default_connect_condition(), ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename Protocol, typename SocketService, typename Iterator>
 Iterator connect(basic_socket<Protocol, SocketService>& s,
     Iterator begin, Iterator end)
@@ -65,6 +68,7 @@ Iterator connect(basic_socket<Protocol, SocketService>& s,
   boost::asio::detail::throw_error(ec, "connect");
   return result;
 }
+#endif
 
 template <typename Protocol, typename SocketService, typename Iterator>
 inline Iterator connect(basic_socket<Protocol, SocketService>& s,
@@ -73,6 +77,7 @@ inline Iterator connect(basic_socket<Protocol, SocketService>& s,
   return connect(s, begin, end, detail::default_connect_condition(), ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename Protocol, typename SocketService,
     typename Iterator, typename ConnectCondition>
 Iterator connect(basic_socket<Protocol, SocketService>& s,
@@ -83,6 +88,7 @@ Iterator connect(basic_socket<Protocol, SocketService>& s,
   boost::asio::detail::throw_error(ec, "connect");
   return result;
 }
+#endif
 
 template <typename Protocol, typename SocketService,
     typename Iterator, typename ConnectCondition>
@@ -93,6 +99,7 @@ inline Iterator connect(basic_socket<Protocol, SocketService>& s,
   return connect(s, begin, Iterator(), connect_condition, ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename Protocol, typename SocketService,
     typename Iterator, typename ConnectCondition>
 Iterator connect(basic_socket<Protocol, SocketService>& s,
@@ -103,6 +110,7 @@ Iterator connect(basic_socket<Protocol, SocketService>& s,
   boost::asio::detail::throw_error(ec, "connect");
   return result;
 }
+#endif
 
 template <typename Protocol, typename SocketService,
     typename Iterator, typename ConnectCondition>
diff --git a/third_party/boost_1_48_0/boost/asio/impl/io_service.ipp b/third_party/boost_1_48_0/boost/asio/impl/io_service.ipp
index 5bac64c..8912b36 100644
--- a/third_party/boost_1_48_0/boost/asio/impl/io_service.ipp
+++ b/third_party/boost_1_48_0/boost/asio/impl/io_service.ipp
@@ -53,6 +53,7 @@ io_service::~io_service()
   delete service_registry_;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 std::size_t io_service::run()
 {
   boost::system::error_code ec;
@@ -60,12 +61,14 @@ std::size_t io_service::run()
   boost::asio::detail::throw_error(ec);
   return s;
 }
+#endif
 
 std::size_t io_service::run(boost::system::error_code& ec)
 {
   return impl_.run(ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 std::size_t io_service::run_one()
 {
   boost::system::error_code ec;
@@ -73,12 +76,14 @@ std::size_t io_service::run_one()
   boost::asio::detail::throw_error(ec);
   return s;
 }
+#endif
 
 std::size_t io_service::run_one(boost::system::error_code& ec)
 {
   return impl_.run_one(ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 std::size_t io_service::poll()
 {
   boost::system::error_code ec;
@@ -86,12 +91,14 @@ std::size_t io_service::poll()
   boost::asio::detail::throw_error(ec);
   return s;
 }
+#endif
 
 std::size_t io_service::poll(boost::system::error_code& ec)
 {
   return impl_.poll(ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 std::size_t io_service::poll_one()
 {
   boost::system::error_code ec;
@@ -99,6 +106,7 @@ std::size_t io_service::poll_one()
   boost::asio::detail::throw_error(ec);
   return s;
 }
+#endif
 
 std::size_t io_service::poll_one(boost::system::error_code& ec)
 {
@@ -139,6 +147,7 @@ void io_service::service::fork_service(boost::asio::io_service::fork_event)
 {
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 service_already_exists::service_already_exists()
   : std::logic_error("Service already exists.")
 {
@@ -148,6 +157,7 @@ invalid_service_owner::invalid_service_owner()
   : std::logic_error("Invalid service owner.")
 {
 }
+#endif
 
 } // namespace asio
 } // namespace boost
diff --git a/third_party/boost_1_48_0/boost/asio/impl/read.hpp b/third_party/boost_1_48_0/boost/asio/impl/read.hpp
index 16cf5f0..9600e7e 100644
--- a/third_party/boost_1_48_0/boost/asio/impl/read.hpp
+++ b/third_party/boost_1_48_0/boost/asio/impl/read.hpp
@@ -56,6 +56,7 @@ std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,
   return total_transferred;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncReadStream, typename MutableBufferSequence>
 inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers)
 {
@@ -64,6 +65,7 @@ inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers)
   boost::asio::detail::throw_error(ec, "read");
   return bytes_transferred;
 }
+#endif
 
 template <typename SyncReadStream, typename MutableBufferSequence>
 inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,
@@ -72,6 +74,7 @@ inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,
   return read(s, buffers, transfer_all(), ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncReadStream, typename MutableBufferSequence,
     typename CompletionCondition>
 inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,
@@ -82,6 +85,7 @@ inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,
   boost::asio::detail::throw_error(ec, "read");
   return bytes_transferred;
 }
+#endif
 
 #if !defined(BOOST_NO_IOSTREAM)
 
@@ -108,6 +112,7 @@ std::size_t read(SyncReadStream& s,
   return total_transferred;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncReadStream, typename Allocator>
 inline std::size_t read(SyncReadStream& s,
     boost::asio::basic_streambuf<Allocator>& b)
@@ -117,6 +122,7 @@ inline std::size_t read(SyncReadStream& s,
   boost::asio::detail::throw_error(ec, "read");
   return bytes_transferred;
 }
+#endif
 
 template <typename SyncReadStream, typename Allocator>
 inline std::size_t read(SyncReadStream& s,
@@ -126,6 +132,7 @@ inline std::size_t read(SyncReadStream& s,
   return read(s, b, transfer_all(), ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncReadStream, typename Allocator,
     typename CompletionCondition>
 inline std::size_t read(SyncReadStream& s,
@@ -137,6 +144,7 @@ inline std::size_t read(SyncReadStream& s,
   boost::asio::detail::throw_error(ec, "read");
   return bytes_transferred;
 }
+#endif
 
 #endif // !defined(BOOST_NO_IOSTREAM)
 
diff --git a/third_party/boost_1_48_0/boost/asio/impl/read_at.hpp b/third_party/boost_1_48_0/boost/asio/impl/read_at.hpp
index 8fc5b74..9a2ec17 100644
--- a/third_party/boost_1_48_0/boost/asio/impl/read_at.hpp
+++ b/third_party/boost_1_48_0/boost/asio/impl/read_at.hpp
@@ -58,6 +58,7 @@ std::size_t read_at(SyncRandomAccessReadDevice& d,
   return total_transferred;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncRandomAccessReadDevice, typename MutableBufferSequence>
 inline std::size_t read_at(SyncRandomAccessReadDevice& d,
     boost::uint64_t offset, const MutableBufferSequence& buffers)
@@ -68,6 +69,7 @@ inline std::size_t read_at(SyncRandomAccessReadDevice& d,
   boost::asio::detail::throw_error(ec, "read_at");
   return bytes_transferred;
 }
+#endif
 
 template <typename SyncRandomAccessReadDevice, typename MutableBufferSequence>
 inline std::size_t read_at(SyncRandomAccessReadDevice& d,
@@ -77,6 +79,7 @@ inline std::size_t read_at(SyncRandomAccessReadDevice& d,
   return read_at(d, offset, buffers, transfer_all(), ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncRandomAccessReadDevice, typename MutableBufferSequence,
     typename CompletionCondition>
 inline std::size_t read_at(SyncRandomAccessReadDevice& d,
@@ -89,6 +92,7 @@ inline std::size_t read_at(SyncRandomAccessReadDevice& d,
   boost::asio::detail::throw_error(ec, "read_at");
   return bytes_transferred;
 }
+#endif
 
 #if !defined(BOOST_NO_IOSTREAM)
 
@@ -116,6 +120,7 @@ std::size_t read_at(SyncRandomAccessReadDevice& d,
   return total_transferred;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncRandomAccessReadDevice, typename Allocator>
 inline std::size_t read_at(SyncRandomAccessReadDevice& d,
     boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b)
@@ -126,6 +131,7 @@ inline std::size_t read_at(SyncRandomAccessReadDevice& d,
   boost::asio::detail::throw_error(ec, "read_at");
   return bytes_transferred;
 }
+#endif
 
 template <typename SyncRandomAccessReadDevice, typename Allocator>
 inline std::size_t read_at(SyncRandomAccessReadDevice& d,
@@ -135,6 +141,7 @@ inline std::size_t read_at(SyncRandomAccessReadDevice& d,
   return read_at(d, offset, b, transfer_all(), ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncRandomAccessReadDevice, typename Allocator,
     typename CompletionCondition>
 inline std::size_t read_at(SyncRandomAccessReadDevice& d,
@@ -147,6 +154,7 @@ inline std::size_t read_at(SyncRandomAccessReadDevice& d,
   boost::asio::detail::throw_error(ec, "read_at");
   return bytes_transferred;
 }
+#endif
 
 #endif // !defined(BOOST_NO_IOSTREAM)
 
diff --git a/third_party/boost_1_48_0/boost/asio/impl/read_until.hpp b/third_party/boost_1_48_0/boost/asio/impl/read_until.hpp
index 8dce777..44b575d 100644
--- a/third_party/boost_1_48_0/boost/asio/impl/read_until.hpp
+++ b/third_party/boost_1_48_0/boost/asio/impl/read_until.hpp
@@ -33,6 +33,7 @@
 namespace boost {
 namespace asio {
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncReadStream, typename Allocator>
 inline std::size_t read_until(SyncReadStream& s,
     boost::asio::basic_streambuf<Allocator>& b, char delim)
@@ -42,6 +43,7 @@ inline std::size_t read_until(SyncReadStream& s,
   boost::asio::detail::throw_error(ec, "read_until");
   return bytes_transferred;
 }
+#endif
 
 template <typename SyncReadStream, typename Allocator>
 std::size_t read_until(SyncReadStream& s,
@@ -89,6 +91,7 @@ std::size_t read_until(SyncReadStream& s,
   }
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncReadStream, typename Allocator>
 inline std::size_t read_until(SyncReadStream& s,
     boost::asio::basic_streambuf<Allocator>& b, const std::string& delim)
@@ -98,6 +101,7 @@ inline std::size_t read_until(SyncReadStream& s,
   boost::asio::detail::throw_error(ec, "read_until");
   return bytes_transferred;
 }
+#endif
 
 namespace detail
 {
@@ -189,6 +193,7 @@ std::size_t read_until(SyncReadStream& s,
   }
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncReadStream, typename Allocator>
 inline std::size_t read_until(SyncReadStream& s,
     boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr)
@@ -198,6 +203,7 @@ inline std::size_t read_until(SyncReadStream& s,
   boost::asio::detail::throw_error(ec, "read_until");
   return bytes_transferred;
 }
+#endif
 
 template <typename SyncReadStream, typename Allocator>
 std::size_t read_until(SyncReadStream& s,
@@ -308,6 +314,7 @@ std::size_t read_until(SyncReadStream& s,
   }
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncReadStream, typename Allocator, typename MatchCondition>
 inline std::size_t read_until(SyncReadStream& s,
     boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition,
@@ -318,6 +325,7 @@ inline std::size_t read_until(SyncReadStream& s,
   boost::asio::detail::throw_error(ec, "read_until");
   return bytes_transferred;
 }
+#endif
 
 namespace detail
 {
diff --git a/third_party/boost_1_48_0/boost/asio/impl/write.hpp b/third_party/boost_1_48_0/boost/asio/impl/write.hpp
index 0726bae..da798d4 100644
--- a/third_party/boost_1_48_0/boost/asio/impl/write.hpp
+++ b/third_party/boost_1_48_0/boost/asio/impl/write.hpp
@@ -54,6 +54,7 @@ std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,
   return total_transferred;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncWriteStream, typename ConstBufferSequence>
 inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers)
 {
@@ -62,6 +63,7 @@ inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers)
   boost::asio::detail::throw_error(ec, "write");
   return bytes_transferred;
 }
+#endif
 
 template <typename SyncWriteStream, typename ConstBufferSequence>
 inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,
@@ -70,6 +72,7 @@ inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,
   return write(s, buffers, transfer_all(), ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncWriteStream, typename ConstBufferSequence,
     typename CompletionCondition>
 inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,
@@ -80,6 +83,7 @@ inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,
   boost::asio::detail::throw_error(ec, "write");
   return bytes_transferred;
 }
+#endif
 
 #if !defined(BOOST_NO_IOSTREAM)
 
@@ -94,6 +98,7 @@ std::size_t write(SyncWriteStream& s,
   return bytes_transferred;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncWriteStream, typename Allocator>
 inline std::size_t write(SyncWriteStream& s,
     boost::asio::basic_streambuf<Allocator>& b)
@@ -103,6 +108,7 @@ inline std::size_t write(SyncWriteStream& s,
   boost::asio::detail::throw_error(ec, "write");
   return bytes_transferred;
 }
+#endif
 
 template <typename SyncWriteStream, typename Allocator>
 inline std::size_t write(SyncWriteStream& s,
@@ -112,6 +118,7 @@ inline std::size_t write(SyncWriteStream& s,
   return write(s, b, transfer_all(), ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncWriteStream, typename Allocator,
     typename CompletionCondition>
 inline std::size_t write(SyncWriteStream& s,
@@ -123,6 +130,7 @@ inline std::size_t write(SyncWriteStream& s,
   boost::asio::detail::throw_error(ec, "write");
   return bytes_transferred;
 }
+#endif
 
 #endif // !defined(BOOST_NO_IOSTREAM)
 
diff --git a/third_party/boost_1_48_0/boost/asio/impl/write_at.hpp b/third_party/boost_1_48_0/boost/asio/impl/write_at.hpp
index 4e703d9..cfe8c6a 100644
--- a/third_party/boost_1_48_0/boost/asio/impl/write_at.hpp
+++ b/third_party/boost_1_48_0/boost/asio/impl/write_at.hpp
@@ -56,6 +56,7 @@ std::size_t write_at(SyncRandomAccessWriteDevice& d,
   return total_transferred;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncRandomAccessWriteDevice, typename ConstBufferSequence>
 inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
     boost::uint64_t offset, const ConstBufferSequence& buffers)
@@ -66,6 +67,7 @@ inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
   boost::asio::detail::throw_error(ec, "write_at");
   return bytes_transferred;
 }
+#endif
 
 template <typename SyncRandomAccessWriteDevice, typename ConstBufferSequence>
 inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
@@ -75,6 +77,7 @@ inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
   return write_at(d, offset, buffers, transfer_all(), ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncRandomAccessWriteDevice, typename ConstBufferSequence,
     typename CompletionCondition>
 inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
@@ -87,6 +90,7 @@ inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
   boost::asio::detail::throw_error(ec, "write_at");
   return bytes_transferred;
 }
+#endif
 
 #if !defined(BOOST_NO_IOSTREAM)
 
@@ -102,6 +106,7 @@ std::size_t write_at(SyncRandomAccessWriteDevice& d,
   return bytes_transferred;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncRandomAccessWriteDevice, typename Allocator>
 inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
     boost::uint64_t offset, boost::asio::basic_streambuf<Allocator>& b)
@@ -111,6 +116,7 @@ inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
   boost::asio::detail::throw_error(ec, "write_at");
   return bytes_transferred;
 }
+#endif
 
 template <typename SyncRandomAccessWriteDevice, typename Allocator>
 inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
@@ -120,6 +126,7 @@ inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
   return write_at(d, offset, b, transfer_all(), ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename SyncRandomAccessWriteDevice, typename Allocator,
     typename CompletionCondition>
 inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
@@ -132,6 +139,7 @@ inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
   boost::asio::detail::throw_error(ec, "write_at");
   return bytes_transferred;
 }
+#endif
 
 #endif // !defined(BOOST_NO_IOSTREAM)
 
diff --git a/third_party/boost_1_48_0/boost/asio/io_service.hpp b/third_party/boost_1_48_0/boost/asio/io_service.hpp
index 53f918e..952a745 100644
--- a/third_party/boost_1_48_0/boost/asio/io_service.hpp
+++ b/third_party/boost_1_48_0/boost/asio/io_service.hpp
@@ -275,7 +275,9 @@ public:
    * The poll() function may also be used to dispatch ready handlers, but
    * without blocking.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   BOOST_ASIO_DECL std::size_t run();
+#endif
 
   /// Run the io_service object's event processing loop.
   /**
@@ -319,7 +321,9 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   BOOST_ASIO_DECL std::size_t run_one();
+#endif
 
   /// Run the io_service object's event processing loop to execute at most one
   /// handler.
@@ -347,7 +351,9 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   BOOST_ASIO_DECL std::size_t poll();
+#endif
 
   /// Run the io_service object's event processing loop to execute ready
   /// handlers.
@@ -371,7 +377,9 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   BOOST_ASIO_DECL std::size_t poll_one();
+#endif
 
   /// Run the io_service object's event processing loop to execute one ready
   /// handler.
@@ -714,6 +722,7 @@ private:
   service* next_;
 };
 
+#ifndef BOOST_NO_EXCEPTIONS
 /// Exception thrown when trying to add a duplicate service to an io_service.
 class service_already_exists
   : public std::logic_error
@@ -730,7 +739,7 @@ class invalid_service_owner
 public:
   BOOST_ASIO_DECL invalid_service_owner();
 };
-
+#endif
 namespace detail {
 
 // Special derived service id type to keep classes header-file only.
diff --git a/third_party/boost_1_48_0/boost/asio/ip/address.hpp b/third_party/boost_1_48_0/boost/asio/ip/address.hpp
index f2960ee..fd6174f 100644
--- a/third_party/boost_1_48_0/boost/asio/ip/address.hpp
+++ b/third_party/boost_1_48_0/boost/asio/ip/address.hpp
@@ -100,18 +100,22 @@ public:
   /// Get the address as a string in dotted decimal format.
   BOOST_ASIO_DECL std::string to_string(boost::system::error_code& ec) const;
 
+#ifndef BOOST_NO_EXCEPTIONS
   /// Create an address from an IPv4 address string in dotted decimal form,
   /// or from an IPv6 address in hexadecimal notation.
   BOOST_ASIO_DECL static address from_string(const char* str);
+#endif
 
   /// Create an address from an IPv4 address string in dotted decimal form,
   /// or from an IPv6 address in hexadecimal notation.
   BOOST_ASIO_DECL static address from_string(
       const char* str, boost::system::error_code& ec);
 
+#ifndef BOOST_NO_EXCEPTIONS
   /// Create an address from an IPv4 address string in dotted decimal form,
   /// or from an IPv6 address in hexadecimal notation.
   BOOST_ASIO_DECL static address from_string(const std::string& str);
+#endif
 
   /// Create an address from an IPv4 address string in dotted decimal form,
   /// or from an IPv6 address in hexadecimal notation.
diff --git a/third_party/boost_1_48_0/boost/asio/ip/address_v4.hpp b/third_party/boost_1_48_0/boost/asio/ip/address_v4.hpp
index d4460f0..c28b02b 100644
--- a/third_party/boost_1_48_0/boost/asio/ip/address_v4.hpp
+++ b/third_party/boost_1_48_0/boost/asio/ip/address_v4.hpp
@@ -109,15 +109,19 @@ public:
   /// Get the address as a string in dotted decimal format.
   BOOST_ASIO_DECL std::string to_string(boost::system::error_code& ec) const;
 
+#ifndef BOOST_NO_EXCEPTIONS
   /// Create an address from an IP address string in dotted decimal form.
   BOOST_ASIO_DECL static address_v4 from_string(const char* str);
+#endif
 
   /// Create an address from an IP address string in dotted decimal form.
   BOOST_ASIO_DECL static address_v4 from_string(
       const char* str, boost::system::error_code& ec);
 
+#ifndef BOOST_NO_EXCEPTIONS
   /// Create an address from an IP address string in dotted decimal form.
   BOOST_ASIO_DECL static address_v4 from_string(const std::string& str);
+#endif
 
   /// Create an address from an IP address string in dotted decimal form.
   BOOST_ASIO_DECL static address_v4 from_string(
diff --git a/third_party/boost_1_48_0/boost/asio/ip/address_v6.hpp b/third_party/boost_1_48_0/boost/asio/ip/address_v6.hpp
index d2420c6..a664208 100644
--- a/third_party/boost_1_48_0/boost/asio/ip/address_v6.hpp
+++ b/third_party/boost_1_48_0/boost/asio/ip/address_v6.hpp
@@ -106,15 +106,19 @@ public:
   /// Get the address as a string.
   BOOST_ASIO_DECL std::string to_string(boost::system::error_code& ec) const;
 
+#ifndef BOOST_NO_EXCEPTIONS
   /// Create an address from an IP address string.
   BOOST_ASIO_DECL static address_v6 from_string(const char* str);
+#endif
 
   /// Create an address from an IP address string.
   BOOST_ASIO_DECL static address_v6 from_string(
       const char* str, boost::system::error_code& ec);
 
+#ifndef BOOST_NO_EXCEPTIONS
   /// Create an address from an IP address string.
   BOOST_ASIO_DECL static address_v6 from_string(const std::string& str);
+#endif
 
   /// Create an address from an IP address string.
   BOOST_ASIO_DECL static address_v6 from_string(
diff --git a/third_party/boost_1_48_0/boost/asio/ip/basic_resolver.hpp b/third_party/boost_1_48_0/boost/asio/ip/basic_resolver.hpp
index 7ddfed2..4f51284 100644
--- a/third_party/boost_1_48_0/boost/asio/ip/basic_resolver.hpp
+++ b/third_party/boost_1_48_0/boost/asio/ip/basic_resolver.hpp
@@ -96,6 +96,7 @@ public:
    * A successful call to this function is guaranteed to return at least one
    * entry.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   iterator resolve(const query& q)
   {
     boost::system::error_code ec;
@@ -103,6 +104,7 @@ public:
     boost::asio::detail::throw_error(ec, "resolve");
     return i;
   }
+#endif
 
   /// Perform forward resolution of a query to a list of entries.
   /**
@@ -183,6 +185,7 @@ public:
    * A successful call to this function is guaranteed to return at least one
    * entry.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   iterator resolve(const endpoint_type& e)
   {
     boost::system::error_code ec;
@@ -190,6 +193,7 @@ public:
     boost::asio::detail::throw_error(ec, "resolve");
     return i;
   }
+#endif
 
   /// Perform reverse resolution of an endpoint to a list of entries.
   /**
diff --git a/third_party/boost_1_48_0/boost/asio/ip/detail/impl/endpoint.ipp b/third_party/boost_1_48_0/boost/asio/ip/detail/impl/endpoint.ipp
index e70c645..d47cac6 100644
--- a/third_party/boost_1_48_0/boost/asio/ip/detail/impl/endpoint.ipp
+++ b/third_party/boost_1_48_0/boost/asio/ip/detail/impl/endpoint.ipp
@@ -98,11 +98,15 @@ endpoint::endpoint(const boost::asio::ip::address& addr,
 
 void endpoint::resize(std::size_t new_size)
 {
+#ifndef BOOST_NO_EXCEPTIONS
   if (new_size > sizeof(boost::asio::detail::sockaddr_storage_type))
   {
     boost::system::error_code ec(boost::asio::error::invalid_argument);
     boost::asio::detail::throw_error(ec);
   }
+#else
+  assert(new_size <= sizeof(boost::asio::detail::sockaddr_storage_type));
+#endif
 }
 
 unsigned short endpoint::port() const
diff --git a/third_party/boost_1_48_0/boost/asio/ip/impl/address.hpp b/third_party/boost_1_48_0/boost/asio/ip/impl/address.hpp
index 94dfb17..34d8ccb 100644
--- a/third_party/boost_1_48_0/boost/asio/ip/impl/address.hpp
+++ b/third_party/boost_1_48_0/boost/asio/ip/impl/address.hpp
@@ -33,9 +33,11 @@ std::basic_ostream<Elem, Traits>& operator<<(
   std::string s = addr.to_string(ec);
   if (ec)
   {
+#ifndef BOOST_NO_EXCEPTIONS
     if (os.exceptions() & std::basic_ostream<Elem, Traits>::failbit)
       boost::asio::detail::throw_error(ec);
     else
+#endif
       os.setstate(std::basic_ostream<Elem, Traits>::failbit);
   }
   else
diff --git a/third_party/boost_1_48_0/boost/asio/ip/impl/address.ipp b/third_party/boost_1_48_0/boost/asio/ip/impl/address.ipp
index 4bf959c..8e210c8 100644
--- a/third_party/boost_1_48_0/boost/asio/ip/impl/address.ipp
+++ b/third_party/boost_1_48_0/boost/asio/ip/impl/address.ipp
@@ -102,21 +102,29 @@ address& address::operator=(const boost::asio::ip::address_v6& ipv6_address)
 
 boost::asio::ip::address_v4 address::to_v4() const
 {
+#ifndef BOOST_NO_EXCEPTIONS
   if (type_ != ipv4)
   {
     std::bad_cast ex;
     boost::throw_exception(ex);
   }
+#else
+  BOOST_ASSERT(type_ == ipv4);
+#endif
   return ipv4_address_;
 }
 
 boost::asio::ip::address_v6 address::to_v6() const
 {
+#ifndef BOOST_NO_EXCEPTIONS
   if (type_ != ipv6)
   {
     std::bad_cast ex;
     boost::throw_exception(ex);
   }
+#else
+  BOOST_ASSERT(type_ == ipv6);
+#endif
   return ipv6_address_;
 }
 
@@ -134,6 +142,7 @@ std::string address::to_string(boost::system::error_code& ec) const
   return ipv4_address_.to_string(ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 address address::from_string(const char* str)
 {
   boost::system::error_code ec;
@@ -141,6 +150,7 @@ address address::from_string(const char* str)
   boost::asio::detail::throw_error(ec);
   return addr;
 }
+#endif
 
 address address::from_string(const char* str, boost::system::error_code& ec)
 {
@@ -167,10 +177,12 @@ address address::from_string(const char* str, boost::system::error_code& ec)
   return address();
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 address address::from_string(const std::string& str)
 {
   return from_string(str.c_str());
 }
+#endif
 
 address address::from_string(const std::string& str,
     boost::system::error_code& ec)
diff --git a/third_party/boost_1_48_0/boost/asio/ip/impl/address_v4.hpp b/third_party/boost_1_48_0/boost/asio/ip/impl/address_v4.hpp
index d27d48d..5d975b0 100644
--- a/third_party/boost_1_48_0/boost/asio/ip/impl/address_v4.hpp
+++ b/third_party/boost_1_48_0/boost/asio/ip/impl/address_v4.hpp
@@ -33,9 +33,11 @@ std::basic_ostream<Elem, Traits>& operator<<(
   std::string s = addr.to_string(ec);
   if (ec)
   {
+#ifndef BOOST_NO_EXCEPTIONS
     if (os.exceptions() & std::basic_ostream<Elem, Traits>::failbit)
       boost::asio::detail::throw_error(ec);
     else
+#endif
       os.setstate(std::basic_ostream<Elem, Traits>::failbit);
   }
   else
diff --git a/third_party/boost_1_48_0/boost/asio/ip/impl/address_v4.ipp b/third_party/boost_1_48_0/boost/asio/ip/impl/address_v4.ipp
index 3d24dd9..1a9459f 100644
--- a/third_party/boost_1_48_0/boost/asio/ip/impl/address_v4.ipp
+++ b/third_party/boost_1_48_0/boost/asio/ip/impl/address_v4.ipp
@@ -47,7 +47,7 @@ address_v4::address_v4(const address_v4::bytes_type& bytes)
 
 address_v4::address_v4(unsigned long addr)
 {
-#if ULONG_MAX > 0xFFFFFFFF
+#if ULONG_MAX > 0xFFFFFFFF && !defined(BOOST_NO_EXCEPTIONS)
   if (addr > 0xFFFFFFFF)
   {
     std::out_of_range ex("address_v4 from unsigned long");
@@ -79,7 +79,9 @@ std::string address_v4::to_string() const
 {
   boost::system::error_code ec;
   std::string addr = to_string(ec);
+#ifndef BOOST_NO_EXCEPTIONS
   boost::asio::detail::throw_error(ec);
+#endif
   return addr;
 }
 
@@ -94,6 +96,7 @@ std::string address_v4::to_string(boost::system::error_code& ec) const
   return addr;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 address_v4 address_v4::from_string(const char* str)
 {
   boost::system::error_code ec;
@@ -101,6 +104,7 @@ address_v4 address_v4::from_string(const char* str)
   boost::asio::detail::throw_error(ec);
   return addr;
 }
+#endif
 
 address_v4 address_v4::from_string(
     const char* str, boost::system::error_code& ec)
@@ -112,10 +116,12 @@ address_v4 address_v4::from_string(
   return tmp;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 address_v4 address_v4::from_string(const std::string& str)
 {
   return from_string(str.c_str());
 }
+#endif
 
 address_v4 address_v4::from_string(
     const std::string& str, boost::system::error_code& ec)
diff --git a/third_party/boost_1_48_0/boost/asio/ip/impl/address_v6.hpp b/third_party/boost_1_48_0/boost/asio/ip/impl/address_v6.hpp
index 11e1797..a187310 100644
--- a/third_party/boost_1_48_0/boost/asio/ip/impl/address_v6.hpp
+++ b/third_party/boost_1_48_0/boost/asio/ip/impl/address_v6.hpp
@@ -33,9 +33,11 @@ std::basic_ostream<Elem, Traits>& operator<<(
   std::string s = addr.to_string(ec);
   if (ec)
   {
+#ifndef BOOST_NO_EXCEPTIONS
     if (os.exceptions() & std::basic_ostream<Elem, Traits>::failbit)
       boost::asio::detail::throw_error(ec);
     else
+#endif
       os.setstate(std::basic_ostream<Elem, Traits>::failbit);
   }
   else
diff --git a/third_party/boost_1_48_0/boost/asio/ip/impl/address_v6.ipp b/third_party/boost_1_48_0/boost/asio/ip/impl/address_v6.ipp
index 898f922..f1b60ab 100644
--- a/third_party/boost_1_48_0/boost/asio/ip/impl/address_v6.ipp
+++ b/third_party/boost_1_48_0/boost/asio/ip/impl/address_v6.ipp
@@ -102,7 +102,9 @@ std::string address_v6::to_string() const
 {
   boost::system::error_code ec;
   std::string addr = to_string(ec);
+#ifndef BOOST_NO_EXCEPTIONS
   boost::asio::detail::throw_error(ec);
+#endif
   return addr;
 }
 
@@ -117,6 +119,7 @@ std::string address_v6::to_string(boost::system::error_code& ec) const
   return addr;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 address_v6 address_v6::from_string(const char* str)
 {
   boost::system::error_code ec;
@@ -124,6 +127,7 @@ address_v6 address_v6::from_string(const char* str)
   boost::asio::detail::throw_error(ec);
   return addr;
 }
+#endif
 
 address_v6 address_v6::from_string(
     const char* str, boost::system::error_code& ec)
@@ -135,10 +139,12 @@ address_v6 address_v6::from_string(
   return tmp;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 address_v6 address_v6::from_string(const std::string& str)
 {
   return from_string(str.c_str());
 }
+#endif
 
 address_v6 address_v6::from_string(
     const std::string& str, boost::system::error_code& ec)
diff --git a/third_party/boost_1_48_0/boost/asio/ip/impl/basic_endpoint.hpp b/third_party/boost_1_48_0/boost/asio/ip/impl/basic_endpoint.hpp
index 9d39c87..c2401b2 100644
--- a/third_party/boost_1_48_0/boost/asio/ip/impl/basic_endpoint.hpp
+++ b/third_party/boost_1_48_0/boost/asio/ip/impl/basic_endpoint.hpp
@@ -35,9 +35,11 @@ std::basic_ostream<Elem, Traits>& operator<<(
   std::string s = tmp_ep.to_string(ec);
   if (ec)
   {
+#ifndef BOOST_NO_EXCEPTIONS
     if (os.exceptions() & std::basic_ostream<Elem, Traits>::failbit)
       boost::asio::detail::throw_error(ec);
     else
+#endif
       os.setstate(std::basic_ostream<Elem, Traits>::failbit);
   }
   else
diff --git a/third_party/boost_1_48_0/boost/asio/ip/impl/host_name.ipp b/third_party/boost_1_48_0/boost/asio/ip/impl/host_name.ipp
index 734341e..55d98d8 100644
--- a/third_party/boost_1_48_0/boost/asio/ip/impl/host_name.ipp
+++ b/third_party/boost_1_48_0/boost/asio/ip/impl/host_name.ipp
@@ -27,6 +27,7 @@ namespace boost {
 namespace asio {
 namespace ip {
 
+#ifndef BOOST_NO_EXCEPTIONS
 std::string host_name()
 {
   char name[1024];
@@ -38,6 +39,7 @@ std::string host_name()
   }
   return std::string(name);
 }
+#endif
 
 std::string host_name(boost::system::error_code& ec)
 {
diff --git a/third_party/boost_1_48_0/boost/asio/local/connect_pair.hpp b/third_party/boost_1_48_0/boost/asio/local/connect_pair.hpp
index 3cafae7..a1a4d28 100644
--- a/third_party/boost_1_48_0/boost/asio/local/connect_pair.hpp
+++ b/third_party/boost_1_48_0/boost/asio/local/connect_pair.hpp
@@ -45,6 +45,7 @@ boost::system::error_code connect_pair(
     basic_socket<Protocol, SocketService2>& socket2,
     boost::system::error_code& ec);
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename Protocol, typename SocketService1, typename SocketService2>
 inline void connect_pair(
     basic_socket<Protocol, SocketService1>& socket1,
@@ -54,6 +55,7 @@ inline void connect_pair(
   connect_pair(socket1, socket2, ec);
   boost::asio::detail::throw_error(ec, "connect_pair");
 }
+#endif
 
 template <typename Protocol, typename SocketService1, typename SocketService2>
 inline boost::system::error_code connect_pair(
diff --git a/third_party/boost_1_48_0/boost/asio/local/detail/impl/endpoint.ipp b/third_party/boost_1_48_0/boost/asio/local/detail/impl/endpoint.ipp
index 7a5dd62..1d63cdf 100644
--- a/third_party/boost_1_48_0/boost/asio/local/detail/impl/endpoint.ipp
+++ b/third_party/boost_1_48_0/boost/asio/local/detail/impl/endpoint.ipp
@@ -49,6 +49,7 @@ endpoint::endpoint(const std::string& path_name)
   init(path_name.data(), path_name.length());
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 void endpoint::resize(std::size_t new_size)
 {
   if (new_size > sizeof(boost::asio::detail::sockaddr_un_type))
@@ -70,6 +71,7 @@ void endpoint::resize(std::size_t new_size)
       --path_length_;
   }
 }
+#endif
 
 std::string endpoint::path() const
 {
@@ -99,12 +101,16 @@ bool operator<(const endpoint& e1, const endpoint& e2)
 
 void endpoint::init(const char* path_name, std::size_t path_length)
 {
+#ifndef BOOST_NO_EXCEPTIONS
   if (path_length > sizeof(data_.local.sun_path) - 1)
   {
     // The buffer is not large enough to store this address.
     boost::system::error_code ec(boost::asio::error::name_too_long);
     boost::asio::detail::throw_error(ec);
   }
+#else
+  BOOST_ASSERT(path_length <= sizeof(data_.local.sun_path) - 1);
+#endif
 
   using namespace std; // For memcpy.
   data_.local = boost::asio::detail::sockaddr_un_type();
diff --git a/third_party/boost_1_48_0/boost/asio/posix/basic_descriptor.hpp b/third_party/boost_1_48_0/boost/asio/posix/basic_descriptor.hpp
index 70f8fa4..a3208dc 100644
--- a/third_party/boost_1_48_0/boost/asio/posix/basic_descriptor.hpp
+++ b/third_party/boost_1_48_0/boost/asio/posix/basic_descriptor.hpp
@@ -82,6 +82,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_descriptor(boost::asio::io_service& io_service,
       const native_handle_type& native_descriptor)
     : basic_io_object<DescriptorService>(io_service)
@@ -91,6 +92,7 @@ public:
         native_descriptor, ec);
     boost::asio::detail::throw_error(ec, "assign");
   }
+#endif
 
 #if defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)
   /// Move-construct a basic_descriptor from another.
@@ -163,6 +165,7 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void assign(const native_handle_type& native_descriptor)
   {
     boost::system::error_code ec;
@@ -170,6 +173,7 @@ public:
         native_descriptor, ec);
     boost::asio::detail::throw_error(ec, "assign");
   }
+#endif
 
   /// Assign an existing native descriptor to the descriptor.
   /*
@@ -201,12 +205,14 @@ public:
    * @throws boost::system::system_error Thrown on failure. Note that, even if
    * the function indicates an error, the underlying descriptor is closed.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void close()
   {
     boost::system::error_code ec;
     this->get_service().close(this->get_implementation(), ec);
     boost::asio::detail::throw_error(ec, "close");
   }
+#endif
 
   /// Close the descriptor.
   /**
@@ -268,12 +274,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void cancel()
   {
     boost::system::error_code ec;
     this->get_service().cancel(this->get_implementation(), ec);
     boost::asio::detail::throw_error(ec, "cancel");
   }
+#endif
 
   /// Cancel all asynchronous operations associated with the descriptor.
   /**
@@ -310,6 +318,7 @@ public:
    * std::size_t bytes_readable = command.get();
    * @endcode
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename IoControlCommand>
   void io_control(IoControlCommand& command)
   {
@@ -317,6 +326,7 @@ public:
     this->get_service().io_control(this->get_implementation(), command, ec);
     boost::asio::detail::throw_error(ec, "io_control");
   }
+#endif
 
   /// Perform an IO control command on the descriptor.
   /**
@@ -382,12 +392,14 @@ public:
    * operations. Asynchronous operations will never fail with the error
    * boost::asio::error::would_block.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void non_blocking(bool mode)
   {
     boost::system::error_code ec;
     this->get_service().non_blocking(this->get_implementation(), mode, ec);
     boost::asio::detail::throw_error(ec, "non_blocking");
   }
+#endif
 
   /// Sets the non-blocking mode of the descriptor.
   /**
@@ -443,6 +455,7 @@ public:
    * function fails with boost::asio::error::invalid_argument, as the
    * combination does not make sense.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void native_non_blocking(bool mode)
   {
     boost::system::error_code ec;
@@ -450,6 +463,7 @@ public:
         this->get_implementation(), mode, ec);
     boost::asio::detail::throw_error(ec, "native_non_blocking");
   }
+#endif
 
   /// Sets the non-blocking mode of the native descriptor implementation.
   /**
diff --git a/third_party/boost_1_48_0/boost/asio/posix/basic_stream_descriptor.hpp b/third_party/boost_1_48_0/boost/asio/posix/basic_stream_descriptor.hpp
index 61152c1..b54c9e3 100644
--- a/third_party/boost_1_48_0/boost/asio/posix/basic_stream_descriptor.hpp
+++ b/third_party/boost_1_48_0/boost/asio/posix/basic_stream_descriptor.hpp
@@ -86,11 +86,13 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   basic_stream_descriptor(boost::asio::io_service& io_service,
       const native_handle_type& native_descriptor)
     : basic_descriptor<StreamDescriptorService>(io_service, native_descriptor)
   {
   }
+#endif
 
 #if defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)
   /// Move-construct a basic_stream_descriptor from another.
@@ -155,6 +157,7 @@ public:
    * buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t write_some(const ConstBufferSequence& buffers)
   {
@@ -164,6 +167,7 @@ public:
     boost::asio::detail::throw_error(ec, "write_some");
     return s;
   }
+#endif
 
   /// Write some data to the descriptor.
   /**
@@ -264,6 +268,7 @@ public:
    * buffers in one go, and how to use it with arrays, boost::array or
    * std::vector.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t read_some(const MutableBufferSequence& buffers)
   {
@@ -273,6 +278,7 @@ public:
     boost::asio::detail::throw_error(ec, "read_some");
     return s;
   }
+#endif
 
   /// Read some data from the descriptor.
   /**
diff --git a/third_party/boost_1_48_0/boost/asio/ssl/context.hpp b/third_party/boost_1_48_0/boost/asio/ssl/context.hpp
index b804017..88e9a1c 100644
--- a/third_party/boost_1_48_0/boost/asio/ssl/context.hpp
+++ b/third_party/boost_1_48_0/boost/asio/ssl/context.hpp
@@ -121,7 +121,9 @@ public:
    *
    * @note Calls @c SSL_CTX_set_options.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   BOOST_ASIO_DECL void set_options(options o);
+#endif
 
   /// Set options on the context.
   /**
@@ -150,7 +152,9 @@ public:
    *
    * @note Calls @c SSL_CTX_set_verify.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   BOOST_ASIO_DECL void set_verify_mode(verify_mode v);
+#endif
 
   /// Set the peer verification mode.
   /**
@@ -185,8 +189,10 @@ public:
    *
    * @note Calls @c SSL_CTX_set_verify.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename VerifyCallback>
   void set_verify_callback(VerifyCallback callback);
+#endif
 
   /// Set the callback used to verify peer certificates.
   /**
@@ -222,7 +228,9 @@ public:
    *
    * @note Calls @c SSL_CTX_load_verify_locations.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   BOOST_ASIO_DECL void load_verify_file(const std::string& filename);
+#endif
 
   /// Load a certification authority file for performing verification.
   /**
@@ -250,7 +258,9 @@ public:
    *
    * @note Calls @c SSL_CTX_set_default_verify_paths.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   BOOST_ASIO_DECL void set_default_verify_paths();
+#endif
 
   /// Configures the context to use the default directories for finding
   /// certification authority certificates.
@@ -280,7 +290,9 @@ public:
    *
    * @note Calls @c SSL_CTX_load_verify_locations.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   BOOST_ASIO_DECL void add_verify_path(const std::string& path);
+#endif
 
   /// Add a directory containing certificate authority files to be used for
   /// performing verification.
@@ -311,8 +323,10 @@ public:
    *
    * @note Calls @c SSL_CTX_use_certificate_file.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   BOOST_ASIO_DECL void use_certificate_file(
       const std::string& filename, file_format format);
+#endif
 
   /// Use a certificate from a file.
   /**
@@ -342,7 +356,9 @@ public:
    *
    * @note Calls @c SSL_CTX_use_certificate_chain_file.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   BOOST_ASIO_DECL void use_certificate_chain_file(const std::string& filename);
+#endif
 
   /// Use a certificate chain from a file.
   /**
@@ -371,8 +387,10 @@ public:
    *
    * @note Calls @c SSL_CTX_use_PrivateKey_file.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   BOOST_ASIO_DECL void use_private_key_file(
       const std::string& filename, file_format format);
+#endif
 
   /// Use a private key from a file.
   /**
@@ -403,8 +421,10 @@ public:
    *
    * @note Calls @c SSL_CTX_use_RSAPrivateKey_file.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   BOOST_ASIO_DECL void use_rsa_private_key_file(
       const std::string& filename, file_format format);
+#endif
 
   /// Use an RSA private key from a file.
   /**
@@ -435,7 +455,9 @@ public:
    *
    * @note Calls @c SSL_CTX_set_tmp_dh.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   BOOST_ASIO_DECL void use_tmp_dh_file(const std::string& filename);
+#endif
 
   /// Use the specified file to obtain the temporary Diffie-Hellman parameters.
   /**
@@ -469,8 +491,10 @@ public:
    *
    * @note Calls @c SSL_CTX_set_default_passwd_cb.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename PasswordCallback>
   void set_password_callback(PasswordCallback callback);
+#endif
 
   /// Set the password callback.
   /**
diff --git a/third_party/boost_1_48_0/boost/asio/ssl/detail/io.hpp b/third_party/boost_1_48_0/boost/asio/ssl/detail/io.hpp
index 6e99e4f..0f82bbd 100644
--- a/third_party/boost_1_48_0/boost/asio/ssl/detail/io.hpp
+++ b/third_party/boost_1_48_0/boost/asio/ssl/detail/io.hpp
@@ -152,7 +152,8 @@ public:
           if (core_.pending_read_.expires_at() == boost::posix_time::neg_infin)
           {
             // Prevent other read operations from being started.
-            core_.pending_read_.expires_at(boost::posix_time::pos_infin);
+            core_.pending_read_.expires_at(boost::posix_time::pos_infin, ec);
+            if (ec) return;
 
             // Start reading some data from the underlying transport.
             next_layer_.async_read_some(
@@ -179,7 +180,8 @@ public:
           if (core_.pending_write_.expires_at() == boost::posix_time::neg_infin)
           {
             // Prevent other write operations from being started.
-            core_.pending_write_.expires_at(boost::posix_time::pos_infin);
+            core_.pending_write_.expires_at(boost::posix_time::pos_infin, ec);
+            if (ec) return;
 
             // Start writing all the data to the underlying transport.
             boost::asio::async_write(next_layer_,
@@ -234,7 +236,8 @@ public:
           core_.input_ = core_.engine_.put_input(core_.input_);
 
           // Release any waiting read operations.
-          core_.pending_read_.expires_at(boost::posix_time::neg_infin);
+          core_.pending_read_.expires_at(boost::posix_time::neg_infin, ec);
+          if (ec) return;
 
           // Try the operation again.
           continue;
@@ -242,7 +245,8 @@ public:
         case engine::want_output_and_retry:
 
           // Release any waiting write operations.
-          core_.pending_write_.expires_at(boost::posix_time::neg_infin);
+          core_.pending_write_.expires_at(boost::posix_time::neg_infin, ec);
+          if (ec) return;
 
           // Try the operation again.
           continue;
@@ -250,7 +254,8 @@ public:
         case engine::want_output:
 
           // Release any waiting write operations.
-          core_.pending_write_.expires_at(boost::posix_time::neg_infin);
+          core_.pending_write_.expires_at(boost::posix_time::neg_infin, ec);
+          if (ec) return;
 
           // Fall through to call handler.
 
diff --git a/third_party/boost_1_48_0/boost/asio/ssl/detail/stream_core.hpp b/third_party/boost_1_48_0/boost/asio/ssl/detail/stream_core.hpp
index 905f433..8f5b1f3 100644
--- a/third_party/boost_1_48_0/boost/asio/ssl/detail/stream_core.hpp
+++ b/third_party/boost_1_48_0/boost/asio/ssl/detail/stream_core.hpp
@@ -47,8 +47,15 @@ struct stream_core
       input_buffer_space_(max_tls_record_size),
       input_buffer_(boost::asio::buffer(input_buffer_space_))
   {
-    pending_read_.expires_at(boost::posix_time::neg_infin);
-    pending_write_.expires_at(boost::posix_time::neg_infin);
+    boost::system::error_code ec;
+    pending_read_.expires_at(boost::posix_time::neg_infin, ec);
+#ifndef BOOST_NO_EXCEPTIONS
+    boost::asio::detail::throw_error(ec, "stream_core");
+#endif
+    pending_write_.expires_at(boost::posix_time::neg_infin, ec);
+#ifndef BOOST_NO_EXCEPTIONS
+    boost::asio::detail::throw_error(ec, "stream_core");
+#endif
   }
 
   ~stream_core()
diff --git a/third_party/boost_1_48_0/boost/asio/ssl/impl/context.hpp b/third_party/boost_1_48_0/boost/asio/ssl/impl/context.hpp
index 48db11f..dd0f7eb 100644
--- a/third_party/boost_1_48_0/boost/asio/ssl/impl/context.hpp
+++ b/third_party/boost_1_48_0/boost/asio/ssl/impl/context.hpp
@@ -30,6 +30,7 @@ namespace ssl {
 
 #if !defined(BOOST_ASIO_ENABLE_OLD_SSL)
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename VerifyCallback>
 void context::set_verify_callback(VerifyCallback callback)
 {
@@ -37,6 +38,7 @@ void context::set_verify_callback(VerifyCallback callback)
   this->set_verify_callback(callback, ec);
   boost::asio::detail::throw_error(ec, "set_verify_callback");
 }
+#endif
 
 template <typename VerifyCallback>
 boost::system::error_code context::set_verify_callback(
@@ -46,6 +48,7 @@ boost::system::error_code context::set_verify_callback(
       new detail::verify_callback<VerifyCallback>(callback), ec);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename PasswordCallback>
 void context::set_password_callback(PasswordCallback callback)
 {
@@ -53,6 +56,7 @@ void context::set_password_callback(PasswordCallback callback)
   this->set_password_callback(callback, ec);
   boost::asio::detail::throw_error(ec, "set_password_callback");
 }
+#endif
 
 template <typename PasswordCallback>
 boost::system::error_code context::set_password_callback(
diff --git a/third_party/boost_1_48_0/boost/asio/ssl/impl/context.ipp b/third_party/boost_1_48_0/boost/asio/ssl/impl/context.ipp
index d48a5d3..cd1f874 100644
--- a/third_party/boost_1_48_0/boost/asio/ssl/impl/context.ipp
+++ b/third_party/boost_1_48_0/boost/asio/ssl/impl/context.ipp
@@ -89,12 +89,16 @@ context::context(context::method m)
     break;
   }
 
+#ifndef BOOST_NO_EXCEPTIONS
   if (handle_ == 0)
   {
     boost::system::error_code ec(::ERR_get_error(),
         boost::asio::error::get_ssl_category());
     boost::asio::detail::throw_error(ec, "context");
   }
+#else
+  assert(handle_);
+#endif
 }
 
 context::context(boost::asio::io_service&, context::method m)
@@ -157,12 +161,14 @@ context::impl_type context::impl()
   return handle_;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 void context::set_options(context::options o)
 {
   boost::system::error_code ec;
   set_options(o, ec);
   boost::asio::detail::throw_error(ec, "set_options");
 }
+#endif
 
 boost::system::error_code context::set_options(
     context::options o, boost::system::error_code& ec)
@@ -173,12 +179,14 @@ boost::system::error_code context::set_options(
   return ec;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 void context::set_verify_mode(verify_mode v)
 {
   boost::system::error_code ec;
   set_verify_mode(v, ec);
   boost::asio::detail::throw_error(ec, "set_verify_mode");
 }
+#endif
 
 boost::system::error_code context::set_verify_mode(
     verify_mode v, boost::system::error_code& ec)
@@ -189,12 +197,14 @@ boost::system::error_code context::set_verify_mode(
   return ec;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 void context::load_verify_file(const std::string& filename)
 {
   boost::system::error_code ec;
   load_verify_file(filename, ec);
   boost::asio::detail::throw_error(ec, "load_verify_file");
 }
+#endif
 
 boost::system::error_code context::load_verify_file(
     const std::string& filename, boost::system::error_code& ec)
@@ -210,12 +220,14 @@ boost::system::error_code context::load_verify_file(
   return ec;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 void context::set_default_verify_paths()
 {
   boost::system::error_code ec;
   set_default_verify_paths(ec);
   boost::asio::detail::throw_error(ec, "set_default_verify_paths");
 }
+#endif
 
 boost::system::error_code context::set_default_verify_paths(
     boost::system::error_code& ec)
@@ -231,12 +243,14 @@ boost::system::error_code context::set_default_verify_paths(
   return ec;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 void context::add_verify_path(const std::string& path)
 {
   boost::system::error_code ec;
   add_verify_path(path, ec);
   boost::asio::detail::throw_error(ec, "add_verify_path");
 }
+#endif
 
 boost::system::error_code context::add_verify_path(
     const std::string& path, boost::system::error_code& ec)
@@ -252,6 +266,7 @@ boost::system::error_code context::add_verify_path(
   return ec;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 void context::use_certificate_file(
     const std::string& filename, file_format format)
 {
@@ -259,6 +274,7 @@ void context::use_certificate_file(
   use_certificate_file(filename, format, ec);
   boost::asio::detail::throw_error(ec, "use_certificate_file");
 }
+#endif
 
 boost::system::error_code context::use_certificate_file(
     const std::string& filename, file_format format,
@@ -291,12 +307,14 @@ boost::system::error_code context::use_certificate_file(
   return ec;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 void context::use_certificate_chain_file(const std::string& filename)
 {
   boost::system::error_code ec;
   use_certificate_chain_file(filename, ec);
   boost::asio::detail::throw_error(ec, "use_certificate_chain_file");
 }
+#endif
 
 boost::system::error_code context::use_certificate_chain_file(
     const std::string& filename, boost::system::error_code& ec)
@@ -312,6 +330,7 @@ boost::system::error_code context::use_certificate_chain_file(
   return ec;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 void context::use_private_key_file(
     const std::string& filename, context::file_format format)
 {
@@ -319,6 +338,7 @@ void context::use_private_key_file(
   use_private_key_file(filename, format, ec);
   boost::asio::detail::throw_error(ec, "use_private_key_file");
 }
+#endif
 
 boost::system::error_code context::use_private_key_file(
     const std::string& filename, context::file_format format,
@@ -351,6 +371,7 @@ boost::system::error_code context::use_private_key_file(
   return ec;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 void context::use_rsa_private_key_file(
     const std::string& filename, context::file_format format)
 {
@@ -358,6 +379,7 @@ void context::use_rsa_private_key_file(
   use_rsa_private_key_file(filename, format, ec);
   boost::asio::detail::throw_error(ec, "use_rsa_private_key_file");
 }
+#endif
 
 boost::system::error_code context::use_rsa_private_key_file(
     const std::string& filename, context::file_format format,
@@ -391,12 +413,14 @@ boost::system::error_code context::use_rsa_private_key_file(
   return ec;
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 void context::use_tmp_dh_file(const std::string& filename)
 {
   boost::system::error_code ec;
   use_tmp_dh_file(filename, ec);
   boost::asio::detail::throw_error(ec, "use_tmp_dh_file");
 }
+#endif
 
 boost::system::error_code context::use_tmp_dh_file(
     const std::string& filename, boost::system::error_code& ec)
diff --git a/third_party/boost_1_48_0/boost/asio/ssl/stream.hpp b/third_party/boost_1_48_0/boost/asio/ssl/stream.hpp
index 8ab5c07..1e9a23d 100644
--- a/third_party/boost_1_48_0/boost/asio/ssl/stream.hpp
+++ b/third_party/boost_1_48_0/boost/asio/ssl/stream.hpp
@@ -232,12 +232,14 @@ public:
    *
    * @note Calls @c SSL_set_verify.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void set_verify_mode(verify_mode v)
   {
     boost::system::error_code ec;
     set_verify_mode(v, ec);
     boost::asio::detail::throw_error(ec, "set_verify_mode");
   }
+#endif
 
   /// Set the peer verification mode.
   /**
@@ -275,6 +277,7 @@ public:
    *
    * @note Calls @c SSL_set_verify.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename VerifyCallback>
   void set_verify_callback(VerifyCallback callback)
   {
@@ -282,6 +285,7 @@ public:
     this->set_verify_callback(callback, ec);
     boost::asio::detail::throw_error(ec, "set_verify_callback");
   }
+#endif
 
   /// Set the callback used to verify peer certificates.
   /**
@@ -319,12 +323,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void handshake(handshake_type type)
   {
     boost::system::error_code ec;
     handshake(type, ec);
     boost::asio::detail::throw_error(ec, "handshake");
   }
+#endif
 
   /// Perform SSL handshaking.
   /**
@@ -377,12 +383,14 @@ public:
    *
    * @throws boost::system::system_error Thrown on failure.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   void shutdown()
   {
     boost::system::error_code ec;
     shutdown(ec);
     boost::asio::detail::throw_error(ec, "shutdown");
   }
+#endif
 
   /// Shut down SSL on the stream.
   /**
@@ -436,6 +444,7 @@ public:
    * peer. Consider using the @ref write function if you need to ensure that all
    * data is written before the blocking operation completes.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename ConstBufferSequence>
   std::size_t write_some(const ConstBufferSequence& buffers)
   {
@@ -444,6 +453,7 @@ public:
     boost::asio::detail::throw_error(ec, "write_some");
     return n;
   }
+#endif
 
   /// Write some data to the stream.
   /**
@@ -520,6 +530,7 @@ public:
    * bytes. Consider using the @ref read function if you need to ensure that the
    * requested amount of data is read before the blocking operation completes.
    */
+#ifndef BOOST_NO_EXCEPTIONS
   template <typename MutableBufferSequence>
   std::size_t read_some(const MutableBufferSequence& buffers)
   {
@@ -528,6 +539,7 @@ public:
     boost::asio::detail::throw_error(ec, "read_some");
     return n;
   }
+#endif
 
   /// Read some data from the stream.
   /**
diff --git a/third_party/boost_1_48_0/boost/assign/list_of.hpp b/third_party/boost_1_48_0/boost/assign/list_of.hpp
index 6da444b..8b8983b 100644
--- a/third_party/boost_1_48_0/boost/assign/list_of.hpp
+++ b/third_party/boost_1_48_0/boost/assign/list_of.hpp
@@ -175,8 +175,12 @@ namespace assign_detail
             Array ar;
 #endif            
             const std::size_t sz = ar.size();
+#ifndef BOOST_NO_EXCEPTIONS
             if( sz < static_cast<const DerivedTAssign*>(this)->size() )
                 throw assign::assignment_exception( "array initialized with too many elements" );
+#else
+            assert(sz >= static_cast<const DerivedTAssign*>(this)->size());
+#endif
             std::size_t n = 0; 
             iterator i   = begin(), 
                      e   = end();
diff --git a/third_party/boost_1_48_0/boost/cast.hpp b/third_party/boost_1_48_0/boost/cast.hpp
index 2615d18..9aeba71 100644
--- a/third_party/boost_1_48_0/boost/cast.hpp
+++ b/third_party/boost_1_48_0/boost/cast.hpp
@@ -76,7 +76,11 @@ namespace boost
     inline Target polymorphic_cast(Source* x BOOST_EXPLICIT_DEFAULT_TARGET)
     {
         Target tmp = dynamic_cast<Target>(x);
+#ifndef BOOST_NO_EXCEPTIONS
         if ( tmp == 0 ) throw std::bad_cast();
+#else
+        assert(tmp);
+#endif
         return tmp;
     }
 
diff --git a/third_party/boost_1_48_0/boost/circular_buffer/base.hpp b/third_party/boost_1_48_0/boost/circular_buffer/base.hpp
index 3b9886a..8a6ec43 100644
--- a/third_party/boost_1_48_0/boost/circular_buffer/base.hpp
+++ b/third_party/boost_1_48_0/boost/circular_buffer/base.hpp
@@ -2083,8 +2083,12 @@ private:
 
     //! Allocate memory.
     pointer allocate(size_type n) {
+#ifndef BOOST_NO_EXCEPTIONS
         if (n > max_size())
             throw_exception(std::length_error("circular_buffer"));
+#else //BOOST_NO_EXCEPTIONS
+        assert(n <= max_size());
+#endif //BOOST_NO_EXCEPTIONS
 #if BOOST_CB_ENABLE_DEBUG
         pointer p = (n == 0) ? 0 : m_alloc.allocate(n, 0);
         std::memset(p, cb_details::UNINITIALIZED, sizeof(value_type) * n);
diff --git a/third_party/boost_1_48_0/boost/config/stdlib/libstdcpp3.hpp b/third_party/boost_1_48_0/boost/config/stdlib/libstdcpp3.hpp
index 52d5837..81e34e5 100644
--- a/third_party/boost_1_48_0/boost/config/stdlib/libstdcpp3.hpp
+++ b/third_party/boost_1_48_0/boost/config/stdlib/libstdcpp3.hpp
@@ -33,7 +33,7 @@
 
 #ifdef __GLIBCXX__ // gcc 3.4 and greater:
 #  if defined(_GLIBCXX_HAVE_GTHR_DEFAULT) \
-        || defined(_GLIBCXX__PTHREADS)
+	|| defined(_GLIBCXX__PTHREADS) || defined(_GLIBCXX_HAS_GTHREADS)
       //
       // If the std lib has thread support turned on, then turn it on in Boost
       // as well.  We do this because some gcc-3.4 std lib headers define _REENTANT
diff --git a/third_party/boost_1_48_0/boost/date_time/c_time.hpp b/third_party/boost_1_48_0/boost/date_time/c_time.hpp
index f9065d4..822efe9 100644
--- a/third_party/boost_1_48_0/boost/date_time/c_time.hpp
+++ b/third_party/boost_1_48_0/boost/date_time/c_time.hpp
@@ -66,8 +66,10 @@ namespace date_time {
  	#else
         result = localtime_r(t, result);
 	#endif
+#ifndef BOOST_NO_EXCEPTIONS
         if (!result)
           boost::throw_exception(std::runtime_error("could not convert calendar time to local time"));
+#endif
         return result;
       }
       //! requires a pointer to a user created std::tm struct
@@ -84,8 +86,10 @@ namespace date_time {
 	#else
         result = gmtime_r(t, result);
 	#endif
+#ifndef BOOST_NO_EXCEPTIONS
         if (!result)
           boost::throw_exception(std::runtime_error("could not convert calendar time to UTC time"));
+#endif
         return result;
       }
 #else // BOOST_HAS_THREADS
@@ -99,8 +103,10 @@ namespace date_time {
       static std::tm* localtime(const std::time_t* t, std::tm* result)
       {
         result = std::localtime(t);
+#ifndef BOOST_NO_EXCEPTIONS
         if (!result)
           boost::throw_exception(std::runtime_error("could not convert calendar time to local time"));
+#endif
         return result;
       }
       //! requires a pointer to a user created std::tm struct
@@ -108,8 +114,10 @@ namespace date_time {
       static std::tm* gmtime(const std::time_t* t, std::tm* result)
       {
         result = std::gmtime(t);
+#ifndef BOOST_NO_EXCEPTIONS
         if (!result)
           boost::throw_exception(std::runtime_error("could not convert calendar time to UTC time"));
+#endif
         return result;
       }
 #if (defined(_MSC_VER) && (_MSC_VER >= 1400))
diff --git a/third_party/boost_1_48_0/boost/date_time/constrained_value.hpp b/third_party/boost_1_48_0/boost/date_time/constrained_value.hpp
index b273dd5..5846eed 100644
--- a/third_party/boost_1_48_0/boost/date_time/constrained_value.hpp
+++ b/third_party/boost_1_48_0/boost/date_time/constrained_value.hpp
@@ -107,7 +107,9 @@ namespace CV {
     static rep_type max BOOST_PREVENT_MACRO_SUBSTITUTION () { return max_value; }
     static void on_error(rep_type, rep_type, violation_enum)
     {
+#ifndef BOOST_NO_EXCEPTIONS
       boost::throw_exception(actual_exception_type());
+#endif
     }
   };
 
diff --git a/third_party/boost_1_48_0/boost/date_time/gregorian/conversion.hpp b/third_party/boost_1_48_0/boost/date_time/gregorian/conversion.hpp
index c505bdd..6dd7aac 100644
--- a/third_party/boost_1_48_0/boost/date_time/gregorian/conversion.hpp
+++ b/third_party/boost_1_48_0/boost/date_time/gregorian/conversion.hpp
@@ -25,6 +25,7 @@ namespace gregorian {
   inline
   std::tm to_tm(const date& d)
   {
+#ifndef BOOST_NO_EXCEPTIONS
     if (d.is_special())
     {
         std::string s = "tm unable to handle ";
@@ -41,6 +42,9 @@ namespace gregorian {
         }
         boost::throw_exception(std::out_of_range(s));
     }
+#else // BOOST_NO_EXCEPTIONS
+    assert(!d.is_special());
+#endif // BOOST_NO_EXCEPTIONS
 
     std::tm datetm;
     std::memset(&datetm, 0, sizeof(datetm));
diff --git a/third_party/boost_1_48_0/boost/date_time/gregorian/greg_date.hpp b/third_party/boost_1_48_0/boost/date_time/gregorian/greg_date.hpp
index ad67c0c..82890a3 100644
--- a/third_party/boost_1_48_0/boost/date_time/gregorian/greg_date.hpp
+++ b/third_party/boost_1_48_0/boost/date_time/gregorian/greg_date.hpp
@@ -55,28 +55,32 @@ namespace gregorian {
     date(year_type y, month_type m, day_type d)
       : date_time::date<date, gregorian_calendar, date_duration>(y, m, d)
     {
+#ifndef BOOST_NO_EXCEPTIONS
       if (gregorian_calendar::end_of_month_day(y, m) < d) {
         boost::throw_exception(bad_day_of_month(std::string("Day of month is not valid for year")));
       }
-    }
+#else
+      assert(d <= gregorian_calendar::end_of_month_day(y, m));
+#endif            
+    }             
     //! Constructor from a ymd_type structure
     explicit date(const ymd_type& ymd)
       : date_time::date<date, gregorian_calendar, date_duration>(ymd)
-    {}
+    {}            
     //! Needed copy constructor
     explicit date(const date_int_type& rhs):
       date_time::date<date,gregorian_calendar, date_duration>(rhs)
-    {}
+    {}            
     //! Needed copy constructor
     explicit date(date_rep_type rhs):
       date_time::date<date,gregorian_calendar, date_duration>(rhs)
-    {}
+    {}            
     //! Constructor for infinities, not a date, max and min date
     explicit date(special_values sv):
       date_time::date<date, gregorian_calendar, date_duration>(date_rep_type::from_special(sv))
-    {
+    {             
       if (sv == min_date_time)
-      {
+      {           
         *this = date(1400, 1, 1);
       }
       if (sv == max_date_time)
diff --git a/third_party/boost_1_48_0/boost/date_time/gregorian/gregorian_io.hpp b/third_party/boost_1_48_0/boost/date_time/gregorian/gregorian_io.hpp
index 62a759f..2c5fa4c 100644
--- a/third_party/boost_1_48_0/boost/date_time/gregorian/gregorian_io.hpp
+++ b/third_party/boost_1_48_0/boost/date_time/gregorian/gregorian_io.hpp
@@ -67,6 +67,7 @@ namespace gregorian {
     return os;
   }
 
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for date
   template <class CharT, class Traits>
   inline
@@ -109,6 +110,7 @@ namespace gregorian {
     }    
     return is;
   }
+#endif
 
   template <class CharT, class TraitsT>
   inline std::basic_ostream<CharT, TraitsT>&
@@ -128,6 +130,7 @@ namespace gregorian {
     return os;
   }
 
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for date_duration
   template <class CharT, class Traits>
   inline
@@ -166,6 +169,7 @@ namespace gregorian {
     }
     return is;
   }
+#endif
 
   template <class CharT, class TraitsT>
   inline std::basic_ostream<CharT, TraitsT>&
@@ -192,6 +196,7 @@ namespace gregorian {
     return os;
   }
 
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for date_period 
   template <class CharT, class Traits>
   inline
@@ -230,7 +235,7 @@ namespace gregorian {
     }
     return is;
   }
-
+#endif
   /********** small gregorian types **********/
   
   template <class CharT, class TraitsT>
@@ -251,6 +256,7 @@ namespace gregorian {
     return os;
   }
 
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for greg_month
   template <class CharT, class Traits>
   inline
@@ -289,7 +295,7 @@ namespace gregorian {
     }
     return is;
   }
-
+#endif
 
   template <class CharT, class TraitsT>
   inline std::basic_ostream<CharT, TraitsT>&
@@ -307,7 +313,8 @@ namespace gregorian {
     }
     return os;
   }
- 
+
+#ifndef BOOST_NO_EXCEPTIONS 
   //! input operator for greg_weekday
   template <class CharT, class Traits>
   inline
@@ -346,9 +353,10 @@ namespace gregorian {
     }
     return is;
   }
+#endif
 
   //NOTE: output operator for greg_day was not necessary
-
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for greg_day
   template <class CharT, class Traits>
   inline
@@ -387,9 +395,10 @@ namespace gregorian {
     }
     return is;
   }
+#endif
 
   //NOTE: output operator for greg_year was not necessary
-
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for greg_year
   template <class CharT, class Traits>
   inline
@@ -428,6 +437,7 @@ namespace gregorian {
     }
     return is;
   }
+#endif
 
   /********** date generator types **********/
   
@@ -448,6 +458,7 @@ namespace gregorian {
     return os;
   }
 
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for partial_date
   template <class CharT, class Traits>
   inline
@@ -486,6 +497,7 @@ namespace gregorian {
     }
     return is;
   }
+#endif
 
   template <class CharT, class TraitsT>
   inline std::basic_ostream<CharT, TraitsT>&
@@ -504,6 +516,7 @@ namespace gregorian {
     return os;
   }
 
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for nth_day_of_the_week_in_month
   template <class CharT, class Traits>
   inline
@@ -543,7 +556,7 @@ namespace gregorian {
     }
     return is;
   }
-
+#endif
 
   template <class CharT, class TraitsT>
   inline std::basic_ostream<CharT, TraitsT>&
@@ -562,6 +575,7 @@ namespace gregorian {
     return os;
   }
 
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for first_day_of_the_week_in_month
   template <class CharT, class Traits>
   inline
@@ -601,7 +615,7 @@ namespace gregorian {
     }
     return is;
   }
-
+#endif
 
   template <class CharT, class TraitsT>
   inline std::basic_ostream<CharT, TraitsT>&
@@ -620,6 +634,7 @@ namespace gregorian {
     return os;
   }
 
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for last_day_of_the_week_in_month
   template <class CharT, class Traits>
   inline
@@ -659,7 +674,7 @@ namespace gregorian {
     }
     return is;
   }
-
+#endif
 
   template <class CharT, class TraitsT>
   inline std::basic_ostream<CharT, TraitsT>&
@@ -679,6 +694,7 @@ namespace gregorian {
     return os;
   }
 
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for first_day_of_the_week_after
   template <class CharT, class Traits>
   inline
@@ -718,7 +734,7 @@ namespace gregorian {
     }
     return is;
   }
-
+#endif
 
   template <class CharT, class TraitsT>
   inline std::basic_ostream<CharT, TraitsT>&
@@ -738,6 +754,7 @@ namespace gregorian {
     return os;
   }
 
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for first_day_of_the_week_before
   template <class CharT, class Traits>
   inline
@@ -777,7 +794,7 @@ namespace gregorian {
     }
     return is;
   }
-
+#endif
   
 } } // namespaces
 
diff --git a/third_party/boost_1_48_0/boost/date_time/posix_time/posix_time_io.hpp b/third_party/boost_1_48_0/boost/date_time/posix_time/posix_time_io.hpp
index 9a80737..b2f0f24 100644
--- a/third_party/boost_1_48_0/boost/date_time/posix_time/posix_time_io.hpp
+++ b/third_party/boost_1_48_0/boost/date_time/posix_time/posix_time_io.hpp
@@ -65,6 +65,7 @@ namespace posix_time {
     return os;
   }
 
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for ptime
   template <class CharT, class Traits>
   inline
@@ -105,6 +106,7 @@ namespace posix_time {
     }
     return is;
   }
+#endif  // BOOST_NO_EXCEPTIONS
 
 
   template <class CharT, class TraitsT>
@@ -133,6 +135,7 @@ namespace posix_time {
     return os;
   }
 
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for time_period
   template <class CharT, class Traits>
   inline
@@ -169,6 +172,7 @@ namespace posix_time {
     }
     return is;
   }
+#endif  // BOOST_NO_EXCEPTIONS
 
 
   //! ostream operator for posix_time::time_duration 
@@ -198,6 +202,7 @@ namespace posix_time {
     return os;
   }
 
+#ifndef BOOST_NO_EXCEPTIONS
   //! input operator for time_duration
   template <class CharT, class Traits>
   inline
@@ -234,6 +239,7 @@ namespace posix_time {
     }
     return is;
   }
+#endif  // BOOST_NO_EXCEPTIONS
 
 } } // namespaces
 #endif // DATE_TIME_POSIX_TIME_IO_HPP__
diff --git a/third_party/boost_1_48_0/boost/date_time/time_facet.hpp b/third_party/boost_1_48_0/boost/date_time/time_facet.hpp
index 6691a48..d20e7cc 100644
--- a/third_party/boost_1_48_0/boost/date_time/time_facet.hpp
+++ b/third_party/boost_1_48_0/boost/date_time/time_facet.hpp
@@ -1013,9 +1013,11 @@ namespace date_time {
                         t = time_type(static_cast<special_values>(mr.current_match));
                         return sitr;
                       }
+#ifndef BOOST_NO_EXCEPTIONS
                       else {
                         throw; // rethrow bad_year
                       }
+#endif
                     }
                     break;
                   }
@@ -1034,9 +1036,11 @@ namespace date_time {
                         t = time_type(static_cast<special_values>(mr.current_match));
                         return sitr;
                       }
+#ifndef BOOST_NO_EXCEPTIONS
                       else {
                         throw; // rethrow bad_month
                       }
+#endif
                     }
                     // did m_parser already advance sitr to next char?
                     if(mr.has_remaining()) {
@@ -1061,9 +1065,11 @@ namespace date_time {
                         t = time_type(static_cast<special_values>(mr.current_match));
                         return sitr;
                       }
+#ifndef BOOST_NO_EXCEPTIONS
                       else {
                         throw; // rethrow bad_weekday
                       }
+#endif
                     }
                     // did m_parser already advance sitr to next char?
                     if(mr.has_remaining()) {
@@ -1098,9 +1104,11 @@ namespace date_time {
                         t = time_type(static_cast<special_values>(mr.current_match));
                         return sitr;
                       }
+#ifndef BOOST_NO_EXCEPTIONS
                       else {
                         throw; // rethrow bad_day_of_month
                       }
+#endif
                     }
                     break;
                   }
diff --git a/third_party/boost_1_48_0/boost/dynamic_bitset/dynamic_bitset.hpp b/third_party/boost_1_48_0/boost/dynamic_bitset/dynamic_bitset.hpp
index 930e4b2..990dbab 100644
--- a/third_party/boost_1_48_0/boost/dynamic_bitset/dynamic_bitset.hpp
+++ b/third_party/boost_1_48_0/boost/dynamic_bitset/dynamic_bitset.hpp
@@ -1090,6 +1090,7 @@ to_block_range(const dynamic_bitset<Block, Allocator>& b,
     std::copy(b.m_bits.begin(), b.m_bits.end(), result);
 }
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename Block, typename Allocator>
 unsigned long dynamic_bitset<Block, Allocator>::
 to_ulong() const
@@ -1123,6 +1124,7 @@ to_ulong() const
 
   return result;
 }
+#endif
 
 template <typename Block, typename Allocator>
 inline typename dynamic_bitset<Block, Allocator>::size_type
@@ -1403,7 +1405,7 @@ operator<<(std::ostream& os, const dynamic_bitset<Block, Alloc>& b)
 
 }
 #else
-
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename Ch, typename Tr, typename Block, typename Alloc>
 std::basic_ostream<Ch, Tr>&
 operator<<(std::basic_ostream<Ch, Tr>& os,
@@ -1483,6 +1485,7 @@ operator<<(std::basic_ostream<Ch, Tr>& os,
 
 }
 #endif
+#endif
 
 
 #ifdef BOOST_OLD_IOSTREAMS
@@ -1498,6 +1501,7 @@ operator<<(std::basic_ostream<Ch, Tr>& os,
         operator bool() const { return m_ok; }
     };
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename Block, typename Alloc>
 std::istream&
 operator>>(std::istream& is, dynamic_bitset<Block, Alloc>& b)
@@ -1553,9 +1557,10 @@ operator>>(std::istream& is, dynamic_bitset<Block, Alloc>& b)
 
     return is;
 }
-
+#endif  // BOOST_NO_EXCEPTIONS
 #else // BOOST_OLD_IOSTREAMS
 
+#ifndef BOOST_NO_EXCEPTIONS
 template <typename Ch, typename Tr, typename Block, typename Alloc>
 std::basic_istream<Ch, Tr>&
 operator>>(std::basic_istream<Ch, Tr>& is, dynamic_bitset<Block, Alloc>& b)
@@ -1629,7 +1634,7 @@ operator>>(std::basic_istream<Ch, Tr>& is, dynamic_bitset<Block, Alloc>& b)
     return is;
 
 }
-
+#endif // BOOST_NO_EXCEPTIONS
 
 #endif
 
diff --git a/third_party/boost_1_48_0/boost/function/function_template.hpp b/third_party/boost_1_48_0/boost/function/function_template.hpp
index bf139a0..9a09013 100644
--- a/third_party/boost_1_48_0/boost/function/function_template.hpp
+++ b/third_party/boost_1_48_0/boost/function/function_template.hpp
@@ -753,9 +753,12 @@ namespace boost {
 
     result_type operator()(BOOST_FUNCTION_PARMS) const
     {
+#ifndef BOOST_NO_EXCEPTIONS
       if (this->empty())
         boost::throw_exception(bad_function_call());
-
+#else
+      assert(!this->empty());
+#endif
       return get_vtable()->invoker
                (this->functor BOOST_FUNCTION_COMMA BOOST_FUNCTION_ARGS);
     }
diff --git a/third_party/boost_1_48_0/boost/functional/factory.hpp b/third_party/boost_1_48_0/boost/functional/factory.hpp
index 4aa4267..7f602ac 100644
--- a/third_party/boost_1_48_0/boost/functional/factory.hpp
+++ b/third_party/boost_1_48_0/boost/functional/factory.hpp
@@ -147,13 +147,17 @@ namespace boost
     inline result_type operator()(BOOST_PP_ENUM_BINARY_PARAMS(N,T,& a)) const
     {
         value_type* memory = this->get_allocator().allocate(1);
+#ifndef BOOST_NO_EXCEPTIONS
         try
+#endif
         { 
             return make_pointer(
                 new(memory) value_type(BOOST_PP_ENUM_PARAMS(N,a)),
                 boost::non_type<factory_alloc_propagation,AP>() );
         }
+#ifndef BOOST_NO_EXCEPTIONS
         catch (...) { this->get_allocator().deallocate(memory,1); throw; }
+#endif
     }
 #     endif
 #     undef N
diff --git a/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/make_tuple.hpp b/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/make_tuple.hpp
index 53306da..6abb033 100644
--- a/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/make_tuple.hpp
+++ b/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/make_tuple.hpp
@@ -18,4 +18,4 @@
 #include <boost/fusion/tuple/detail/preprocessed/make_tuple50.hpp>
 #else
 #error "FUSION_MAX_VECTOR_SIZE out of bounds for preprocessed headers"
-#endif
\ No newline at end of file
+#endif
diff --git a/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/tuple.hpp b/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/tuple.hpp
index 8f9b94a..e1cd851 100644
--- a/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/tuple.hpp
+++ b/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/tuple.hpp
@@ -18,4 +18,4 @@
 #include <boost/fusion/tuple/detail/preprocessed/tuple50.hpp>
 #else
 #error "FUSION_MAX_VECTOR_SIZE out of bounds for preprocessed headers"
-#endif
\ No newline at end of file
+#endif
diff --git a/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/tuple_fwd.hpp b/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/tuple_fwd.hpp
index ec01d4b..234936c 100644
--- a/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/tuple_fwd.hpp
+++ b/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/tuple_fwd.hpp
@@ -18,4 +18,4 @@
 #include <boost/fusion/tuple/detail/preprocessed/tuple50_fwd.hpp>
 #else
 #error "FUSION_MAX_VECTOR_SIZE out of bounds for preprocessed headers"
-#endif
\ No newline at end of file
+#endif
diff --git a/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/tuple_tie.hpp b/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/tuple_tie.hpp
index 02fd8f7..5898c6b 100644
--- a/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/tuple_tie.hpp
+++ b/third_party/boost_1_48_0/boost/fusion/tuple/detail/preprocessed/tuple_tie.hpp
@@ -18,4 +18,4 @@
 #include <boost/fusion/tuple/detail/preprocessed/tuple_tie50.hpp>
 #else
 #error "FUSION_MAX_VECTOR_SIZE out of bounds for preprocessed headers"
-#endif
\ No newline at end of file
+#endif
diff --git a/third_party/boost_1_48_0/boost/intrusive/detail/utilities.hpp b/third_party/boost_1_48_0/boost/intrusive/detail/utilities.hpp
index a03bf36..e66b1f8 100644
--- a/third_party/boost_1_48_0/boost/intrusive/detail/utilities.hpp
+++ b/third_party/boost_1_48_0/boost/intrusive/detail/utilities.hpp
@@ -698,11 +698,14 @@ class array_initializer
    {
       char *init_buf = (char*)rawbuf;
       std::size_t i = 0;
+#ifndef BOOST_NO_EXCEPTIONS
       try{
+#endif
          for(; i != N; ++i){
             new(init_buf)T(init);
             init_buf += sizeof(T);
          }
+#ifndef BOOST_NO_EXCEPTIONS
       }
       catch(...){
          while(i--){
@@ -711,6 +714,7 @@ class array_initializer
          }
          throw;
       }
+#endif
    }
 
    operator T* ()
diff --git a/third_party/boost_1_48_0/boost/lexical_cast.hpp b/third_party/boost_1_48_0/boost/lexical_cast.hpp
index 0004461..a989b81 100644
--- a/third_party/boost_1_48_0/boost/lexical_cast.hpp
+++ b/third_party/boost_1_48_0/boost/lexical_cast.hpp
@@ -1745,9 +1745,13 @@ namespace boost
                         interpreter(buf, buf + src_len);
 
                 Target result;
+#ifndef BOOST_NO_EXCEPTIONS
                 // Disabling ADL, by directly specifying operators.
                 if(!(interpreter.operator <<(arg) && interpreter.operator >>(result)))
                   BOOST_LCAST_THROW_BAD_CAST(Source, Target);
+#else
+                assert(interpreter.operator <<(arg) && interpreter.operator >>(result));
+#endif
                 return result;
             }
         };
@@ -1801,7 +1805,11 @@ namespace boost
                             Target,
                             Source,
                             boost::numeric::conversion_traits<Target,Source>,
+#ifndef BOOST_NO_EXCEPTIONS
                             boost::numeric::def_overflow_handler,
+#else
+                            boost::numeric::silent_overflow_handler,
+#endif
                             throw_on_precision_loss<Source>
                     > Converter ;
 
@@ -1823,7 +1831,11 @@ namespace boost
                             Target,
                             Source,
                             boost::numeric::conversion_traits<Target,Source>,
+#ifndef BOOST_NO_EXCEPTIONS
                             boost::numeric::def_overflow_handler,
+#else
+                            boost::numeric::silent_overflow_handler,
+#endif
                             throw_on_precision_loss<Source>
                     > Converter ;
 
diff --git a/third_party/boost_1_48_0/boost/numeric/conversion/converter.hpp b/third_party/boost_1_48_0/boost/numeric/conversion/converter.hpp
index 331cadd..fd8c1e4 100644
--- a/third_party/boost_1_48_0/boost/numeric/conversion/converter.hpp
+++ b/third_party/boost_1_48_0/boost/numeric/conversion/converter.hpp
@@ -21,7 +21,11 @@ namespace boost { namespace numeric
 template<class T,
          class S,
          class Traits           = conversion_traits<T,S>,
+#ifndef BOOST_NO_EXCEPTIONS
          class OverflowHandler  = def_overflow_handler,
+#else
+         class OverflowHandler  = silent_overflow_handler,
+#endif
          class Float2IntRounder = Trunc< BOOST_DEDUCED_TYPENAME Traits::source_type>  ,
          class RawConverter     = raw_converter<Traits>,
          class UserRangeChecker = UseInternalRangeChecker
@@ -44,7 +48,11 @@ struct converter : convdetail::get_converter_impl<Traits,
 
 
 template<class S,
+#ifndef BOOST_NO_EXCEPTIONS
          class OverflowHandler  = def_overflow_handler,
+#else
+         class OverflowHandler  = silent_overflow_handler,
+#endif
          class Float2IntRounder = Trunc<S>  ,
          class UserRangeChecker = UseInternalRangeChecker
         >
diff --git a/third_party/boost_1_48_0/boost/numeric/conversion/converter_policies.hpp b/third_party/boost_1_48_0/boost/numeric/conversion/converter_policies.hpp
index b0d741b..b808ca7 100644
--- a/third_party/boost_1_48_0/boost/numeric/conversion/converter_policies.hpp
+++ b/third_party/boost_1_48_0/boost/numeric/conversion/converter_policies.hpp
@@ -153,7 +153,7 @@ class positive_overflow : public bad_numeric_cast
     virtual const char * what() const throw()
       { return "bad numeric conversion: positive overflow"; }
 };
-
+#ifndef BOOST_NO_EXCEPTIONS
 struct def_overflow_handler
 {
   void operator() ( range_check_result r ) // throw(negative_overflow,positive_overflow)
@@ -164,7 +164,7 @@ struct def_overflow_handler
            throw positive_overflow() ;
   }
 } ;
-
+#endif
 struct silent_overflow_handler
 {
   void operator() ( range_check_result ) {} // throw()
diff --git a/third_party/boost_1_48_0/boost/numeric/conversion/detail/preprocessed/numeric_cast_traits.hpp b/third_party/boost_1_48_0/boost/numeric/conversion/detail/preprocessed/numeric_cast_traits.hpp
index 8259097..e8d6776 100644
--- a/third_party/boost_1_48_0/boost/numeric/conversion/detail/preprocessed/numeric_cast_traits.hpp
+++ b/third_party/boost_1_48_0/boost/numeric/conversion/detail/preprocessed/numeric_cast_traits.hpp
@@ -16,7 +16,11 @@ namespace boost { namespace numeric {
           , char
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<char> rounding_policy;
     }; 
@@ -28,7 +32,11 @@ namespace boost { namespace numeric {
           , boost::int8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int8_t> rounding_policy;
     }; 
@@ -40,7 +48,11 @@ namespace boost { namespace numeric {
           , boost::uint8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint8_t> rounding_policy;
     }; 
@@ -52,7 +64,11 @@ namespace boost { namespace numeric {
           , boost::int16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int16_t> rounding_policy;
     }; 
@@ -64,7 +80,11 @@ namespace boost { namespace numeric {
           , boost::uint16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint16_t> rounding_policy;
     }; 
@@ -76,7 +96,11 @@ namespace boost { namespace numeric {
           , boost::int32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int32_t> rounding_policy;
     }; 
@@ -88,7 +112,11 @@ namespace boost { namespace numeric {
           , boost::uint32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint32_t> rounding_policy;
     }; 
@@ -100,7 +128,11 @@ namespace boost { namespace numeric {
           , boost::int64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int64_t> rounding_policy;
     }; 
@@ -112,7 +144,11 @@ namespace boost { namespace numeric {
           , boost::uint64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint64_t> rounding_policy;
     }; 
@@ -124,7 +160,11 @@ namespace boost { namespace numeric {
           , float
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<float> rounding_policy;
     }; 
@@ -136,7 +176,11 @@ namespace boost { namespace numeric {
           , double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<double> rounding_policy;
     }; 
@@ -148,7 +192,11 @@ namespace boost { namespace numeric {
           , long double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<long double> rounding_policy;
     }; 
@@ -161,7 +209,11 @@ namespace boost { namespace numeric {
           , char
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<char> rounding_policy;
     }; 
@@ -173,7 +225,11 @@ namespace boost { namespace numeric {
           , boost::int8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int8_t> rounding_policy;
     }; 
@@ -185,7 +241,11 @@ namespace boost { namespace numeric {
           , boost::uint8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint8_t> rounding_policy;
     }; 
@@ -197,7 +257,11 @@ namespace boost { namespace numeric {
           , boost::int16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int16_t> rounding_policy;
     }; 
@@ -209,7 +273,11 @@ namespace boost { namespace numeric {
           , boost::uint16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint16_t> rounding_policy;
     }; 
@@ -221,7 +289,11 @@ namespace boost { namespace numeric {
           , boost::int32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int32_t> rounding_policy;
     }; 
@@ -233,7 +305,11 @@ namespace boost { namespace numeric {
           , boost::uint32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint32_t> rounding_policy;
     }; 
@@ -245,7 +321,11 @@ namespace boost { namespace numeric {
           , boost::int64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int64_t> rounding_policy;
     }; 
@@ -257,7 +337,11 @@ namespace boost { namespace numeric {
           , boost::uint64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint64_t> rounding_policy;
     }; 
@@ -269,7 +353,11 @@ namespace boost { namespace numeric {
           , float
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<float> rounding_policy;
     }; 
@@ -281,7 +369,11 @@ namespace boost { namespace numeric {
           , double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<double> rounding_policy;
     }; 
@@ -293,7 +385,11 @@ namespace boost { namespace numeric {
           , long double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<long double> rounding_policy;
     }; 
@@ -306,7 +402,11 @@ namespace boost { namespace numeric {
           , char
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<char> rounding_policy;
     }; 
@@ -318,7 +418,11 @@ namespace boost { namespace numeric {
           , boost::int8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int8_t> rounding_policy;
     }; 
@@ -330,7 +434,11 @@ namespace boost { namespace numeric {
           , boost::uint8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint8_t> rounding_policy;
     }; 
@@ -342,7 +450,11 @@ namespace boost { namespace numeric {
           , boost::int16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int16_t> rounding_policy;
     }; 
@@ -354,7 +466,11 @@ namespace boost { namespace numeric {
           , boost::uint16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint16_t> rounding_policy;
     }; 
@@ -366,7 +482,11 @@ namespace boost { namespace numeric {
           , boost::int32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int32_t> rounding_policy;
     }; 
@@ -378,7 +498,11 @@ namespace boost { namespace numeric {
           , boost::uint32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint32_t> rounding_policy;
     }; 
@@ -390,7 +514,11 @@ namespace boost { namespace numeric {
           , boost::int64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int64_t> rounding_policy;
     }; 
@@ -402,7 +530,11 @@ namespace boost { namespace numeric {
           , boost::uint64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint64_t> rounding_policy;
     }; 
@@ -414,7 +546,11 @@ namespace boost { namespace numeric {
           , float
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<float> rounding_policy;
     }; 
@@ -426,7 +562,11 @@ namespace boost { namespace numeric {
           , double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<double> rounding_policy;
     }; 
@@ -438,7 +578,11 @@ namespace boost { namespace numeric {
           , long double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<long double> rounding_policy;
     }; 
@@ -451,7 +595,11 @@ namespace boost { namespace numeric {
           , char
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<char> rounding_policy;
     }; 
@@ -463,7 +611,11 @@ namespace boost { namespace numeric {
           , boost::int8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int8_t> rounding_policy;
     }; 
@@ -475,7 +627,11 @@ namespace boost { namespace numeric {
           , boost::uint8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint8_t> rounding_policy;
     }; 
@@ -487,7 +643,11 @@ namespace boost { namespace numeric {
           , boost::int16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int16_t> rounding_policy;
     }; 
@@ -499,7 +659,11 @@ namespace boost { namespace numeric {
           , boost::uint16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint16_t> rounding_policy;
     }; 
@@ -511,7 +675,11 @@ namespace boost { namespace numeric {
           , boost::int32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int32_t> rounding_policy;
     }; 
@@ -523,7 +691,11 @@ namespace boost { namespace numeric {
           , boost::uint32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint32_t> rounding_policy;
     }; 
@@ -535,7 +707,11 @@ namespace boost { namespace numeric {
           , boost::int64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int64_t> rounding_policy;
     }; 
@@ -547,7 +723,11 @@ namespace boost { namespace numeric {
           , boost::uint64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint64_t> rounding_policy;
     }; 
@@ -559,7 +739,11 @@ namespace boost { namespace numeric {
           , float
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<float> rounding_policy;
     }; 
@@ -571,7 +755,11 @@ namespace boost { namespace numeric {
           , double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<double> rounding_policy;
     }; 
@@ -583,7 +771,11 @@ namespace boost { namespace numeric {
           , long double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<long double> rounding_policy;
     }; 
@@ -596,7 +788,11 @@ namespace boost { namespace numeric {
           , char
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<char> rounding_policy;
     }; 
@@ -608,7 +804,11 @@ namespace boost { namespace numeric {
           , boost::int8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int8_t> rounding_policy;
     }; 
@@ -620,7 +820,11 @@ namespace boost { namespace numeric {
           , boost::uint8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint8_t> rounding_policy;
     }; 
@@ -632,7 +836,11 @@ namespace boost { namespace numeric {
           , boost::int16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int16_t> rounding_policy;
     }; 
@@ -644,7 +852,11 @@ namespace boost { namespace numeric {
           , boost::uint16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint16_t> rounding_policy;
     }; 
@@ -656,7 +868,11 @@ namespace boost { namespace numeric {
           , boost::int32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int32_t> rounding_policy;
     }; 
@@ -668,7 +884,11 @@ namespace boost { namespace numeric {
           , boost::uint32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint32_t> rounding_policy;
     }; 
@@ -680,7 +900,11 @@ namespace boost { namespace numeric {
           , boost::int64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int64_t> rounding_policy;
     }; 
@@ -692,7 +916,11 @@ namespace boost { namespace numeric {
           , boost::uint64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint64_t> rounding_policy;
     }; 
@@ -704,7 +932,11 @@ namespace boost { namespace numeric {
           , float
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<float> rounding_policy;
     }; 
@@ -716,7 +948,11 @@ namespace boost { namespace numeric {
           , double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<double> rounding_policy;
     }; 
@@ -728,7 +964,11 @@ namespace boost { namespace numeric {
           , long double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<long double> rounding_policy;
     }; 
@@ -741,7 +981,11 @@ namespace boost { namespace numeric {
           , char
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<char> rounding_policy;
     }; 
@@ -753,7 +997,11 @@ namespace boost { namespace numeric {
           , boost::int8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int8_t> rounding_policy;
     }; 
@@ -765,7 +1013,11 @@ namespace boost { namespace numeric {
           , boost::uint8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint8_t> rounding_policy;
     }; 
@@ -777,7 +1029,11 @@ namespace boost { namespace numeric {
           , boost::int16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int16_t> rounding_policy;
     }; 
@@ -789,7 +1045,11 @@ namespace boost { namespace numeric {
           , boost::uint16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint16_t> rounding_policy;
     }; 
@@ -801,7 +1061,11 @@ namespace boost { namespace numeric {
           , boost::int32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int32_t> rounding_policy;
     }; 
@@ -813,7 +1077,11 @@ namespace boost { namespace numeric {
           , boost::uint32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint32_t> rounding_policy;
     }; 
@@ -825,7 +1093,11 @@ namespace boost { namespace numeric {
           , boost::int64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int64_t> rounding_policy;
     }; 
@@ -837,7 +1109,11 @@ namespace boost { namespace numeric {
           , boost::uint64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint64_t> rounding_policy;
     }; 
@@ -849,7 +1125,11 @@ namespace boost { namespace numeric {
           , float
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<float> rounding_policy;
     }; 
@@ -861,7 +1141,11 @@ namespace boost { namespace numeric {
           , double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<double> rounding_policy;
     }; 
@@ -873,7 +1157,11 @@ namespace boost { namespace numeric {
           , long double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<long double> rounding_policy;
     }; 
@@ -886,7 +1174,11 @@ namespace boost { namespace numeric {
           , char
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<char> rounding_policy;
     }; 
@@ -898,7 +1190,11 @@ namespace boost { namespace numeric {
           , boost::int8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int8_t> rounding_policy;
     }; 
@@ -910,7 +1206,11 @@ namespace boost { namespace numeric {
           , boost::uint8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint8_t> rounding_policy;
     }; 
@@ -922,7 +1222,11 @@ namespace boost { namespace numeric {
           , boost::int16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int16_t> rounding_policy;
     }; 
@@ -934,7 +1238,11 @@ namespace boost { namespace numeric {
           , boost::uint16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint16_t> rounding_policy;
     }; 
@@ -946,7 +1254,11 @@ namespace boost { namespace numeric {
           , boost::int32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int32_t> rounding_policy;
     }; 
@@ -958,7 +1270,11 @@ namespace boost { namespace numeric {
           , boost::uint32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint32_t> rounding_policy;
     }; 
@@ -970,7 +1286,11 @@ namespace boost { namespace numeric {
           , boost::int64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int64_t> rounding_policy;
     }; 
@@ -982,7 +1302,11 @@ namespace boost { namespace numeric {
           , boost::uint64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint64_t> rounding_policy;
     }; 
@@ -994,7 +1318,11 @@ namespace boost { namespace numeric {
           , float
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<float> rounding_policy;
     }; 
@@ -1006,7 +1334,11 @@ namespace boost { namespace numeric {
           , double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<double> rounding_policy;
     }; 
@@ -1018,7 +1350,11 @@ namespace boost { namespace numeric {
           , long double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<long double> rounding_policy;
     }; 
@@ -1031,7 +1367,11 @@ namespace boost { namespace numeric {
           , char
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<char> rounding_policy;
     }; 
@@ -1043,7 +1383,11 @@ namespace boost { namespace numeric {
           , boost::int8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int8_t> rounding_policy;
     }; 
@@ -1055,7 +1399,11 @@ namespace boost { namespace numeric {
           , boost::uint8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint8_t> rounding_policy;
     }; 
@@ -1067,7 +1415,11 @@ namespace boost { namespace numeric {
           , boost::int16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int16_t> rounding_policy;
     }; 
@@ -1079,7 +1431,11 @@ namespace boost { namespace numeric {
           , boost::uint16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint16_t> rounding_policy;
     }; 
@@ -1091,7 +1447,11 @@ namespace boost { namespace numeric {
           , boost::int32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int32_t> rounding_policy;
     }; 
@@ -1103,7 +1463,11 @@ namespace boost { namespace numeric {
           , boost::uint32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint32_t> rounding_policy;
     }; 
@@ -1115,7 +1479,11 @@ namespace boost { namespace numeric {
           , boost::int64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int64_t> rounding_policy;
     }; 
@@ -1127,7 +1495,11 @@ namespace boost { namespace numeric {
           , boost::uint64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint64_t> rounding_policy;
     }; 
@@ -1139,7 +1511,11 @@ namespace boost { namespace numeric {
           , float
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<float> rounding_policy;
     }; 
@@ -1151,7 +1527,11 @@ namespace boost { namespace numeric {
           , double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<double> rounding_policy;
     }; 
@@ -1163,7 +1543,11 @@ namespace boost { namespace numeric {
           , long double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<long double> rounding_policy;
     }; 
@@ -1176,7 +1560,11 @@ namespace boost { namespace numeric {
           , char
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<char> rounding_policy;
     }; 
@@ -1188,7 +1576,11 @@ namespace boost { namespace numeric {
           , boost::int8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int8_t> rounding_policy;
     }; 
@@ -1200,7 +1592,11 @@ namespace boost { namespace numeric {
           , boost::uint8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint8_t> rounding_policy;
     }; 
@@ -1212,7 +1608,11 @@ namespace boost { namespace numeric {
           , boost::int16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int16_t> rounding_policy;
     }; 
@@ -1224,7 +1624,11 @@ namespace boost { namespace numeric {
           , boost::uint16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint16_t> rounding_policy;
     }; 
@@ -1236,7 +1640,11 @@ namespace boost { namespace numeric {
           , boost::int32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int32_t> rounding_policy;
     }; 
@@ -1248,7 +1656,11 @@ namespace boost { namespace numeric {
           , boost::uint32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint32_t> rounding_policy;
     }; 
@@ -1260,7 +1672,11 @@ namespace boost { namespace numeric {
           , boost::int64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int64_t> rounding_policy;
     }; 
@@ -1272,7 +1688,11 @@ namespace boost { namespace numeric {
           , boost::uint64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint64_t> rounding_policy;
     }; 
@@ -1284,7 +1704,11 @@ namespace boost { namespace numeric {
           , float
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<float> rounding_policy;
     }; 
@@ -1296,7 +1720,11 @@ namespace boost { namespace numeric {
           , double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<double> rounding_policy;
     }; 
@@ -1308,7 +1736,11 @@ namespace boost { namespace numeric {
           , long double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<long double> rounding_policy;
     }; 
@@ -1321,7 +1753,11 @@ namespace boost { namespace numeric {
           , char
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<char> rounding_policy;
     }; 
@@ -1333,7 +1769,11 @@ namespace boost { namespace numeric {
           , boost::int8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int8_t> rounding_policy;
     }; 
@@ -1345,7 +1785,11 @@ namespace boost { namespace numeric {
           , boost::uint8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint8_t> rounding_policy;
     }; 
@@ -1357,7 +1801,11 @@ namespace boost { namespace numeric {
           , boost::int16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int16_t> rounding_policy;
     }; 
@@ -1369,7 +1817,11 @@ namespace boost { namespace numeric {
           , boost::uint16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint16_t> rounding_policy;
     }; 
@@ -1381,7 +1833,11 @@ namespace boost { namespace numeric {
           , boost::int32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int32_t> rounding_policy;
     }; 
@@ -1393,7 +1849,11 @@ namespace boost { namespace numeric {
           , boost::uint32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint32_t> rounding_policy;
     }; 
@@ -1405,7 +1865,11 @@ namespace boost { namespace numeric {
           , boost::int64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int64_t> rounding_policy;
     }; 
@@ -1417,7 +1881,11 @@ namespace boost { namespace numeric {
           , boost::uint64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint64_t> rounding_policy;
     }; 
@@ -1429,7 +1897,11 @@ namespace boost { namespace numeric {
           , float
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<float> rounding_policy;
     }; 
@@ -1441,7 +1913,11 @@ namespace boost { namespace numeric {
           , double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<double> rounding_policy;
     }; 
@@ -1453,7 +1929,11 @@ namespace boost { namespace numeric {
           , long double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<long double> rounding_policy;
     }; 
@@ -1466,7 +1946,11 @@ namespace boost { namespace numeric {
           , char
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<char> rounding_policy;
     }; 
@@ -1478,7 +1962,11 @@ namespace boost { namespace numeric {
           , boost::int8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int8_t> rounding_policy;
     }; 
@@ -1490,7 +1978,11 @@ namespace boost { namespace numeric {
           , boost::uint8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint8_t> rounding_policy;
     }; 
@@ -1502,7 +1994,11 @@ namespace boost { namespace numeric {
           , boost::int16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int16_t> rounding_policy;
     }; 
@@ -1514,7 +2010,11 @@ namespace boost { namespace numeric {
           , boost::uint16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint16_t> rounding_policy;
     }; 
@@ -1526,7 +2026,11 @@ namespace boost { namespace numeric {
           , boost::int32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int32_t> rounding_policy;
     }; 
@@ -1538,7 +2042,11 @@ namespace boost { namespace numeric {
           , boost::uint32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint32_t> rounding_policy;
     }; 
@@ -1550,7 +2058,11 @@ namespace boost { namespace numeric {
           , boost::int64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int64_t> rounding_policy;
     }; 
@@ -1562,7 +2074,11 @@ namespace boost { namespace numeric {
           , boost::uint64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint64_t> rounding_policy;
     }; 
@@ -1574,7 +2090,11 @@ namespace boost { namespace numeric {
           , float
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<float> rounding_policy;
     }; 
@@ -1586,7 +2106,11 @@ namespace boost { namespace numeric {
           , double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<double> rounding_policy;
     }; 
@@ -1598,7 +2122,11 @@ namespace boost { namespace numeric {
           , long double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<long double> rounding_policy;
     }; 
@@ -1611,7 +2139,11 @@ namespace boost { namespace numeric {
           , char
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<char> rounding_policy;
     }; 
@@ -1623,7 +2155,11 @@ namespace boost { namespace numeric {
           , boost::int8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int8_t> rounding_policy;
     }; 
@@ -1635,7 +2171,11 @@ namespace boost { namespace numeric {
           , boost::uint8_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint8_t> rounding_policy;
     }; 
@@ -1647,7 +2187,11 @@ namespace boost { namespace numeric {
           , boost::int16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int16_t> rounding_policy;
     }; 
@@ -1659,7 +2203,11 @@ namespace boost { namespace numeric {
           , boost::uint16_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint16_t> rounding_policy;
     }; 
@@ -1671,7 +2219,11 @@ namespace boost { namespace numeric {
           , boost::int32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int32_t> rounding_policy;
     }; 
@@ -1683,7 +2235,11 @@ namespace boost { namespace numeric {
           , boost::uint32_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint32_t> rounding_policy;
     }; 
@@ -1695,7 +2251,11 @@ namespace boost { namespace numeric {
           , boost::int64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::int64_t> rounding_policy;
     }; 
@@ -1707,7 +2267,11 @@ namespace boost { namespace numeric {
           , boost::uint64_t
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<boost::uint64_t> rounding_policy;
     }; 
@@ -1719,7 +2283,11 @@ namespace boost { namespace numeric {
           , float
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<float> rounding_policy;
     }; 
@@ -1731,7 +2299,11 @@ namespace boost { namespace numeric {
           , double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<double> rounding_policy;
     }; 
@@ -1743,7 +2315,11 @@ namespace boost { namespace numeric {
           , long double
         >
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<long double> rounding_policy;
     }; 
diff --git a/third_party/boost_1_48_0/boost/numeric/conversion/numeric_cast_traits.hpp b/third_party/boost_1_48_0/boost/numeric/conversion/numeric_cast_traits.hpp
index e24296b..002ba4e 100644
--- a/third_party/boost_1_48_0/boost/numeric/conversion/numeric_cast_traits.hpp
+++ b/third_party/boost_1_48_0/boost/numeric/conversion/numeric_cast_traits.hpp
@@ -16,7 +16,11 @@ namespace boost { namespace numeric {
     template <typename Target, typename Source, typename EnableIf = void>
     struct numeric_cast_traits
     {
+#ifndef BOOST_NO_EXCEPTIONS
         typedef def_overflow_handler    overflow_policy;
+#else
+        typedef silent_overflow_handler overflow_policy;
+#endif
         typedef UseInternalRangeChecker range_checking_policy;
         typedef Trunc<Source>           rounding_policy;
     };
diff --git a/third_party/boost_1_48_0/boost/program_options/detail/value_semantic.hpp b/third_party/boost_1_48_0/boost/program_options/detail/value_semantic.hpp
index e4b15d7..f4ee1fb 100644
--- a/third_party/boost_1_48_0/boost/program_options/detail/value_semantic.hpp
+++ b/third_party/boost_1_48_0/boost/program_options/detail/value_semantic.hpp
@@ -54,12 +54,17 @@ namespace boost { namespace program_options {
             bool allow_empty = false)
         {
             static std::basic_string<charT> empty;
+#ifndef BOOST_NO_EXCEPTIONS
             if (v.size() > 1)
                 boost::throw_exception(validation_error(validation_error::multiple_values_not_allowed));
             else if (v.size() == 1)
                 return v.front();
             else if (!allow_empty)
                 boost::throw_exception(validation_error(validation_error::at_least_one_value_required));
+#else
+            if (v.size() == 1)
+                return v.front();
+#endif
             return empty;
         }
 
@@ -84,12 +89,57 @@ namespace boost { namespace program_options {
     {
         validators::check_first_occurrence(v);
         std::basic_string<charT> s(validators::get_single_string(xs));
+#ifndef BOOST_NO_EXCEPTIONS
         try {
             v = any(lexical_cast<T>(s));
         }
         catch(const bad_lexical_cast&) {
             boost::throw_exception(invalid_option_value(s));
         }
+#else
+
+        if (typeid(T) == typeid(int)) {
+            int tmp = strtol(s.c_str(), NULL, 0);
+            v = any(tmp);
+        } else if (typeid(T) == typeid(short)) {
+            short tmp = (short) strtoul(s.c_str(), NULL, 0);
+            v = any(tmp);
+        } else if (typeid(T) == typeid(long)) {
+            long tmp = strtol(s.c_str(), NULL, 0);
+            v = any(tmp);
+        } else if (typeid(T) == typeid(long long)) {
+            long long tmp = strtoll(s.c_str(), NULL, 0);
+            v = any(tmp);
+        } else if (typeid(T) == typeid(unsigned int)) {
+            unsigned int tmp = strtoul(s.c_str(), NULL, 0);
+            v = any(tmp);
+        } else if (typeid(T) == typeid(unsigned short)) {
+            unsigned short tmp = (unsigned short) strtoul(s.c_str(), NULL, 0);
+            v = any(tmp);
+        } else if (typeid(T) == typeid(unsigned long)) {
+            unsigned long tmp = strtoul(s.c_str(), NULL, 0);
+            v = any(tmp);
+        } else if (typeid(T) == typeid(unsigned long long)) {
+            unsigned long long tmp = strtoll(s.c_str(), NULL, 0);
+            v = any(tmp);
+        } else if (typeid(T) == typeid(double)) {
+            double tmp = strtod(s.c_str(), NULL);
+            v = any(tmp);
+        } else if (typeid(T) == typeid(float)) {
+            float tmp = strtof(s.c_str(), NULL);
+            v = any(tmp);
+        } else if (typeid(T) == typeid(long double)) {
+            long double tmp = strtold(s.c_str(), NULL);
+            v = any(tmp);
+        } else if (typeid(T) == typeid(std::string)) {
+            std::basic_ostringstream<charT> oss;
+            oss << s;
+            std::string tmp = oss.str();
+            v = any(tmp);
+        } else {
+            assert(false);
+        }
+#endif
     }
 
     BOOST_PROGRAM_OPTIONS_DECL void validate(boost::any& v, 
@@ -138,7 +188,9 @@ namespace boost { namespace program_options {
         assert(NULL != tv);
         for (unsigned i = 0; i < s.size(); ++i)
         {
+#ifndef BOOST_NO_EXCEPTIONS
             try {
+#endif
                 /* We call validate so that if user provided
                    a validator for class T, we use it even
                    when parsing vector<T>.  */
@@ -147,10 +199,12 @@ namespace boost { namespace program_options {
                 cv.push_back(s[i]);
                 validate(a, cv, (T*)0, 0);                
                 tv->push_back(boost::any_cast<T>(a));
+#ifndef BOOST_NO_EXCEPTIONS
             }
             catch(const bad_lexical_cast& /*e*/) {
                 boost::throw_exception(invalid_option_value(s[i]));
             }
+#endif
         }
     }
 
diff --git a/third_party/boost_1_48_0/boost/program_options/value_semantic.hpp b/third_party/boost_1_48_0/boost/program_options/value_semantic.hpp
index 033009e..98787e2 100644
--- a/third_party/boost_1_48_0/boost/program_options/value_semantic.hpp
+++ b/third_party/boost_1_48_0/boost/program_options/value_semantic.hpp
@@ -11,8 +11,11 @@
 
 #include <boost/any.hpp>
 #include <boost/function/function1.hpp>
+#ifndef BOOST_NO_EXCEPTIONS
 #include <boost/lexical_cast.hpp>
-
+#else
+#include <sstream>
+#endif
 
 #include <string>
 #include <vector>
@@ -195,7 +198,13 @@ namespace boost { namespace program_options {
         typed_value* default_value(const T& v)
         {
             m_default_value = boost::any(v);
+#ifndef BOOST_NO_EXCEPTIONS
             m_default_value_as_text = boost::lexical_cast<std::string>(v);
+#else
+            std::ostringstream oss;
+            oss << v;
+            m_default_value_as_text = oss.str();
+#endif
             return this;
         }
 
@@ -222,8 +231,13 @@ namespace boost { namespace program_options {
         typed_value* implicit_value(const T &v)
         {
             m_implicit_value = boost::any(v);
-            m_implicit_value_as_text =
-                boost::lexical_cast<std::string>(v);
+#ifndef BOOST_NO_EXCEPTIONS
+            m_implicit_value_as_text = boost::lexical_cast<std::string>(v);
+#else
+            std::ostringstream oss;
+            oss << v;
+            m_implicit_value_as_text = oss.str();
+#endif
             return this;
         }
 
diff --git a/third_party/boost_1_48_0/boost/python.hpp b/third_party/boost_1_48_0/boost/python.hpp
index ae49aba..906ee45 100644
--- a/third_party/boost_1_48_0/boost/python.hpp
+++ b/third_party/boost_1_48_0/boost/python.hpp
@@ -8,6 +8,13 @@
 #ifndef PYTHON_DWA2002810_HPP
 # define PYTHON_DWA2002810_HPP
 
+#ifdef _POSIX_C_SOURCE
+#undef _POSIX_C_SOURCE
+#endif
+#ifdef _XOPEN_SOURCE
+#undef _XOPEN_SOURCE
+#endif
+
 # include <boost/python/args.hpp>
 # include <boost/python/args_fwd.hpp>
 # include <boost/python/back_reference.hpp>
diff --git a/third_party/boost_1_48_0/boost/random/detail/integer_log2.hpp b/third_party/boost_1_48_0/boost/random/detail/integer_log2.hpp
index 22f5255..476fe28 100644
--- a/third_party/boost_1_48_0/boost/random/detail/integer_log2.hpp
+++ b/third_party/boost_1_48_0/boost/random/detail/integer_log2.hpp
@@ -27,7 +27,7 @@ namespace detail {
 #elif defined(BOOST_MSVC)
 #define BOOST_RANDOM_DETAIL_CONSTEXPR __forceinline
 #elif defined(__GNUC__) && __GNUC__ >= 4
-#define BOOST_RANDOM_DETAIL_CONSTEXPR __attribute__((const)) __attribute__((always_inline))
+#define BOOST_RANDOM_DETAIL_CONSTEXPR inline __attribute__((const)) __attribute__((always_inline))
 #else
 #define BOOST_RANDOM_DETAIL_CONSTEXPR inline
 #endif
diff --git a/third_party/boost_1_48_0/boost/random/detail/seed_impl.hpp b/third_party/boost_1_48_0/boost/random/detail/seed_impl.hpp
index e044d45..e8c6916 100644
--- a/third_party/boost_1_48_0/boost/random/detail/seed_impl.hpp
+++ b/third_party/boost_1_48_0/boost/random/detail/seed_impl.hpp
@@ -302,9 +302,13 @@ void fill_array_int_impl(Iter& first, Iter last, UIntType (&x)[n])
     for(std::size_t j = 0; j < n; j++) {
         UIntType val = 0;
         for(std::size_t k = 0; k < (w+31)/32; ++k) {
+#ifndef BOOST_NO_EXCEPTIONS
             if(first == last) {
                 throw std::invalid_argument("Not enough elements in call to seed.");
             }
+#else //BOOST_NO_EXCEPTIONS
+            assert(first != last);
+#endif //BOOST_NO_EXCEPTIONS
             val += static_cast<UIntType>(*first++) << 32*k;
         }
         x[j] = val & ::boost::low_bits_mask_t<w>::sig_bits;
diff --git a/third_party/boost_1_48_0/boost/regex/config.hpp b/third_party/boost_1_48_0/boost/regex/config.hpp
index 3b92e6a..5b83e0a 100644
--- a/third_party/boost_1_48_0/boost/regex/config.hpp
+++ b/third_party/boost_1_48_0/boost/regex/config.hpp
@@ -372,7 +372,7 @@ BOOST_REGEX_DECL void BOOST_REGEX_CALL reset_stack_guard_page();
 #     undef BOOST_REGEX_HAS_MS_STACK_GUARD
 #  endif
 #  ifndef BOOST_REGEX_MAX_CACHE_BLOCKS
-#     define BOOST_REGEX_MAX_CACHE_BLOCKS 16
+#     define BOOST_REGEX_MAX_CACHE_BLOCKS 0
 #  endif
 #endif
 
diff --git a/third_party/boost_1_48_0/boost/regex/v4/basic_regex_creator.hpp b/third_party/boost_1_48_0/boost/regex/v4/basic_regex_creator.hpp
index c4b1c04..01693f9 100644
--- a/third_party/boost_1_48_0/boost/regex/v4/basic_regex_creator.hpp
+++ b/third_party/boost_1_48_0/boost/regex/v4/basic_regex_creator.hpp
@@ -517,24 +517,21 @@ re_syntax_base* basic_regex_creator<charT, traits>::append_set(
    return result;
 }
 
-namespace{
-
 template<class T>
 inline bool char_less(T t1, T t2)
 {
    return t1 < t2;
 }
 template<>
-inline bool char_less<char>(char t1, char t2)
+inline bool char_less(char t1, char t2)
 {
    return static_cast<unsigned char>(t1) < static_cast<unsigned char>(t2);
 }
 template<>
-inline bool char_less<signed char>(signed char t1, signed char t2)
+inline bool char_less(signed char t1, signed char t2)
 {
    return static_cast<unsigned char>(t1) < static_cast<unsigned char>(t2);
 }
-}
 
 template <class charT, class traits>
 re_syntax_base* basic_regex_creator<charT, traits>::append_set(
@@ -1035,7 +1032,7 @@ int basic_regex_creator<charT, traits>::calculate_backstep(re_syntax_base* state
                state = rep->alt.p;
                continue;
             }
-            else if((state->type == syntax_element_long_set_rep)) 
+            else if(state->type == syntax_element_long_set_rep)
             {
                BOOST_ASSERT(rep->next.p->type == syntax_element_long_set);
                if(static_cast<re_set_long<mask_type>*>(rep->next.p)->singleton == 0)
@@ -1113,9 +1110,9 @@ void basic_regex_creator<charT, traits>::create_startmap(re_syntax_base* state,
          if(l_map)
          {
             l_map[0] |= mask_init;
-            l_map['\n'] |= mask;
-            l_map['\r'] |= mask;
-            l_map['\f'] |= mask;
+            l_map[static_cast<unsigned>('\n')] |= mask;
+            l_map[static_cast<unsigned>('\r')] |= mask;
+            l_map[static_cast<unsigned>('\f')] |= mask;
             l_map[0x85] |= mask;
          }
          // now figure out if we can match a NULL string at this point:
@@ -1302,8 +1299,8 @@ void basic_regex_creator<charT, traits>::create_startmap(re_syntax_base* state,
          if(l_map)
          {
             l_map[0] |= mask_init;
-            l_map['\n'] |= mask;
-            l_map['\r'] |= mask;
+            l_map[static_cast<unsigned>('\n')] |= mask;
+            l_map[static_cast<unsigned>('\r')] |= mask;
          }
          if(pnull)
             *pnull |= mask;
@@ -1338,7 +1335,7 @@ void basic_regex_creator<charT, traits>::create_startmap(re_syntax_base* state,
             re_syntax_base* p = m_pdata->m_first_state;
             while(p)
             {
-               if((p->type == syntax_element_recurse))
+               if(p->type == syntax_element_recurse)
                {
                   re_brace* p2 = static_cast<re_brace*>(static_cast<re_jump*>(p)->alt.p);
                   if((p2->type == syntax_element_startmark) && (p2->index == static_cast<re_brace*>(state)->index))
diff --git a/third_party/boost_1_48_0/boost/smart_ptr/detail/shared_count.hpp b/third_party/boost_1_48_0/boost/smart_ptr/detail/shared_count.hpp
index f96a220..23ffb92 100644
--- a/third_party/boost_1_48_0/boost/smart_ptr/detail/shared_count.hpp
+++ b/third_party/boost_1_48_0/boost/smart_ptr/detail/shared_count.hpp
@@ -103,7 +103,9 @@ public:
         if( pi_ == 0 )
         {
             boost::checked_delete( p );
+#ifdef CONTRAIL_THROW_EXCEPTION
             boost::throw_exception( std::bad_alloc() );
+#endif
         }
 
 #endif
@@ -140,7 +142,9 @@ public:
         if(pi_ == 0)
         {
             d(p); // delete p
+#ifdef CONTRAIL_THROW_EXCEPTION
             boost::throw_exception(std::bad_alloc());
+#endif
         }
 
 #endif
@@ -172,7 +176,9 @@ public:
         if( pi_ == 0 )
         {
             D()( p ); // delete p
+#ifdef CONTRAIL_THROW_EXCEPTION
             boost::throw_exception( std::bad_alloc() );
+#endif
         }
 
 #endif // #ifndef BOOST_NO_EXCEPTIONS
@@ -220,7 +226,9 @@ public:
         else
         {
             d( p );
+#ifdef CONTRAIL_THROW_EXCEPTION
             boost::throw_exception( std::bad_alloc() );
+#endif
         }
 
 #endif
@@ -268,7 +276,9 @@ public:
         else
         {
             D()( p );
+#if 0
             boost::throw_exception( std::bad_alloc() );
+#endif
         }
 
 #endif // #ifndef BOOST_NO_EXCEPTIONS
@@ -290,7 +300,9 @@ public:
 
         if( pi_ == 0 )
         {
+#if 0
             boost::throw_exception(std::bad_alloc());
+#endif
         }
 
 #endif
diff --git a/third_party/boost_1_48_0/boost/smart_ptr/enable_shared_from_this.hpp b/third_party/boost_1_48_0/boost/smart_ptr/enable_shared_from_this.hpp
index f7b1445..a40250b 100644
--- a/third_party/boost_1_48_0/boost/smart_ptr/enable_shared_from_this.hpp
+++ b/third_party/boost_1_48_0/boost/smart_ptr/enable_shared_from_this.hpp
@@ -46,14 +46,23 @@ public:
 
     shared_ptr<T> shared_from_this()
     {
-        shared_ptr<T> p( weak_this_ );
+#ifdef BOOST_NO_EXCEPTIONS
+        shared_ptr<T> p( weak_this_, boost::detail::sp_nothrow_tag());
+#else
+        shared_ptr<T> p( weak_this_);
+#endif
         BOOST_ASSERT( p.get() == this );
         return p;
     }
 
     shared_ptr<T const> shared_from_this() const
     {
-        shared_ptr<T const> p( weak_this_ );
+
+#ifdef BOOST_NO_EXCEPTIONS
+        shared_ptr<T const> p( weak_this_, boost::detail::sp_nothrow_tag());
+#else
+        shared_ptr<T const> p( weak_this_);
+#endif
         BOOST_ASSERT( p.get() == this );
         return p;
     }
diff --git a/third_party/boost_1_48_0/boost/statechart/state_machine.hpp b/third_party/boost_1_48_0/boost/statechart/state_machine.hpp
index 960cbaa..1a9a6b3 100644
--- a/third_party/boost_1_48_0/boost/statechart/state_machine.hpp
+++ b/third_party/boost_1_48_0/boost/statechart/state_machine.hpp
@@ -161,7 +161,11 @@ struct state_cast_impl_reference_target
   template< class Target >
   static Target not_found()
   {
+#ifndef BOOST_NO_EXCEPTIONS
     throw std::bad_cast();
+#else
+    assert(false);
+#endif
   }
 };
 
@@ -758,7 +762,11 @@ class state_machine : noncopyable
       if ( terminated() )
       {
         // there is no state that could handle the exception -> bail out
+#ifndef BOOST_NO_EXCEPTIONS
         throw;
+#else
+        assert(false);
+#endif
       }
 
       // If we are stable, an event handler has thrown.
@@ -795,7 +803,11 @@ class state_machine : noncopyable
       if ( ( reactionResult != detail::do_discard_event ) ||
         ( get_pointer( pOutermostUnstableState_ ) != 0 ) )
       {
+#ifndef BOOST_NO_EXCEPTIONS
         throw;
+#else
+        assert(false);
+#endif
       }
 
       return detail::do_discard_event;
diff --git a/third_party/boost_1_48_0/boost/system/system_error.hpp b/third_party/boost_1_48_0/boost/system/system_error.hpp
index 065d365..0fce225 100644
--- a/third_party/boost_1_48_0/boost/system/system_error.hpp
+++ b/third_party/boost_1_48_0/boost/system/system_error.hpp
@@ -61,6 +61,7 @@ namespace boost
     {
       if ( m_what.empty() )
       {
+#ifndef BOOST_NO_EXCEPTIONS
         try
         {
           m_what = this->std::runtime_error::what();
@@ -68,6 +69,11 @@ namespace boost
           m_what += m_error_code.message();
         }
         catch (...) { return std::runtime_error::what(); }
+#else
+        m_what = this->std::runtime_error::what();
+        if ( !m_what.empty() ) m_what += ": ";
+        m_what += m_error_code.message();
+#endif
       }
       return m_what.c_str();
     }
diff --git a/third_party/boost_1_48_0/boost/token_functions.hpp b/third_party/boost_1_48_0/boost/token_functions.hpp
index 4d1a1df..af9e3c9 100644
--- a/third_party/boost_1_48_0/boost/token_functions.hpp
+++ b/third_party/boost_1_48_0/boost/token_functions.hpp
@@ -123,27 +123,36 @@ namespace boost{
       return std::find_if(quote_.begin(),quote_.end(),f)!=quote_.end();
     }
     template <typename iterator, typename Token>
-    void do_escape(iterator& next,iterator end,Token& tok) {
+    bool do_escape(iterator& next,iterator end,Token& tok) {
       if (++next == end)
+#ifndef BOOST_NO_EXCEPTIONS
         throw escaped_list_error(std::string("cannot end with escape"));
+#else
+        return false;
+#endif
       if (Traits::eq(*next,'n')) {
         tok+='\n';
-        return;
+        return true;
       }
       else if (is_quote(*next)) {
         tok+=*next;
-        return;
+        return true;
       }
       else if (is_c(*next)) {
         tok+=*next;
-        return;
+        return true;
       }
       else if (is_escape(*next)) {
         tok+=*next;
-        return;
+        return true;
       }
       else
+#ifndef BOOST_NO_EXCEPTIONS
         throw escaped_list_error(std::string("unknown escape sequence"));
+#else
+        return false;
+#endif
+      return true;
     }
 
     public:
@@ -173,7 +182,9 @@ namespace boost{
       last_ = false;
       for (;next != end;++next) {
         if (is_escape(*next)) {
-          do_escape(next,end,tok);
+          if (!do_escape(next,end,tok)) {
+            return false;
+          }
         }
         else if (is_c(*next)) {
           if (!bInQuote) {
diff --git a/third_party/boost_1_48_0/boost/uuid/seed_rng.hpp b/third_party/boost_1_48_0/boost/uuid/seed_rng.hpp
index 6a0c357..b8beb2f 100644
--- a/third_party/boost_1_48_0/boost/uuid/seed_rng.hpp
+++ b/third_party/boost_1_48_0/boost/uuid/seed_rng.hpp
@@ -139,7 +139,7 @@ private:
         }
 
         {
-            unsigned int rn[] = { std::rand(), std::rand(), std::rand() };
+            int rn[] = { std::rand(), std::rand(), std::rand() };
             sha.process_bytes( (unsigned char const*)rn, sizeof( rn ) );
         }
 
diff --git a/third_party/boost_1_48_0/boost/uuid/string_generator.hpp b/third_party/boost_1_48_0/boost/uuid/string_generator.hpp
index 538ebe8..b2b857f 100644
--- a/third_party/boost_1_48_0/boost/uuid/string_generator.hpp
+++ b/third_party/boost_1_48_0/boost/uuid/string_generator.hpp
@@ -86,7 +86,13 @@ struct string_generator {
                     if (is_dash(c)) {
                         c = get_next_char(begin, end);
                     } else {
+#ifndef BOOST_NO_EXCEPTIONS
                         throw_invalid();
+#else
+                        uuid nil;
+                        memset(nil.data, 0, sizeof(nil.data));
+                        return nil;
+#endif
                     }
                 }
             }
@@ -101,7 +107,13 @@ struct string_generator {
         // check close brace
         if (has_open_brace) {
             c = get_next_char(begin, end);
-            check_close_brace(c, open_brace_char);
+            if (!check_close_brace(c, open_brace_char)) {
+#ifdef BOOST_NO_EXCEPTIONS
+                uuid nil;
+                memset(nil.data, 0, sizeof(nil.data));
+                return nil;
+#endif
+            }
         }
         
         return u;
@@ -112,7 +124,11 @@ private:
     typename std::iterator_traits<CharIterator>::value_type
     get_next_char(CharIterator& begin, CharIterator end) const {
         if (begin == end) {
+#ifndef BOOST_NO_EXCEPTIONS
             throw_invalid();
+#else
+            return 0;
+#endif
         }
         return *begin++;
     }
@@ -158,25 +174,36 @@ private:
         return (c == L'{');
     }
     
-    void check_close_brace(char c, char open_brace) const {
+    bool check_close_brace(char c, char open_brace) const {
         if (open_brace == '{' && c == '}') {
             //great
         } else {
+#ifndef BOOST_NO_EXCEPTIONS
             throw_invalid();
+#else
+            return false;
+#endif
         }
+        return true;
     }
     
-    void check_close_brace(wchar_t c, wchar_t open_brace) const {
+    bool check_close_brace(wchar_t c, wchar_t open_brace) const {
         if (open_brace == L'{' && c == L'}') {
             // great
         } else {
+#ifndef BOOST_NO_EXCEPTIONS
             throw_invalid();
+#else
+            return false;
+#endif
         }
+        return true;
     }
-    
+#ifndef BOOST_NO_EXCEPTIONS
     void throw_invalid() const {
         BOOST_THROW_EXCEPTION(std::runtime_error("invalid uuid string"));
     }
+#endif
 };
 
 }} // namespace boost::uuids
diff --git a/third_party/boost_1_48_0/tools/build/v2/engine/build.jam b/third_party/boost_1_48_0/tools/build/v2/engine/build.jam
index 266b07a..017c7d0 100644
--- a/third_party/boost_1_48_0/tools/build/v2/engine/build.jam
+++ b/third_party/boost_1_48_0/tools/build/v2/engine/build.jam
@@ -207,6 +207,7 @@ toolset darwin cc :  "-o " : -D
     [ opt --release : -Wl,-x -O3 -finline-functions ]
     [ opt --debug : -g -O0 -fno-inline -pg ]
     [ opt --profile : -Wl,-x -O3 -finline-functions -g -pg ]
+    -I$(SDKROOT)/usr/include -L$(SDKROOT)/usr/lib
     -I$(--python-include) -I$(--extra-include)
     : -L$(--python-lib[1]) -l$(--python-lib[2]) ;
 ## GCC 2.x, 3.x, 4.x
@@ -613,7 +614,7 @@ if $(OS) = VMS {
 rule .mkdir
 {
     NOUPDATE $(<) ;
-    if $(<:P) { DEPENDS $(<) : $(<:P) ; .mkdir $(<:P) ; }
+    if $(<) != "/" && $(<:P) { DEPENDS $(<) : $(<:P) ; .mkdir $(<:P) ; }
     if ! $(md<$(<)>) { [MKDIR] $(<) ; md<$(<)> = - ; }
 }
 if $(OS) = NT { actions [MKDIR] {
